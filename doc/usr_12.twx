*usr_12.txt*	For Vim version 8.0.  最近更新: 2006年12月

		     VIM 使用者手冊 －by Bram Moolenaar
		     譯者: Nek_in http://vimcdoc.sf.net

				小竅門


通過組合一些命令，你可以用 Vim 完成幾乎所有的工作。本章將介紹一些有用的命令組
合。涉及的命令大都是前面章節介紹過的，但也會有一點新命令。

|12.1|	單詞替換
|12.2|	把 "Last, First" 改成 "First Last"
|12.3|	排序
|12.4|	反轉行順序
|12.5|	單詞統計
|12.6|	查閱 man 資訊
|12.7|	刪除多餘空格
|12.8|	查詢單詞的使用位置

     下一章: |usr_20.txt|  快速鍵入命令列命令
     前一章: |usr_11.txt|  從崩潰中恢復
       目錄: |usr_toc.txt|

==============================================================================
*12.1*	單詞替換

替換命令可以在全文中用一個單詞替換另一個單詞:
>
	:%s/four/4/g

"%" 範圍字首表示在所有行中執行替換。最後的 "g" 標記表示替換行中的所有匹配點。
    如果你有一個象 "thirtyfour" 這樣的單詞，上面的命令會出錯。這種情況下，這
個單詞會被替換成 "thirty4"。要解決這個問題，用 "\<" 來指定匹配單詞開頭:
>
	:%s/\<four/4/g

顯然，這樣在處理 "fourteen" 的時候還是會出錯。用 "\>" 來解決這個問題:
>
	:%s/\<four\>/4/g

如果你在編碼，你可能只想替換註釋中的 "four"，而保留程式碼中的。由於這很難指定，
可以在替換命令中加一個 "c" 標記，這樣，Vim 會在每次替換前提示你:
>
	:%s/\<four\>/4/gc


在 多 個 文 件 中 替 換

假設你需要替換多個檔案中的單詞。你的一個選擇是開啟每一個檔案並手工修改。另外，
如果使用 "記錄－回放" 命令會更快。
    假設你有一個包括有 C++ 檔案的目錄，所有的檔案都以 ".cpp" 結尾。有一個叫
"GetResp" 的函式，你需要把它改名為 "GetAnswer"。

	vim *.cpp		啟動 Vim，用當前目錄的所有 C++ 檔案作為檔案參
				數。啟動後你會停在第一個檔案上。
	qq			用 q 作為暫存器啟動一次記錄。
	:%s/\<GetResp\>/GetAnswer/g
				在第一個檔案中執行替換。
	:wnext			儲存檔案並移到下一個檔案。
	q			中止記錄。
	@q			回放 q 中的記錄。這會執行又一次替換和
				":wnext"。你現在可以檢查一下記錄有沒有錯。
	999@q			對剩下的檔案執行 q 中的命令

Vim 會在最後一個檔案上報錯，因為 ":wnext" 無法移到下一個檔案上。這時所有的檔案
中的操作都完成了。

	備註:
	在回放記錄的時候，任何錯誤都會中止回放的過程。所以，要注意保證記錄中
	的命令不會產生錯誤。

這裡有一個陷阱: 如果有一個檔案不包含 "GetResp"，Vim 會報錯，而整個過程會中止，
要避免這個問題，可以在替換命令後面加一個標記:
>
	:%s/\<GetResp\>/GetAnswer/ge

"e" 標記通知 ":substitute" 命令找不到不是錯誤。

==============================================================================
*12.2*	把 "Last, First" 改成 "First Last"

你有如下樣式的一個名字列表:

	Doe, John ~
	Smith, Peter ~

你想把它改成:

	John Doe ~
	Peter Smith ~

這可以用一個命令完成:
>
	:%s/\([^,]*\), \(.*\)/\2 \1/

我們把這個命令分解成幾個部分。首先，很明顯它是一個替換命令。"%" 是行範圍，表示
作用於全文。這樣替換命令會作用於全文的每一行。
    替換命令的引數格式是 "from/to"，正斜槓區分 "from" 模式和 "to" 字串。所
以，"from" 部分是:
							\([^,]*\), \(.*\) ~

	第一對 \( 和 \) 之間的部分匹配 "Last"		\(     \)
	    匹配除逗號外的任何東西			  [^,]
	    任意多次					      *
	匹配逗號						 ,
	第二對 \( 和 \) 之間的部分匹配 "First"			   \(  \)
	    匹配任意字元					     .
	    任意多次						      *

在 "to" 部分，我們有 "\2" 和 "\1"。這些稱為 "反向引用"。它們指向前面模式中的
\( 和 \) 間的部分。"\2" 指向模式中的第二對 \( 和 \) 間的部分，也就是 "First"
名 (譯者注: 英文中 Last Name 表示姓，即家族名，後面的 First Name 表示名字)。
"\1" 指向第一對 \( \)，即 "Last" 名。
    你可以在替換部分使用多達 9 個反向引用。"\0" 表示整個匹配部分。還有一些特殊
的項可以用在替換命令中。請參閱 |sub-replace-special|。

==============================================================================
*12.3*	排序

在你的 Makefile 中常常會有檔案列表。例如:

	OBJS = \ ~
		version.o \ ~
		pch.o \ ~
		getopt.o \ ~
		util.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		backup.o ~

要對這個檔案列表排序可以用一個外部過濾命令:
>
	/^OBJS
	j
	:.,/^$/-1!sort

這會先移到 "OBJS" 開頭的行，向下移動一行，然後一行行執行過濾，直到遇到一個空
行。你也可以先選中所有需要排序的行，然後執行 "!sort"。那更容易一些，但如果有很
多行就比較麻煩。
    上面操作的結果將是:

	OBJS = \ ~
		backup.o ~
		getopt.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		pch.o \ ~
		util.o \ ~
		version.o \ ~


注意，列表中每一行都有一個續行符，但排序後就錯掉了！"backup.o" 在列表的最後，
不需要續行符，但排序後它被移動了。這時它需要有一個續行符。
    最簡單的解決方案是用 "A \<Esc>" 補一個續行符。你也可以在最後一行放一個續行
符，由於後面有一個空行，這樣做是不會有問題的。

==============================================================================
*12.4*	反轉行順序

|:global| 命令可以和 |:move| 命令聯用，將所有行移動到檔案首部。結果是檔案被按
行反轉了次序。命令是: >

	:global/^/m 0

縮寫: >

	:g/^/m 0

正則表示式 "^" 匹配行首 (即使該行是一個空行)。|:move| 命令將匹配的行移動到那個
神祕的第 0 行之後。這樣匹配的行就成了檔案中的第一行。由於 |:global| 命令不會被
改變了的行號搞混，該命令繼續匹配檔案中剩餘的行並將它們一一變為首行。

這對一個行範圍同樣有效。先移動到第一行上方並做標記 't' (mt)。然後移動到範圍的
最後一行並鍵入: >

	:'t+1,.g/^/m 't

==============================================================================
*12.5*	單詞統計

有時你要寫一些有最高字數限制的文字。Vim 可以幫你計算字數。
    如果你需要統計的是整個檔案的字數，可以用這個命令:
>
	g CTRL-G

不要在 "g" 後面輸入一個空格，這裡只是方便閱讀。
    它的輸出是:

	Col 1 of 0; Line 141 of 157; Word 748 of 774; Byte 4489 of 4976 ~

	(譯者注: 中文是:
	第 1/0 列; 第 141/157 行; 第 748/774 個詞; 第 4489/4976 個位元組 ~
	)

你可以看到你在第幾個單詞 (748) 上以及檔案中的單詞總數 (774)。

如果你要知道的是全文的一部分的字數，你可以移到該文字的開頭，輸入 "g CTRL-G"，
然後移到該段文字的末尾，再輸入 "g CTRL-G"，最後心算出結果來。這是一種很好的心
算練習，不過不是那麼容易。比較方便的辦法是使用可視模式，選中你要計算字數的文
本，然後輸入 "g CTRL-G"，結果將是:

	Selected 5 of 293 Lines; 70 of 1884 Words; 359 of 10928 Bytes ~

	(譯者注: 中文是:
	選擇了 5/293 行; 70/1884 個詞; 359/10928 個位元組 ~
	)


要知道其它計算字數，行數和其它東西總數的方法，可以參見 |count-items|。

==============================================================================
*12.6*	查閱 man 資訊					*find-manpage*

編輯一個指令碼檔案或者 C 程式的時候，有時你會需要從 man 手冊中查詢某個命令或者函
數的用法 (使用 Unix 的情況下)。讓我們先用一個簡單的方法: 把滑鼠移到對應的單詞
上然後輸入:
>
	K

Vim 會在對應的單詞上執行外部命令: man。如果能找到相應的手冊，那個手冊頁就會被
顯示出來。它常常用 more 一類的程式顯示頁面。在手冊滾動到檔案末並回車，控制就會
回到 Vim 中。

這種方法的缺點是你不能同時檢視手冊和編輯文件。這裡有一種辦法可以把手冊顯示到一
個 Vim 的視窗中。首先，載入 man 檔案型別的外掛:
>
	:runtime! ftplugin/man.vim

如果你經常用到這種方法，可以把這個命令加到你的 vimrc 檔案中。現在你可以用
":Man" 命令開啟一個顯示 man 手冊的視窗了:
>
	:Man csh

你可以在這個新的視窗中上下滾動，而手冊的本文會用語法高亮的形式顯示。這樣，你可
以找到需要的地方，並用 CTRL-W w 跳轉到原來的視窗中繼續工作。
    要指定手冊的章節，可以在手冊名稱前面指定。例如，要找第三章的 "echo":
>
	:Man 3 echo

要跳轉到另一個由 "word(1)" 形式定義的手冊，只要在上面敲 CTRL-]。無論怎樣，
":Man" 命令總使用同一個視窗。

要顯示當前游標下的單詞的手冊，這樣:
>
	\K

(如果你重定義了 <Leader>，用那個字元代替上面命令的反斜槓)。
例如，你想知道下面語句中的 "strstr()" 函式的返回值:

	if ( strstr(input, "aap") == ) ~

可以把游標移到 "strstr" 並輸入 "\K"。手冊使用的視窗會顯示 strstr() 的資訊。

==============================================================================
*12.7*	刪除多餘的空格

有些人認為行末的空格是無用，浪費而難看的。要刪除這些每行後面多餘的空格，可以執
行如下命令:
>
	:%s/\s\+$//

命令前面指明範圍是 "%"，所以這會作用於整個檔案。"substitute" 命令的匹配模式是
"\s\+$"。這表示行末 ($) 前的一個或者多個 (\+) 空格 (\s)。後面我們會介紹怎樣寫
這樣的模式。|usr_27.txt|。
    替換命令的 "to" 部分是空的: "//"。這樣就會刪除那些匹配的空白字元。

另一種沒有用的空格是 Tab 前面的字元。通常這可以刪除而不影響格式。但並不是總這
樣！所以，你最好手工刪除它。執行如下命令:
>
	/ 	

你什麼都看不見，其實這是一個空格加一個 TAB 鍵。相當於 "/<Space><Tab>"。現在，
你可以用 "x" 刪除多餘的空格，並保證格式沒有改變。接著你可以用 "n" 找到下一個位
置並重復這個操作。

==============================================================================
*12.8*	查詢單詞的使用位置

如果你是一個 UNIX 使用者，你可以用 Vim 和 grep 命令的組合來完成編輯包括特定單詞
的所有檔案的工作。這在你編輯一個程式而且想檢視和編輯看所有的包括使用某個變數
的檔案的時候非常有用。
    舉個例子，假設想編輯所有包括單詞 "frame_counter" 的 C 原始檔，你可以執行如
下命令:
>
	vim `grep -l frame_counter *.c`

讓我們分析一下這個命令。grep 從一組檔案中查詢特定的單詞。由於指定了 -l 引數，
grep 只列出檔案而不列印匹配點。被查詢的單詞是 "frame_counter"，其實這可以是任
何正則表示式。(注意: grep 所使用的正則表示式與 Vim 使用的不完全一樣)。
    整個命令用反引號 (`) 包起來，這告訴 UNIX 的 shell 使用該命令的輸出作為命令
行的一部分。於是，grep 命令產生一個檔案列表，並作為 Vim 的命令引數。Vim 將編輯
grep 列出來的所有檔案。你可以通過 ":next" 和 ":first" 命令一個一個處理這些文
件。


找 到 每 一 行

上面的命令只是找到包括單詞的那個檔案。你還需要知道單詞在該檔案中出現的地方。
    Vim 有一個內建的命令用於在一組檔案中找一個指定的字串。例如，如果你想在所
有的 C 檔案中查詢 "error_string"，可以使用如下命令:
>
	:grep error_string *.c

這會使 Vim 在所有指定的檔案 (*.c) 中查詢 "error_string"。Vim 會開啟第一個匹配
的檔案並將游標定位在第一個匹配行。要到下一個匹配行 (無論在哪個檔案)，可以執行
"cnext" 命令。要回到上一個匹配行，可以用 ":cprev" 命令。使用 "clist" 可以看到
所有的匹配點。
    ":grep" 命令會使用一個外部的程式。可能是 grep (在 Unix 上) 或者 findstr
(在 Windows 上)。你可以通過 'grepprg' 選項修改這個設定。

==============================================================================

下一章:  |usr_20.txt|  快速鍵入命令列命令

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
