*usr_02.txt* 	For Vim version 8.0.  最近更新: 2017年8月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: Nek_in http://vimcdoc.sf.net

 			    Vim 初 步


本章提供足夠的資訊使你用夠使用 Vim 來做基本的編輯。這裡提供的方法不一定是高效
快捷的。但起碼是有效的。花些時間去練習這些命令，這是後面的知識的基礎。

|02.1|	第一次執行 Vim
|02.2|	插入文字
|02.3|	移動游標
|02.4|	刪除字元
|02.5|	撤銷與重做
|02.6|	其它編輯命令
|02.7|	退出
|02.8|	尋求幫助

    下一章: |usr_03.txt| 移動
    前一章: |usr_01.txt| 關於本手冊
      目錄: |usr_toc.txt|

==============================================================================
*02.1*	第一次執行 Vim

啟動 Vim 的命令如下:
>
	gvim file.txt
<
在 UNIX 作業系統中，你可以在任意命令提示符下輸入這個命令。如果你用的是
Microsoft Windows，啟動一個 MS-DOS 視窗，再輸入這個命令。
    無論哪一種方式，現在 Vim 開始編輯一個名為 file.txt 的檔案了。由於這是一個
新建檔案，你會得到一個空的視窗。螢幕看起來會象下面這樣:

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
		('#"是當前游標的位置)

以波紋線 (~) 開頭的行表示該行在檔案中不存在。換句話說，如果 Vim 開啟的檔案不能
充滿這個顯示的螢幕，它就會顯示以波紋線開頭的行。在螢幕的底部，有一個訊息行指示
檔名為 file.txt 並且說明這是一個新建的檔案。這行資訊是臨時的，新的資訊可以覆
蓋它。


VIM 命 令

gvim 命令建立一個新視窗用於編輯。如果你用的是這個命令:
>
	vim file.txt
<
則編輯在命令視窗內進行。換句話說，如果你在 xterm 中執行，編輯器使用 xterm 窗
口。如果你用的是 Microsoft Window 的 MS-DOS 視窗，編輯器使用這個 MS-DOS 視窗。
兩個版本顯示出來的文字看起來是一樣的。但如果你用的是 gvim，就會有其他特性，如
選單欄。後面會有更多的描述。

==============================================================================
*02.2*	插入文字

Vim 是一個多模式的編輯器。就是說，在不同模式下，編輯器的響應是不同的。在普通模
式下，你敲入的字元只是命令；而在插入模式，你敲入的字元就成為插入的文字了。
    當你剛剛進入 Vim，它處在普通模式。通過敲入 "i" 命令 (i 是插入 (Insert) 的
縮寫) 可以啟動插入模式，這樣你就可以輸入文字了，這些文字將被插入到檔案中。不用
擔心輸錯了，你隨後還能夠修正它。要輸入下文的程式設計師打油詩，你可以這樣敲:
>
	iA very intelligent turtle
	Found programming UNIX a hurdle
<
輸入 "turtle" 後，按回車開始一個新行。最後，你輸入 <Esc> 鍵退出插入模式而回到
普通模式。現在在你的 Vim 視窗中就有兩行文字了:

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


我 在 什 麼 模 式？

要看到你在什麼模式，輸入如下命令:
>
	:set showmode
<
你會發現當你敲入冒號後，Vim 把游標移到視窗的最後一行。那裡是你輸入 "冒號命令"
(以冒號開頭的命令) 的地方，敲入回車結束這個命令的輸入 (所有的冒號命令都用這種
方式結束)。
    現在，如果你輸入 "i" 命令，Vim 會在視窗的底部顯示 --INSERT-- (中文模式顯示
的是 --插入--  譯者注)，這表示你在插入模式。

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

如果你輸入 <Esc> 回到普通模式，最後一行又變成空白。


擺 脫 麻 煩

Vim 新手常常遇到的一個問題是不知道自己在什麼模式下，可能是因為忘了，也可能是因
為不小心敲了一個切換模式的命令。無論你在什麼模式，要回到普通模式，只要敲 <Esc>
就可以了。有時你需要敲兩次，如果 Vim 發出 "嘀" 一聲，就表示你已經在普通模式
了。

==============================================================================
*02.3*	移動游標

回到普通模式後，你可以使用如下命令移動游標:

	h	左						*hjkl*
	j	下
	k	上
	l	右

這些命令看起來是隨便選的。無論如何，誰聽說過用 l 表示右的？但實際上，作這些選
擇是有理由的: 移動游標是最常用的編輯器命令。而這些鍵位在你的右手本位。也就是
說: 這種鍵位的設定使你可以用最快的速度執行移動操作 (特別是當你用十指輸入的時
候)。

	備註:
	你還可以用方向鍵移動游標，但這樣會減慢你輸入的速度，因為你必須把你的手
	從字母鍵移動到方向鍵。想象一下，你在一個小時內可要這樣做幾百次，這可要
	花相當多的時間的。
	    而且，有一些鍵盤是沒有方向鍵的，或者放在一些很特別的地方。所以，知
	道 hjkl 的用法在這些情況下就很有幫助了。

記住這些命令的一個方法是: h 在左邊，l 在右邊，j 指著下面。用圖表示如下:
>
		       k
		   h     l
		     j
<
學習這些命令的最好方法是使用它。用 "i" 命令輸入更多的文字。然後用 hjkl 鍵移動
游標並在某些地方輸入一些單詞。別忘了用 <Esc> 切換回普通模式。|vimtutor| 也是一
個練習的好辦法。

==============================================================================
*02.4*	刪除字元

要刪除一個字元，把游標移到它上面然後輸入 "x"。(這是對以前的打字機的一種迴歸，
那時你通過在字元上輸入 xxxx 刪除它) 例如，把游標移到行首，然後輸入xxxxxxx (七
個x) 可以刪除 "A very "。結果看起來這樣:

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

現在你可以輸入新的字元了，例如，通過輸入:
>
	iA young <Esc>
<
這個命令啟動一次插入操作 (那個 "i")，並插入 "A young"，然後退出插入模式 (最後
一個 <Esc>)。結果是:

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


刪 除 一 行

要刪除一整行，使用 "dd" 命令，後一行會移上來填掉留下的空行:

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

刪 除 一 個 換 行 符

在 Vim 中你可以把兩行連起來，這意味著刪除兩行間的換行符。"J" 命令用於完成這個
功能。
    以下面兩行為例:
>
	A young intelligent
	turtle
<
把游標移到第一行，然後按 "J":
>
	A young intelligent turtle
<
==============================================================================
*02.5*	撤銷與重做

假設現在你刪得太多了。當然，你可以重新輸入需要的內容。不過，你還有一個更簡單的
選擇。"u" 命令撤銷上一個編輯操作。看看下面這個操作: 先用 "dd" 刪除一行，再敲
"u"，該行又回來了。
    再給一個例子: 把游標移到第一行的 A 上:
>
	A young intelligent turtle
<
現在輸入 xxxxxxx 刪除 "A young"。結果如下:

	intelligent turtle ~

輸入 "u" 撤銷最後一個刪除操作。那個刪除操作刪除字元 g，所以撤銷命令恢復這個字
符:

	g intelligent turtle ~

下一個 u 命令恢復倒數第二個被刪除的字元:

	ng intelligent turtle ~

下一個 u 命令恢復 u，如此類推:

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	young intelligent turtle ~
	A young intelligent turtle ~

	備註:
	如果你輸入 "u" 兩次，你的文字恢復原樣，那應該是你的 Vim 被配置在 Vi 兼
	容模式了。要修正這個問題，看看這裡: |not-compatible|。
	本文假定你工作在 "Vim 的方式"。你可能更喜歡舊的 Vi 的模式，但是你必須
	小心本文中的一些小區別。


重 做

如果你撤銷得太多，你可以輸入 CTRL-R (redo) 回退前一個命令。換句話說，它撤銷一
個撤銷。要看執行的例子，輸入 CTRL-R 兩次。字元 A 和它後面的空格就出現了:

	young intelligent turtle ~

有一個特殊版本的撤銷命令: "U" (行撤銷)。行撤銷命令撤銷所有在最近編輯的行上的操
作。 輸入該命令兩次取消前一個 "U":

	A very intelligent turtle ~
	  xxxx			刪除 very

	A intelligent turtle ~
		      xxxxxx	刪除turtle

	A intelligent ~
				用 "U" 恢復行
	A very intelligent turtle ~
				用 "u" 撤銷 "U"
	A intelligent ~

"U" 命令本身就是一個改變操作，"u" 命令撤銷該操作，CTRL-R 命令重做該操作。有點
亂吧，但不用擔心，用 "u" 和 CTRL-R 命令你可以切換到任何你編輯過的狀態。更多信
息可見 |32.2| 一節。

==============================================================================
*02.6*	其它編輯命令

Vim 有大量的命令可以修改文字。參見 |Q_in| 和下文。這裡是一些經常用到的:

添 加

"i" 命令在游標所在字元前面插入字元。一般情況下，這就夠用了，但如果你剛好想在
行尾加東西怎麼辦？要解決這個問題，你需要在文字後插入字元。這通過 "a" (append，
附加) 命令實現。
    例如，要把如下行

	and that's not saying much for the turtle. ~
改為
	and that's not saying much for the turtle!!! ~

把游標移到行尾的句號上。然後輸入 "x" 刪除它。現在游標處於一行的尾部了，現在輸
入
>
	a!!!<Esc>
<
新增三個感嘆號到 turtle 的 "e" 後面:

	and that's not saying much for the turtle!!! ~


開 始 一 個 新 行

"o" 命令在游標下方建立一個新的空行，並把 Vim 切換到插入模式。然後你可以在這個
新行內輸入文字。
    假定你的游標在下面兩行中第一行的某個地方:

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~

如果你現在用 "o" 命令並輸入新的文字:
>

	oThat liked using Vim<Esc>

結果會是:

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

"O" 命令 (大寫) 在游標上方開啟一個新行。


指 定 計 數

假定你想向上移動 9 行，你可以輸入 "kkkkkkkkk" 或者你可以輸入"9k"。實際上，你可
以在很多命令前面加一個數字。例如在這章的前面，你通過輸入 "a!!!<Esc>" 增加三個
感嘆號。另一個方法是使用命令 "3a!<Esc>"。計數 3 要求把後面的命令執行三次。同樣
的，要刪除三個字元，可以使用 "3x"。計數總是放在要被處理多次的命令的前面。

==============================================================================
*02.7*	退出

使用 "ZZ" 命令可以退出。這個命令儲存檔案並退出。
	備註:
	與其他編輯器不一樣，Vim 不會自動建立一個備份檔案。如果你輸入 "ZZ"，你
	的修改立即生效並且不能恢復。你可以配置 Vim 讓它產生一個備份檔案，參見
	|07.4|。


放 棄 修 改

有時你會做了一系列的修改才突然發現還不如編輯之前。不用擔心，Vim 有 "放棄修改並
退出" 的命令，那就是:
>
	:q!
<
別忘了按回車使你的命令生效。

如果你關心細節，此命令有三部分組成: 冒號 (:)，它使 Vim 進入命令模式， q 命令，
它告訴 Vim 退出，而感嘆號是強制命令修飾符。
    這裡，強制命令修飾符是必要的，它強制性地要求 Vim 放棄修改並退出。如果你只
是輸入 ":q"，Vim 會顯示一個錯誤資訊並拒絕退出:

	E37: No write since last change (use ! to override) ~

通過指定強制執行，你實際上在告訴 Vim: "我知道我所做的看起來很傻，但我長大了，
知道自己在做什麼。"

如果你放棄修改後還想重新編輯，用 ":e!" 命令可以重新裝載原來的檔案。

==============================================================================
*02.8*	尋求幫助

所有你想知道的東西，都可以在 Vim 幫助檔案中找到答案，隨便問！

如果你知道自己想要找什麼，用幫助系統裡查詢通常比 Google 要方便。因為所有主題符
合一定的風格指導。

幫助的另一個優點是對應於你特定的 Vim 系統。你不會看到之後加入的命令的幫助。這
對你用不上。

要獲得一般的幫助，用這個命令:
>
	:help
<
你還可以用第一個功能鍵 <F1>。如果你的鍵盤上有一個 <Help> 鍵，可能也有效。
    如果你不指定主題，":help" 將命令顯示一個總覽的幫助視窗。Vim 的作者在幫助系
統方面使用了一個很聰明的方案 (也許可以說是很懶惰的方案): 他們用一個普通的編輯
視窗來顯示幫助。你可以在幫助視窗中使用任何普通的 Vim 命令移動游標。所以，h，
j，k 和 l 還是表示左，下，上和右。
    要退出幫助視窗，用退出一個普通視窗的命令: "ZZ"。這隻會退出幫助視窗，而不會
退出 Vim。

當你閱讀幫助的時候，你會發現有一些文字被一對豎線括起來了 (例如 |help|)。這表示
一個超級連結。如果你把游標移到這兩個豎線之間並按 CTRL-] (標籤跳轉命令)，幫助系
統會把你引向這個超級連結指向的主題。(由於不是本章的重點，這裡不詳細討論，Vim
對超級連結的術語是 "標籤" (tag)，所以 CTRL-] 實際是跳轉到游標所在單詞為名的標
籤所在的位置。)
    跳轉幾次以後，你可能想回到原來的地方。CTRL-T (標籤退棧) 把你送回前一個跳轉
點。CTRL-O (跳轉到前一個位置) 也能完成相同的功能。
    在幫助螢幕的頂上，有這樣的記號: *help.txt*。"*" 之間的名字被幫助系統用來定
義一個標籤 (也就是超級連結的目標)。
    參見 |29.1| 可以瞭解更多關於標籤的內容。

要獲得特定主題的幫助，使用如下命令:
>
	:help {主題}
<
例如，要獲得 "x" 命令的幫助，輸入如下命令:
>
	:help x
<
要知道如何刪除文字，使用如下命令:
>
	:help deleting
<
要獲得所有命令的幫助索引，使用如下命令:
>
	help index
<
如果你需要獲得一個包含控制字元的命令的幫助 (例如 CTRL-A)，你可以在它前面加上前
綴 "CTRL-"。
>
	help CTRL-A
<
Vim 有很多模式。在預設情況下，幫助系統顯示普通模式的命令。例如，如下命令顯示
普通模式的 CTRL-H 命令的幫助:
>
	:help CTRL-H
<
要表示其他模式，可以使用模式字首。如果你需要插入模式的命令幫助，使用 "i_" 前
綴。例如對於 CTRL-H，你可以用如下命令:
>
	:help i_CTRL-H
<
當你啟動 Vim，你可以使用一些命令列引數。這些引數以短橫線開頭 (-)。例如知道要
-t 這個引數是幹什麼用的，可以使用這個命令:
>
	:help -t
<
Vim 有大量的選項讓你定製這個編輯器。如果你要獲得選項的幫助，你需要把它括在一個
單引號中。例如，要知道 'number' 這個選項幹什麼的，使用如下命令:
>
	:help 'number'

下面有所有模式的字首列表: |help-summary|。

特殊鍵以尖括號包圍。例如，要找到關於插入模式的上箭頭鍵的幫助，用此命令: >

	:help i_<Up>

如果你看到一個你不能理解的錯誤資訊，例如:
>
	E37: No write since last change (use ! to override) ~

你可以使用使用E開頭的錯誤號找關於它的幫助:
>
	:help E37
<

小結:		 				*help-summary*  >

1) 鍵入主題後用 Ctrl-D 讓 Vim 顯示所有的可用主題。也可按 Tab 來補全: >
    	:help some<Tab>
<   關於如何使用 help 的詳情: >
	:help helphelp

2) 跟隨豎槓之間的連結轉到相關幫助。可從詳細幫助轉到使用者文件，這裡的一些命令解
   釋更加貼近使用者，而不過於繁瑣。例如: >
   	:help pattern.txt
<   之後，你可以看看使用者指南主題 |03.9| 和 |usr_27.txt| 相關的介紹。

3) 選項以單引號包圍。如要轉到 list 選項的幫助主題: >
	:help 'list'
<   如果你只知道你想找某個選項，也可用: >
	:help options.txt
<   來開啟描述所有選項處理的幫助頁面，然後用正規表示式搜尋，如 textwidth。
   若干選項有自己的名稱空間，例如: >
   	:help cpo-<letter>
<   可查詢 'cpoptions' 設定的相關標誌位，把 <letter> 替代為特定的標誌位，如: >
  	:help cpo-;
<   而要查 guioption 的標誌位: >
  	:help go-<letter>

4) 普通模式命令沒有字首。如要轉到 "gt" 命令的幫助頁面: >
   	:help gt

5) 插入模式命令以 i_ 開始。如關於刪除單詞的幫助: >
   	:help i_CTRL-W

6) 可視模式命令以 v_ 開始。如跳轉到可視區域另一邊的幫助: >
   	:help v_o

7) 命令列編輯和引數以 c_ 開始。如使用命令列引數 % 的幫助: >
   	:help c_%

8) Ex-命令總是以 ":" 開始，如要轉到 :s 命令的幫助: >
	:help :s

9) 專門用於除錯的命令以 ">" 開始。如要轉到 "cont" 除錯命令的幫助: >
	:help >cont

10) 鍵組合。通常以指示要使用的模式的單個字母開始。例如: >
   	:help i_CTRL-X
<    帶你到插入模式下的 Ctrl-X 命令的家族，可用於自動補全不同的事物。注意，一
    些特定的鍵總是以相同的方式書寫，如 Control 總寫作 CTRL。
    普通模式命令沒有字首，相關主題可用 :h CTRL-<Letter> 找到，如 >
   	:help CTRL-W
<    與之作對比 >
	:help c_CTRL-R
<    描述 CTRl-R 在命令列上輸入命令時的行為，而 >
   	:help v_Ctrl-A
<    講述可視模式下數值的增量，而 >
	:help g_CTRL-A
<    講述 g<C-A> 命令 (例如，你要先按 "g" 再按 <Ctrl-A>)。
    這裡 "g" 代表普通命令 "g"，它總期待按下第二個鍵後才能做事，"z" 開始的命令
    也類似

11) 正規表示式專案總是以 / 開始。如要得到 Vim 正規表示式的 "\+" 量詞的幫助: >
   	:help /\+
<    如果你需要知道所有關於正規表示式的情況，從這裡開始: >
   	:help pattern.txt

12) 暫存器總是以 "quote" 開始。如要了解特殊的 ":" 暫存器: >
   	:help quote:

13) Vim 指令碼可見 >
	:help eval.txt
<   :h expr-X 描述語言的方方面面，其中 "X" 是單個字母。如 >
   	:help expr-!
<   會帶你到描述 VimScript 中 "!" (取非) 操作符的主題。
   同樣重要 >
   	:help function-list
<   提供所有可用函式的簡短描述。Vim 指令碼函式的幫助主題總包含 "()"，如: >
   	:help append()
<   講述 Vim 指令碼的 append 函式，而不是如何在當前緩衝區內附加文字。

14) 幫助頁面 :h |map.txt| 講到對映。用 >
    	:help mapmode-i
<    來查詢 |:imap| 命令。另 :map-topic 可用來查詢關於對映的特定子主題，如: >
    	:help :map-local
<    說明緩衝區區域性的對映，或 >
	:help map-bar
<    說明如何在對映中處理 '|'。

15) :h command-topic 講述命令的定義，所以用 >
	:help command-bar
<    可以瞭解關於自定義命令的 '!' 引數。

16) 視窗管理命令總是以 CTRL-W 開始，用 :h CTRL-W_letter 可以找到相應的幫助。
    如 >
   	:help CTRL-W_p
<    說明如何移動到上次訪問過的視窗。也可訪問 >
	:help windows.txt
<    如果你在尋找視窗處理的命令，請仔細閱讀。

17) 用 |:helpgrep| 在所有幫助頁面中進行搜尋 (包括已安裝的外掛)。用法見
    |:helpgrep|。要搜尋某主題: >
    	:helpgrep topic
<    帶你到首個匹配處。要到下一個: >
	:cnext
<    quickfix 視窗包含所有的匹配，可以這樣開啟: >
    	:copen
<    先移到你要的匹配，按 Enter 跳轉到該幫助。

18) 使用者手冊。以初學者友好的方式描述幫助主題。|usr_toc.txt| 可以找到目錄 (你可
    能猜到了)，就從這裡開始吧: >
    	:help usr_toc.txt
<    粗略看看內容，找找感興趣的主題。如 "二合字母" 和 "插入特殊字元" 專案出現
    在第 24 章，所以要轉到該幫助頁面: >
    	:help usr_24.txt
<    另外要訪問幫助中的特定章節，可以這樣直接訪問章節號: >
    	:help 10.1
<    轉到 |usr_10.txt| 的第 10.1 章，那裡講述記錄巨集。

19) 高亮組。總是以 hl-groupname 開始。如 >
    	:help hl-WarningMsg
<    講述 WarningMsg 高亮組。

20) 語法高亮使用名稱空間 :syn-topic，如 >
	:help :syn-conceal
<    講述 :syn 命令的 conceal 引數。

21) quickfix 命令通常以 :c 開始，而位置列表命令通常以 :l 開始

22) 自動命令事件可用其名字查詢: >
     	:help BufWinLeave
<    要列出所有可能的事件: >
	:help autocommand-events

23) 命令列開關總是以 "-" 開始。如關於 Vim 的 -f 命令開關的幫助，可用: >
    	:help -f

24) 可選的特性總是以 "+" 開始。如瞭解 conceal 特性，可用: >
    	:help +conceal

25) 關於系統包含的檔案型別的特定功能的文件，通常所在位置的形式是
    ft-<filetype>-<functionality>。如 >
    	:help ft-c-syntax
<    講述 C 語法檔案和它提供的選項。有時，全能補全有自己的段落 >
    	:help ft-php-omni
<    檔案型別外掛也是如此，如 >
	:help ft-tex-plugin
<    可以參考。

26) 錯誤和警告程式碼可在幫助中直接查詢。這樣 >
	:help E297
<    準確地帶你到交換錯誤資訊的描述，而 >
	:help W10
<    講述警告 "Changing a readonly file"。
    不過有時，這些錯誤程式碼沒有相應描述，而是和通常產生該錯誤的 Vim 命令列在一
    起。如: >
    	:help E128
<    帶你到 |:function| 命令


==============================================================================

下一章:  |usr_03.txt|  移動

版權: 參見  |manual-copyright|     vim:tw=78:ts=8:ft=help:norl:
