*usr_27.txt*	For Vim version 8.0.  最近更新: 2005年3月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: Chimin Yen http://vimcdoc.sf.net

			     查詢命令及模式


在第三章裡，我們曾經提到過幾個簡單的查詢模式 |03.9|。Vim 能夠勝任複雜得多的查
找。本章將解釋那些最常用到的模式。詳細的說明可以查閱: |pattern|

|27.1|	忽略大小寫
|27.2|	在檔案尾折返
|27.3|	偏移
|27.4|	匹配重複性模式
|27.5|	多擇一
|27.6|	字元範圍
|27.7|	字元類
|27.8|	匹配換行符
|27.9|	舉例

       下一章: |usr_28.txt|  摺疊
       前一章: |usr_26.txt|  重複
         目錄: |usr_toc.txt|

==============================================================================
*27.1*	忽略大小寫

預設情況下，Vim 的查詢是大小寫敏感的。因此，"include"，"INCLUDE"，和 "Include"
為三個各不相同的詞，而一次查詢將僅僅匹配其中的一個。
   現在設定 'ignorecase' 選項: >

	:set ignorecase

再查詢 "include"，現在它將匹配 "Include"，"INCLUDE" 和 "InClUDe"。(設定
'hlsearch' 選項可以快速檢視哪兒有模式的匹配。)
   你可以這樣撤銷這個選項: >

	:set noignorecase

讓我們保留這個設定，並查詢 "INCLUDE"。它匹配的文字就跟查詢 "include" 時一模一
樣。現在我們設定 'smartcase' 選項: >

	:set ignorecase smartcase

如果你採用的模式裡至少有一個大寫字母，查詢就成了大小寫敏感的。可以這樣理解，你
不必鍵入大寫字母，也能查詢到含有大寫字母的詞，所以，你若鍵入大寫字母，必然是因
為你要大小寫敏感的匹配。聰明！
    設定了這兩個選項，你會找到以下匹配:

	模式			匹配	~
	word			word、Word、WORD、WoRd 等。
	Word			Word
	WORD			WORD
	WoRd			WoRd


單 個 模 式 裡 的 大 小 寫

如果你僅想忽略一個特定的模式裡的大小寫，那麼，在模式前新增 "\c" 字串就行了。
新增 "\C" 將使該模式的匹配大小寫敏感。這排除了 'ignorecase' 和 'smartcase' 選
項的影響，當 "\c" 或 "\C" 起作用時，它們設成什麼值無關緊要。

	模式			匹配	~
	\Cword			word
	\CWord			Word
	\cword			word，Word，WORD，WoRd，等。
	\cWord			word，Word，WORD，WoRd，等。

採用 "\c" 和 "\C" 的好處在於它粘附在所用的模式上。因此，重複查詢歷史記錄裡的某
個模式會產生同樣的結果。'ignorecase' 或 'smartcase' 是否更改不影響結果。

	備註:
	在查詢模式中使用以 "\" 開頭的項，其效果取決於 'magic' 選項。在本章中，
	我們將假定 'magic' 為真。這也是標準和建議的設定。如果你把它改了，那
	麼，許多查詢模式就會突然變得無效了。

	備註:
	如果你查了好久，超過了你預計的時間，你可以中斷查詢，在 Unix 上用
	CTRL-C，而在 MS-DOS 和微軟視窗上則用 CTRL-Break。

==============================================================================
*27.2*	在檔案尾折返

在預設情況下，正向查詢從當前游標位置開始，查詢特定的字串。然後它就遇到了檔案
尾。如果那個時候還沒找到那個字串，它就從頭來過，從檔案開頭一直查到游標處。
   記住，當你不斷以 "n" 命令查詢下一個匹配時，你最終回到第一個匹配。如果你不
注意，你將永遠找下去！為了提醒你，Vim 顯示如下資訊:

	search hit BOTTOM，continuing at TOP ~

如果你使用 "?" 命令按相反方向查詢，你得到的資訊是這樣的:

	search hit TOP，continuing at BOTTOM ~

可是，你還是不知道你何時回到了第一個匹配。一種辦法是設定 'ruler' 選項: >

	:set ruler

Vim 將把游標位置顯示在視窗的右下角 (如果使用了狀態條的話，會顯示在哪裡)。看起
來像這樣:

	101,29       84% ~

第一個數字是游標所在的行號。在你開始查詢的時候記住行號，那樣你就能檢查是否越過
了該位置。


無 折 返 查 找

要取消查詢折返功能，請用以下命令: >

	:set nowrapscan

現在當查詢遇到檔案末尾，一個出錯資訊就會顯示出來:

	E385: search hit BOTTOM without match for: forever ~

這樣，你只要用 "gg" 命令回到檔案開頭，並一直查到你看到以上資訊，你就能找到所有
的匹配。
   如果你用 "?" 從相反方向查詢，你將得到:

	E384: search hit TOP without match for: forever ~

==============================================================================
*27.3*	偏移

在預設情況下，查詢命令讓游標停留在匹配的模式的開始。你可以指定一個偏移，告訴
Vim 將游標停留在別的位置上。在正向查詢命令 "/" 中指定偏移，就是在模式後面附加
一個斜線符 (/) 以及偏移值: >

	/預設/2

這個命令查詢模式 "預設"。找到後使游標越過匹配的模式而前移兩行，並停留在該行的
行首。把這個命令用於以上段落中，Vim 在第一行找到詞 "預設"。接著游標再往下移兩
行，落在 "一個" 的 "一" 上。

如果該偏移為一簡單數字，那麼游標就會被放置在距離匹配那麼多行的那一行的行首。該
偏移值可為正數或負數。如果它是正數，游標會向前移該數表示的行；若為負數，則往回
退該數表示的行。


字 符 偏 移

偏移符 "e" 表示一個偏移從匹配末尾算起。它把游標移到匹配的最後一個字元上。命
令: >

	/const/e

把游標放到單詞 "const" 的 "t" 上。
   加一個數字，游標就從該位置再前移該數字指定的那麼多個字元。下面這個命令會將
游標移到匹配後面第一個字元: >

	/const/e+1

一個正數使游標右移，負數使其左移。例如: >

	/const/e-1

會把游標移到單詞 "const" 的 "s" 字元上。

如果偏移以 "b" 開頭，那麼游標就移到匹配模式的首位。因為不用 "b" 游標也一樣會被
移到首位，所以單獨使用時沒什麼意義。在將它與一個加上或減去的數字合起來時，就很
有用了。游標就會前移或後移那麼多個字元。例如: >

	/const/b+2

會把游標移到匹配的首位，再往右移兩個字元。因而落在字元 "n" 上。


重 復

當你重複前一次使用過的查詢模式，只是偏移不同時，你可以把模式省略了: >

	/that
	//e

等於: >

	/that/e

再以同樣的偏移重複查詢: >

	/

命令 "n" 具有同樣的作用。要取消一個以前用過的偏移可以用: >

	//


反 向 查 找

命令 "?" 以相同的方式使用偏移，但你必須以 "?" 來分隔模式和偏移，而非 "/": >

	?const?e-2

偏移符 "b" 和 "e" 的用途是一樣的。它們並不因為使用了 "?" 而改變方向。


起 始 位 置

查詢時，通常從游標位置開始。當你規定的是一個行偏移，這可能造成麻煩。例如: >

	/const/-2

這個命令找到下一個單詞 "const"，然後上移兩行。如果你用命令 "n" 再找，Vim 就從
當前位置開始，找到同一個 "const" 匹配。然後再一次在偏移的作用下，回到開始的地
方。你給套住了！
   還有比這更糟糕的: 假定下一行另有一個 "const" 匹配。那麼，重複正向查詢就會找
到這個匹配，並上移兩行。這樣你實際上把游標往回移了！

當你規定的是一個字元偏移，Vim 將為其作調整。因此，查詢會向前或向後跳過幾個字元
再開始，以便同一個匹配不至於再出現。

==============================================================================
*27.4*	匹配重複性模式

星號項 "*" 規定在它前面的項可以重複任意次。因此: >

	/a*

匹配 "a"，"aa"，"aaa"，等等。但也匹配 "" (空字串)，因為零次也包含在內。
   星號 "*" 僅僅應用於那個緊鄰在它前面的項。因此 "ab*" 匹配 "a"、"ab"、"abb"、
"abbb" 等等。如要多次重複整個字串，那麼該字串必須被組成一個項。組成一項的
方法就是在它前面加 "\("，後面加 "\)"。因此這個命令: >

	/\(ab\)*

匹配: "ab"，"abab"，"ababab"，等等。而且也匹配 ""。

要避免匹配空字串，使用 "\+"。這表示前面一項可以被匹配一次或多次。
>
	/ab\+

匹配 "ab"、"abb"、"abbb" 等等。它不匹配後面沒有跟隨 "b" 的 "a"。

要匹配一個可選項，用 "\="。 例如: >

	/folders\=

匹配 "folder" 和 "folders"。


指 定 重 復 次 數

要匹配某一項的特定次數重複，使用 "\{n,m}" 這樣的形式。其中 "n" 和 "m" 都是數
字。在它前面的那個項將被重複 "n" 到 "m" 次 (|inclusive| 包含 "n" 和 "m")。例
如 :
>

	/ab\{3,5}

匹配 "abbb"、"abbbb" 以及 "abbbbb"。
  當 "n" 省略時，被預設為零。當 "m" 省略時，被預設為無限大。當 ",m" 省略時，就
表示重複正好 "n" 次。例如:

	模式		匹配次數 ~
	\{,4}		0，1，2，3 或 4
	\{3,}		3，4，5 等等
	\{0,1}		0 或 1，同 \=
	\{0,}		0 或更多，同 *
	\{1,}		1 或更多，同 \+
	\{3}		3


匹配儘可能少的字元

迄今為止，我們所討論過的都試圖匹配儘可能多的字元。若要匹配儘可能少的字元，請用
"\{-n,m}"。它的用法跟 "\{n,m}" 一樣，唯一的區別在於，它採用儘可能少的字元。
   例如，以下命令: >

	/ab\{-1,3}

將匹配 "abbb" 中的 "ab"。實際上，因為沒理由匹配更多，所以它永遠不會匹配超過一
個 b。它需要其它的來強制它超過其下限規定次數，而匹配更多的重複。
   這些同樣的規則也適用於省略 "n" 和 "m" 的情形。甚至可以把兩個都省略，只剩
"\{-}"。這個項匹配其前項的重複，重複次數儘可能少，可以等於或大於零。這個項如單
獨使用，則總是匹配前項的零次重複。當它跟與其它的模式合起來時，用處就大了。例
如: >

	/a.\{-}b

這個命令匹配 "axbxb" 中的 "axb"。如果採用了下面這個模式: >

	/a.*b

由於 ".*" 匹配儘可能多的字元，整個 "axbxb" 都會被匹配。

==============================================================================
*27.5*	多擇一

在一個查詢模式中，"或" 運算子是 "\|"。例如: >

	/foo\|bar

這個命令匹配了 "foo" 或 "bar"。更多的抉擇可以連在後面: >

	/one\|two\|three

匹配 "one"、"two" 或 "three"。
   如要匹配其多次重複，那麼整個抉擇結構須置於 "\(" 和 "\)" 之間: >

	/\(foo\|bar\)\+

這個命令匹配 "foo"、"foobar"、"foofoo"、"barfoobar" 等等。
   再舉個例子: >

	/end\(if\|while\|for\)

這個命令匹配 "endif"、"endwhile" 和 "endfor"。

一個與此相關的項是 "\&"。它要求兩個抉擇都與同一位置的文字相符。而最終匹配的則
是最後面的那個抉擇。例如: >

	/forever\&...

這個命令匹配 "forever" 中的 "for" (譯者: 因為第二抉擇要求三個字元)。它將不匹
配，比如說 "fortuin" (譯者: 不符合第一抉擇)。

==============================================================================
*27.6*	字元範圍

你可以用 "/a\|b\|c" 來匹配 "a"，"b" 或 "c"。當你需要匹配自 "a" 至 "z" 所有的字
母時，以這樣的方式表達就嫌長了。這裡有個比較簡短的表達方式: >

	/[a-z]

方括號結構 [] 匹配單個字元。你在括號內指定哪些字元可以匹配。你可以把一系列字元
包含在內，像這樣: >

	/[0123456789abcdef]

這個命令將匹配其中的任何一個字元。你可以為一系列連續字元規定一個字元範圍。
"0-3" 表示 "0123"。"w-z" 表示 "wxyz"。因此，上面那個命令可以縮短為: >

	/[0-9a-f]

若要匹配字元 "-" 本身，就得把它放在字元範圍的第一或最後的位置上。Vim 會識別下
面這些特殊字元，以便在 [] 字元範圍裡較為方便地使用它們 (它們實際上可被用於任何
查詢模式的任何地方):

	\e	<Esc>
	\t	<Tab>
	\r	<CR>
	\b	<BS>

還有若干特殊場合用得上 [] 字元範圍，參閱 |/[]| 以瞭解全部用法。


範 圍 求 反

為了避免匹配到一個特定的字元，在字元範圍首位使用 "^"。這樣方括號項 [] 就會匹配
任何括號內不包括的字元。例如: >

	/"[^"]*"
<
	 "	  雙引號
	  [^"]	  雙引號以外的任何字元
	      *	  儘可能多個
	       "  又一個雙引號

這個命令匹配 "foo" 和 "3!x"，包含雙引號在內。


預 定 義 範 圍

有些字元範圍使用得很頻繁。Vim 為這些字元範圍提供了一些快捷方式。例如: >

	/\a

這個命令找尋字母字元。這相當於使用 "/[a-zA-Z]"。下面還有幾個這樣的字元範圍:

	項	匹配			相當於 ~
	\d	數位			[0-9]
	\D	非數位			[^0-9]
	\x	十六進位制數位		[0-9a-fA-F]
	\X	非十六進位制數位		[^0-9a-fA-F]
	\s	空白字元		[ 	]     (<Tab> 和 <Space>)
	\S	非空白字元		[^ 	]     (非 <Tab> 和 <Space>)
	\l	小寫字母		[a-z]
	\L	非小寫字母		[^a-z]
	\u	大寫字母		[A-Z]
	\U	非大寫字母		[^A-Z]

	備註:
	使用這些預定義的字元範圍要比使用它們所表示的那個字元範圍快很多。
	這些項不能用於 [] 方括號內。因此 "[\d\l]" 不能用來匹配一個數字或一個小
	寫字母。請換用 "\(\d\|\l\)"。

|/\s| 包括一個這類範圍的完整的列表。

==============================================================================
*27.7*	字元類

一個特定的字元範圍匹配一組固定的字元。一個字元類與字元範圍相似，不過有個本質的
區別: 一個字元類代表的那組字元可以重新定義而無須改動查詢模式。
   例如，查詢這個模式: >

	/\f\+

其中 "\f" 項表示檔名字元。因而這個命令匹配一個由可用作檔名的字元字元組成的
序列。
   哪些字元可以用來組成檔名取決於你所使用的系統。在微軟視窗上，反斜槓可以，
而在 Unix 上卻不行。檔名字元由 'isfname' 選項來規定。在 Unix 上，該選項的默
認值為: >

	:set isfname
	isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=

在其它系統上，其預設值各不相同。因此你可以用 "\f" 組成一個查詢模式，以匹配一個
檔名。該查詢模式將自動調整以適應你所使用的系統。

	備註:
	實際上，Unix 允許在檔名裡使用幾乎所有的字元，包括空格字元。把這些字
	符包括在 'isfname' 裡，在理論上是沒錯的。但那樣就無法在文字中發現一個
	檔名在哪兒結束。因此選項 'isfname' 的預設值是個折衷方案。

字元類有如下這些:

	項	匹配				選項 ~
	\i	識別符號字元			'isident'
	\I	類似於 \i，但不包括數字字元
	\k	關鍵詞字元			'iskeyword'
	\K	類似於 \k，但不包括數字字元
	\p	可顯示字元			'isprint'
	\P	類似於 \p，但不包括數字字元
	\f	檔名字元			'isfname'
	\F	類似於 \f，但不包括數字字元

==============================================================================
*27.8*	匹配換行符

Vim 能找尋含有換行符的模式。你需要指定換行符在哪兒出現，因為迄今為止所有我們
曾經提到過的項，都不匹配換行符。
   用 "\n" 項可以在一個特定的位置查驗一個換行符: >

	/the\nword

這個命令將在一行以 "the" 結尾，而下一行以 "word" 開頭的地方找到匹配。如果還要
匹配 "the word"，那麼你需要匹配一個空格或一個換行符。這可以用 "\_s" 表示: >

	/the\_sword

若要允許任意數量的空格: >

	/the\_s\+word

這個命令也匹配 "the  " 在行尾，及 "   word" 在下一行行首的情形。

"\s" 匹配空格字元，"\_s" 匹配空格字元或一個換行符。同理，"\a" 匹配一個字母字
符，而 "\_a" 匹配一個字母字元或一個換行符。其它字元類和字元範圍都可以通過插入
一個 "_" 來更改其範圍。

很多別的項也可以在前面加 "\_" 以匹配一個換行符。例如: "\_." 匹配任意字元或一個
換行符。

	備註:
	"\_.*" 匹配任何字元，直至檔案結束。要小心，它會使查詢命令執行得非常緩
	慢。

另一個例子是 "\_[]"，一個包含了換行符的字元範圍: >

	/"\_[^"]*"

這個命令找尋位於一對雙引號之間，可能分隔成數行的文字。

==============================================================================
*27.9*	舉例

這兒有幾個查詢模式，你也許會覺得有用。本節向你演示如何綜合使用前面提及的那些
用法。


尋 找 一 個 加 州 駕 駛 牌 照

有一個駕駛牌照號碼為 "1MGU103"。它有一個數字，三個大寫字母，然後三位數字。直接
把這個號碼放入查詢模式: >

	/\d\u\u\u\d\d\d

另一種方法是用一個計數器來指定其中有三個數字和三個字母: >

	/\d\u\{3}\d\{3}

換用 [] 字元範圍方法: >

	/[0-9][A-Z]\{3}[0-9]\{3}

這些方法之中你應該使用哪一種？挑那種你記得住的。你記得住的簡單方法要比你記不住
的華麗方法快得多。如果你能把它們都記住，那麼避免使用最後那種，因為它要打的字
多，而且執行起來慢。


尋 找 一 個 標 識 符

在 C 程式裡 (以及其它很多計算機程式) 一個識別符號以字母開頭，其餘部分由字母和數
字組成。下劃線字元也可以。這樣一個識別符號可以用下面的命令找到: >

	/\<\h\w*\>

"\<" 和 "\>" 用來尋找那些完整的詞。"\h" 表示 "[A-Za-z_]"，而 "\w" 則表示
"[0-9A-Za-z_]"。

	備註:
	"\<" 和 "\>" 取決於 'iskeyword' 選項。如果這個選項包括 "-" 的話，那麼
	 "ident-" 就不匹配了。在這種情況下，請用: >

		/\w\@<!\h\w*\w\@!
<
	這個命令查驗是否 "\w" 不匹配識別符號之前或之後的字元。
	參見 |/\@<!| 和 |/\@!|。

==============================================================================

下一章: |usr_28.txt|  摺疊

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
