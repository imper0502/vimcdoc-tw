*ft_ada.txt*	For Vim version 8.0.  最近更新: 2017年7月


		    ADA 文 件 類 型 參 考 手 冊~
				譯者: Willis
				http://vimcdoc.sf.net

ADA								      *ada.vim*

1.  語法高亮				    |ft-ada-syntax|
2.  檔案型別外掛    			    |ft-ada-plugin|
3.  全能補全				    |ft-ada-omni|
    3.1 使用 "gnat xref" 的全能補全		|gnat-xref|
    3.2 使用 "ctags" 的全能補全			|ada-ctags|
4.  編譯器支援	    			    |ada-compiler|
    4.1 GNAT					|compiler-gnat|
    4.2 Dec Ada					|compiler-decada|
5.  參考				    |ada-reference|
    5.1 選項					|ft-ada-options|
    5.2 命令					|ft-ada-commands|
    5.3 變數	    				|ft-ada-variables|
    5.4 常數	    				|ft-ada-constants|
    5.5 函式	    				|ft-ada-functions|
6.  附加外掛	    			    |ada-extra-plugins|

==============================================================================
1. 語法高亮 ~
							       *ft-ada-syntax*

本模式為 2005 年版的 Ada ("Ada 2005") 設計，它支援面向物件程式設計，受保護的型別，
等等。它也能處理為原始 Ada 語言的程式碼 ("Ada83"、"Ada87"、"Ada95")，不過程式碼裡
如果使用 Ada 2005 才有的關鍵字的話，顏色顯示會不正確 (不過這樣的程式碼本來也應該
修正)。更多關於 Ada 的資訊，見 http://www.adapower.com。

Ada 模式正確地處理一些情況。

例如，它知道 "-5" 裡的 "-" 是數字的一部分，但 "A-5" 裡的該字元則是操作符。通
常，引用別的編譯單元 (unit) 的 "with" 或 "use" 語句使用 C 裡面的 "#include" 相
同的色彩。如果你為 "Conditional" 或 "Repeat" 組指定了不同的色彩，那麼 "end if"
和 "end loop" 會根據它們所在的組被分別標色。

你可以用 vim 的 "highlight" 命令來給出不同的顏色 (例如，要改變迴圈的顯示方式，
輸入命令 ":hi Repeat"，後面跟色彩的規格說明；在普通終端上，色彩規格
ctermfg=White 通常就有不錯的顯示效果)。

本 Ada 模式可以設定若干選項。完整的列表可以參見 |ft-ada-options|。

給選項賦值就可以開啟。例如，要開啟一個選項:
 >
    > let g:ada_standard_types = 1
>
可用 ":unlet" 關閉。例如:
>
    > unlet g:ada_standard_types

使用 ":" 並在命令列輸入這些命令就可以在載入 Ada 檔案時臨時設定選項。要永久設
置，把 "let" 命令加到你的 "~/.vimrc" 檔案裡，無需冒號。

即使在慢速 (90Mhz) PC 上，該模式也很快。但如果你還是覺得速度無法忍受，可以開啟
|g:ada_withuse_ordinary|。

置位 |g:ada_folding| 時，加入語法摺疊的指令 (|fold-syntax|)。

==============================================================================
2. 檔案型別外掛 ~
					       *ft-ada-indent* *ft-ada-plugin*

Ada 外掛提供以下支援:

 - 自動縮排	    	(|indent.txt|)
 - 插入補全	    	(|i_CTRL-N|)
 - 使用者定義補全	    	(|i_CTRL-X_CTRL-U|)
 - 標籤搜尋		(|tagsrch.txt|)
 - Quick Fix		(|quickfix.txt|)
 - 退格處理	  	(|'backspace'|)
 - 註釋處理	    	(|'comments'|、|'commentstring'|)

當且僅當開啟 Ada 檔案時，本外掛才啟用 Ada 模式的功能，並把 Ada 相關的條目加到
主選單和彈出選單中。

==============================================================================
3. 全能補全 ~
								 *ft-ada-omni*

Ada 全能補全 (|i_CTRL-X_CTRL-O|) 使用 "gnat xref -v" 或 "exuberant Ctags
(http://ctags.sourceforge.net) 建立的標籤資料庫。補全函式會自動地識別建立標籤
檔案使用的工具。

------------------------------------------------------------------------------
3.1 使用 "gnat xref" 的全能補全 ~
								   *gnat-xref*

GNAT XREF 使用編譯器的內部資訊 (ali-檔案) 來產生標籤檔案。它的優點是 100% 正
確，也能進行深層的巢狀分析。不過程式碼必須能通過編譯，生成器相當慢，而且產生的標
籤檔案只為每個條目包含了 Ctags 提供的基本資訊 - 不足以應付一些高階的 Vim 程式碼
瀏覽器外掛的需要。

備註: "gnat xref -v" 非常難用，因為它幾乎沒有任何診斷輸出 - 如果沒有輸出，通常
       是因為輸入的引數有問題。這裡是一些重要的提示:

1)  你需要先編譯程式碼，並使用 "-aO" 選項指向你的 .ali 檔案。
2)  "gnat xref -v ../Include/adacl.ads" 不行 - 應該用 "gnat xref -v
    -aI../Include adacl.ads" 代替。
3)  "gnat xref -v -aI../Include *.ad?" 不行 - 用 "cd ../Include" 然後 "gnat
    xref -v *.ad?"
4)  專案管理支援徹底不能用 - 試都不用試 "gnat xref -Padacl.gpr"。
5)  使用排過序的標籤檔案時 Vim 速度更快 - 用 "sort --unique --ignore-case
    --output=tags tags"。
6)  記住在第一行插入 "!_TAG_FILE_SORTED 2 %sort ui" 來標記該檔案為已排序。

------------------------------------------------------------------------------
3.2 使用 "ctags" 的全能補全 ~
								   *ada-ctags*

Exuberant Ctags 使用自己的多語言程式碼分析器。分析速度快，產生很多附加的資訊
(因此得名 "Exuberant (豐富的) Ctags")，並且能處理尚不能編譯的檔案。

有大量其它的 Vim 工具使用 exuberant Ctags。

You 需要安裝帶有 Ada 支援補丁的 Exuberant Ctags 版本。GNU Ada 專案提供這樣的版
本 (http://gnuada.sourceforge.net)。

Exuberant Ctags 的 Ada 分析器還很新 - 不要過多期望完整的支援。

==============================================================================
4. 編譯器支援 ~
								*ada-compiler*

Ada 模式支援多個 Ada 編譯器，並會自動在開啟 Ada 原始碼時載入
|g:ada_default_compiler| 設定的編譯器。提供的編譯器外掛分為兩部分: 實際的編譯
器外掛和支援函式及變數的集合。這樣方便了為你的開發環境專門定製的編譯器外掛的開
發。

------------------------------------------------------------------------------
4.1 GNAT ~
							       *compiler-gnat*

GNAT 是僅有的 free ((免費的) 啤酒和 (自由的) 言論) Ada 編譯器。它有若干在許可
證條款上有出入的不同版本。

按 <F7> 時，GNAT 編譯器外掛執行編譯並立即顯示結果。你可以設定專案檔案如下:
 >
 > call g:gnat.Set_Project_File ('my_project.gpr')

設定專案的同時，也建立 Vim 會話 (|views-sessions|)，這樣 - 就像 GPS 那樣 - 為
所有專案分別記住已開啟的檔案、視窗位置、等等。

								*gnat_members*
GNAT 對 象 ~

							       *g:gnat.Make()*
g:gnat.Make()
		呼叫 |g:gnat.Make_Command| 並在 |quickfix| 窗口裡顯示結果。

							     *g:gnat.Pretty()*
g:gnat.Pretty()
		呼叫 |g:gnat.Pretty_Program|

							       *g:gnat.Find()*
g:gnat.Find()
		呼叫 |g:gnat.Find_Program|

							       *g:gnat.Tags()*
g:gnat.Tags()
		呼叫 |g:gnat.Tags_Command|

						   *g:gnat.Set_Project_File()*
g:gnat.Set_Project_File([{file}])
		設定 gnat 專案檔案並載入相應的會話。已經開啟的專案會被關閉，其
		會話也被寫回。如果呼叫時沒有提供檔名，開啟檔案選擇對話方塊來選
		擇專案檔案。如果呼叫時提供空字串，關閉專案和相關的會話。

							 *g:gnat.Project_File*
g:gnat.Project_File	字串
		當前專案檔案。

							 *g:gnat.Make_Command*
g:gnat.Make_Command	字串
		用於 |g:gnat.Make()| 的外部命令 (|'makeprg'|)。

						       *g:gnat.Pretty_Program*
g:gnat.Pretty_Program	字串
		用於 |g:gnat.Pretty()| 的外部命令

							 *g:gnat.Find_Program*
g:gnat.Find_Program	字串
		用於 |g:gnat.Find()| 的外部命令

							 *g:gnat.Tags_Command*
g:gnat.Tags_Command	字串
		用於 |g:gnat.Tags()| 的外部命令

							 *g:gnat.Error_Format*
g:gnat.Error_Format	字串
		錯誤格式 (|'errorformat'|)

------------------------------------------------------------------------------
4.2 Dec Ada ~
					    *compiler-hpada* *compiler-decada*
					*compiler-vaxada* *compiler-compaqada*

Dec Ada (也叫做 - 按照編年序 - VAX Ada、Dec Ada、Compaq Ada 和 HP Ada) 是一個
相當古老的 Ada 83 編譯器。提供的支援也很基本: <F7> 編譯當前單元。

Dec Ada 編譯器期待傳入的引數是包 (package) 名而不是檔名。本編譯器外掛支援一
般的檔名格式，並把檔案轉換為單元名。可以用 '-' 和 '__' 進行分隔。

							      *decada_members*
DEC ADA 對 象 ~

							     *g:decada.Make()*
g:decada.Make()		函式
		呼叫 |g:decada.Make_Command| 並在 |quickfix| 窗口裡顯示結果。

							*g:decada.Unit_Name()*
g:decada.Unit_Name()	函式
		得到當前檔案的單元名。

						       *g:decada.Make_Command*
g:decada.Make_Command	字串
		用於 |g:decada.Make()| 的外部命令 (|'makeprg'|)。

						       *g:decada.Error_Format*
g:decada.Error_Format|	string
		錯誤格式 (|'errorformat'|)。

==============================================================================
5. 參考 ~
							       *ada-reference*

------------------------------------------------------------------------------
5.1 選項 ~
							      *ft-ada-options*

							*g:ada_standard_types*
g:ada_standard_types	  布林型 (如果存在即為真)
		高亮 Standard 包裡的型別 (例如，"Float")。

							  *g:ada_space_errors*
						  *g:ada_no_trail_space_error*
						    *g:ada_no_tab_space_error*
							 *g:ada_all_tab_usage*
g:ada_space_errors	  布林型 (如果存在即為真)
		高亮多餘空格的錯誤...
		g:ada_no_trail_space_error
		    - 但忽略行尾的空格
		g:ada_no_tab_space_error
		    - 但忽略空格之後的製表
		g:ada_all_tab_usage
		    - 高亮所有制表的使用

							   *g:ada_line_errors*
g:ada_line_errors	  布林型 (如果存在即為真)
		高亮過長的行。注意: 本高亮選項相當佔用 CPU。

							 *g:ada_rainbow_color*
g:ada_rainbow_color	  布林型 (如果存在即為真)
		'(' 和 ')' 使用彩虹色。為此你需要 rainbox_parenthesis。

							       *g:ada_folding*
g:ada_folding		  集合型 ('sigpft')
		為 Ada 原始碼提供摺疊。
		    's':    載入時啟用語法摺疊
			'p':    摺疊包
			'f':    摺疊函式和過程
			't':    摺疊型別
			'c':    摺疊條件句
		    'g':    載入時啟用美化顯示摺疊
			'i':    單個 'is' 和上行一起摺疊
			'b':	單個 'begin' 和上行一起摺疊
			'p':	單個 'private' 和上行一起摺疊
			'x':	單個 'exception' 和上行一起摺疊
		    'i':    載入時啟用縮排摺疊

		備註: 語法摺疊尚處於早期 (不可用) 階段，建議使用縮排或 gnat 美
		      化摺疊。

		要使 gnat 美化摺疊可用，建議使用下列設定: -cl3 -M79 -c2 -c3
		-c4 -A1 -A2 -A3 -A4 -A5

		要使縮排摺疊可用，建議使用下列設定: shiftwidth=3 softtabstop=3

								*g:ada_abbrev*
g:ada_abbrev		  布林型 (如果存在即為真)
		增加若干縮寫。此特性或多或少為各種補全的方法取代。

						      *g:ada_withuse_ordinary*
g:ada_withuse_ordinary	  布林型 (如果存在即為真)
		把 "with" 和 "use" 顯示為普通的關鍵字 (用於引用其它編譯單元
		時，它們通常被特殊高亮)。

							 *g:ada_begin_preproc*
g:ada_begin_preproc	  布林型 (如果存在即為真)
		使用 C 預處理命令的色彩來顯示所有 begin 風格的關鍵字。

						    *g:ada_omni_with_keywords*
g:ada_omni_with_keywords
		給全能補全加入 Keywords、Pragmas、Attributes (|compl-omni|)。
		備註: 你總可以用使用者定義補全方式對它們進行補全
		(|i_CTRL-X_CTRL-U|)。

						      *g:ada_extended_tagging*
g:ada_extended_tagging	  列舉型 ('jump'、'list')
		使用擴充套件標籤，可用如下兩個選項
		    'jump': 使用 tjump 進行跳轉
		    'list': 把標籤加到 quick fix 列表。
		普通的標籤不支援函式或操作符過載，因為 C 語言沒有這些特性，而
		標籤原本是為 C 開發的。

						   *g:ada_extended_completion*
g:ada_extended_completion
		為 <C-N> 和 <C-R> 補全 (|i_CTRL-N|) 提供擴充套件的補全。在這個模式
		中，'.' 用作識別符號的一部分，這樣 'Object.Method' 或
		'Package.Procedure' 等就能作為一個整體進行補全。

						       *g:ada_gnat_extensions*
g:ada_gnat_extensions	  布林型 (如果存在即為真)
		 支援 GNAT 擴充。

					       *g:ada_with_gnat_project_files*
g:ada_with_gnat_project_files	 布林型 (如果存在即為真)
		 加入 gnat 專案檔案關鍵字和屬性。

						      *g:ada_default_compiler*
g:ada_default_compiler	  字串
		設定預設編譯器。目前支援 'gnat' 和 'decada'。

"存在" 型別視作布林型，變數定義時取值為真，變數未定義時為假。設定的變數值本身
無關緊要。

------------------------------------------------------------------------------
5.2 命令 ~
							     *ft-ada-commands*

:AdaRainbow							 *:AdaRainbow*
		切換用於 '(' 和 ')' 的彩虹顏色 (|g:ada_rainbow_color|) 模式。


:AdaLines							   *:AdaLines*
		切換行錯誤 (|g:ada_line_errors|) 顯示。

:AdaSpaces							  *:AdaSpaces*
		切換空格錯誤 (|g:ada_space_errors|) 顯示。

:AdaTagDir							  *:AdaTagDir*
		為當前檔案所在目錄建立標籤檔案。

:AdaTagFile							 *:AdaTagFile*
		為當前檔案建立標籤檔案。

:AdaTypes							   *:AdaTypes*
		切換標準型別 (|g:ada_standard_types|) 顏色。

:GnatFind							   *:GnatFind*
		呼叫 |g:gnat.Find()|

:GnatPretty							 *:GnatPretty*
		呼叫 |g:gnat.Pretty()|

:GnatTags							   *:GnatTags*
		呼叫 |g:gnat.Tags()|

------------------------------------------------------------------------------
5.3 變數 ~
							    *ft-ada-variables*

								      *g:gnat*
g:gnat			  物件
		管理 GNAT 編譯的控制物件。只要 |g:ada_default_compiler| 設為
		'gnat'，該物件會在載入首個 Ada 原始碼時建立。詳見
		|gnat_members|。

								    *g:decada*
g:decada		  物件
		管理 Dec Ada 編譯的控制物件。只要 |g:ada_default_compiler| 設
		為 'decada'，該物件會在載入首個 Ada 原始碼時建立。詳見
		|decada_members|。

------------------------------------------------------------------------------
5.4 常數 ~
							    *ft-ada-constants*

所有常數都是加鎖的。詳見 |:lockvar|。

							     *g:ada#WordRegex*
g:ada#WordRegex		  字串
		搜尋 Ada 單詞的正規表示式。

							  *g:ada#DotWordRegex*
g:ada#DotWordRegex	  字串
		搜尋句號分隔的 Ada 單詞的正規表示式。

							       *g:ada#Comment*
g:ada#Comment		  字串
		搜尋 Ada 註釋的正規表示式。

							      *g:ada#Keywords*
g:ada#Keywords		  字典的列表
		關鍵字、屬性等的列表，使用全能補全需要的格式。詳見
		|complete-items|。

							   *g:ada#Ctags_Kinds*
g:ada#Ctags_Kinds	  列表的字典
		由 Ctags 省城的 Ada 支援的各種專案的型別 (kind) 的字典。

------------------------------------------------------------------------------
5.5 函式 ~
							    *ft-ada-functions*

ada#Word([{line}, {col}])					  *ada#Word()*
		返回游標所在 (或在任何給定的行/列上) 的 Ada 實體的全名，必要時
		刪除空白/換行符。

ada#List_Tag([{line}, {col}])				      *ada#Listtags()*
		在 quick-fix 視窗列出游標所在 (或在任何給定的行/列上) 的 Ada
		實體的所有出現。

ada#Jump_Tag ({ident}, {mode})				      *ada#Jump_Tag()*
		在標籤跳轉列表中列出游標所在 (或在任何給定的行/列上) 的 Ada 實
		體的所有出現。模式 (mode) 可以是 'tjump' 或 'stjump'。

ada#Create_Tags ({option})				   *ada#Create_Tags()*
		用 Ctags 建立標籤檔案。選項 (option) 可以設為 'file' 指定當前
		檔案，或 'dir' 指定當前檔案所在的目錄，或檔名。

gnat#Insert_Tags_Header()			   *gnat#Insert_Tags_Header()*
		把標籤檔案頭部 (!_TAG_) 資訊加入當前檔案，GNAT XREF 的輸出沒有
		該項資訊。

ada#Switch_Syntax_Option ({option})		  *ada#Switch_Syntax_Option()*
		切換高亮選項的開關。用於 Ada 選單。

								  *gnat#New()*
gnat#New ()
		建立一個新 gnat 物件。詳見 |g:gnat|。


==============================================================================
6. 附加外掛 ~
							   *ada-extra-plugins*

可選地，你可以安裝以下附加的外掛。它們能和 Ada 模式一起有效工作，以增強 Ada 模
式的能力。:

backup.vim
	http://www.vim.org/scripts/script.php?script_id=1537
	保留任意多個備份，以備不時之需。

rainbow_parenthsis.vim
	http://www.vim.org/scripts/script.php?script_id=1561
	非常有用，因為 Ada 只使用 '(' 和 ')'。

nerd_comments.vim
	http://www.vim.org/scripts/script.php?script_id=1218
	出色的註釋和撤銷註釋支援，支援幾乎所有程式語言。

matchit.vim
	http://www.vim.org/scripts/script.php?script_id=39
	支援任何語言的 '%' 跳轉。正常的 '%' 跳轉只支援 '{}' 風格的語言。Ada 模
	式會設定需要的搜尋模式。

taglist.vim
	http://www.vim.org/scripts/script.php?script_id=273
	原始碼瀏覽器側欄。有 Ada 補丁。

Vim 的 GNU Ada 專案釋出 (http://gnuada.sourceforge.net) 包含以上所有的外掛。

==============================================================================
vim: textwidth=78 nowrap tabstop=8 shiftwidth=4 softtabstop=4 noexpandtab
vim: filetype=help
