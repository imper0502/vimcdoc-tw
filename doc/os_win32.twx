*os_win32.txt*  For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by George Reilly
		                     譯者: Dasn, tocer
		                     http://vimcdoc.sf.net

						*win32* *Win32* *MS-Windows*
本文描述 Vim Win32 版本的一些特性。

Vim 的 Win32 版本可以在 Windows XP、Vista、7、8 和 10 版本 上執行，並且有
console (控制 臺，就是命令提示符視窗 譯者) 和 GUI (圖形介面) 兩個版本。

32 位版本也可執行在 64 位 MS-Windows 系統上。

1. 一些已知的問題		|win32-problems|
2. 啟動				|win32-startup|
3. 恢復螢幕內容			|win32-restore|
4. 使用滑鼠			|win32-mouse|
5. 在 Windows 95 下執行		|win32-win95|
6. 在 Windows 3.1 下執行	|win32-win3.1|
7. Win32 常見問題解答 (迷你版)	|win32-faq|

此外，還有一些 Win32 和 DOS 版本通用的條目:
檔案位置			|dos-locations|
使用反斜槓			|dos-backslash|
標準對映			|dos-standard-mappings|
螢幕的輸出與顏色		|dos-colors|
檔案格式			|dos-file-formats|
:cd 命令			|dos-:cd|
中止鍵				|dos-CTRL-Break|
臨時檔案			|dos-temp-files|
預設的 Shell 選項		|dos-shell|

Win32 使用者圖形介面		|gui-w32|

作者:
Win32 版本的作者是 George V. Reilly <george@reilly.org>。
最初 Windows NT 版本的移植工作是由 Roger Knobbe <RogerK@wonderware.com> 完成
的。
GUI 版本的作者是 George V. Reilly 和 Robert Webb。

有關編譯的討論請參考 "src/INSTALLpc.txt"。		*win32-compiling*

==============================================================================
1. 一些已知的問題					*win32-problems*

自動補全檔名的時候，雖然 Vim 會匹配短的檔名，但是卻會尋找並使用對應的相應
的長檔名。例如，如果有一個長檔名 "this_is_a_test"，其短檔名是
"this_i~1"，命令 ":e *1" 編輯檔案 "this_is_a_test"。

==============================================================================
2. 啟動							*win32-startup*

當前目錄						*win32-curdir*

如果啟動 Vim 時後面帶一個檔名作為引數，並且指定了該檔案的完整路徑 (例如: 以
"x:\" 開頭的路徑)，Vim 會認為該檔案是從檔案管理器啟動，並把當前目錄 (:cd 命令
檢視 譯者) 切換到檔案所在目錄。如果不想這樣，只要把路徑裡的反斜槓 ("\") 換成斜
槓 ("/") 即可。例如: >

	vim c:\text\files\foo.txt

當前目錄切換到 "C:\text\files"。 >

	vim c:/text\files\foo.txt

不改變當前目錄。


term 選項						*win32-term*

Vim 的 Win32 版本僅有的終端型別是 "win32"，它是內建的。如果你把 'term' 設定成
其它的值，Vim 的行為就可能變的很奇怪。所以 Vim 不會從環境變數 "TERM" 裡獲取
'term' 的值。

$PATH 環境變數						*win32-PATH*

Vim 可執行程式的路徑被加入到變數 $PATH 中。這主要使 "!xxd" 能夠執行，因為它在
工具選單中。這也意味著當 executable() 返回 1 時，該可執行程式確實能夠執行。

檔名內的引號						*win32-quotes*

檔名 (或任何其它命令列引數) 內的引號可以用反斜槓轉義。例如 >
	vim -c "echo 'foo\"bar'"

也可要用三個引號來表示一個實際一個引號: >
	vim -c "echo 'foo"""bar'"

引號規則是:

1. `"` 開始引用。
2. 另一個 `"` 或 `""` 結束引用。如果引用以 `""` 結束，在引用的字串之後生成
   `"`。

示例，[] 圍繞引數:
        "foo"           -> [foo]
        "foo""          -> [foo"]
        "foo"bar        -> [foobar]
        "foo" bar       -> [foo], [bar]
        "foo""bar       -> [foo"bar]
        "foo"" bar      -> [foo"], [bar]
        "foo"""bar"     -> [foo"bar]


==============================================================================
3. 恢復螢幕內容						*win32-restore*

如果你設定了 'restorescreen' 選項 (預設設定)，當你退出 Vim 或者執行外部命令
時，Vim 能恢復控制檯原來的內容。可以用 ":ser nors" 命令關掉這個選項。
							|'restorescreen'|

==============================================================================
4. 使用滑鼠						*win32-mouse*

Vim 的 Win32 版本支援滑鼠。如果你使用兩鍵滑鼠，可以用同時按下左右兩鍵的辦法來
模擬第三鍵 (中鍵) － 但是，請注意: 在 Win32 GUI 上，如果你的右鍵用來呼叫彈出菜
單 (參見 'mouse')，那麼你最好先按下滑鼠左鍵 (左右兩鍵同時按的時候，左鍵略快於
右鍵 譯者)。						|mouse-using|

如果滑鼠不好用，你可以試著禁用控制檯的 "快速編輯模式"。

==============================================================================
5. 在 Windows 95 下執行					*win32-win95*
					*windows95* *windows98* *windowsme*
8.0.0029 補丁刪除了 Windows 95/98/ME 的支援。如果你還想用，請用之前的版本。

==============================================================================
6. 在 Windows 3.1 下執行				*win32-win3.1*

					*win32s* *windows-3.1* *gui-w32s*
有一個特殊的 Win32 版本的 Gvim 可以在 Windows 3.1 和 3.11 執行。
7.4.1363 補丁刪除了此支援。

==============================================================================
7. Win32 常見問題解答 (迷你版)				*win32-faq*

問: 怎樣改變字型？
答: 在 GUI 版本里，可以用 'guifont' 選項。例如: >
	:set guifont=Lucida_Console:h15:cDEFAULT
<   在控制檯版本里，你需要修改控制檯視窗的字型，不能在 Vim 裡修改字型。

問: 在 Windows NT 上怎樣輸入死鍵？
答: NT 3.51 上可以正常輸入死鍵，和在別的程式裡的輸入方法一樣。
    NT 4.0 上，你必須保證你的區域設定 (控制面板鍵盤) 和你當前使用的區域設定相
    同。否則 NT 會崩潰。這是 NT 的問題，不是 Vim 的問題。

問: 我用 Vim 編輯一個符號連結，這個連結指向 UNIX NFS 檔案伺服器上的一個檔案。
    當我儲存這個檔案時，Vim 不能通過連結儲存到伺服器上，而是刪除了這個連結，
    建立了一個新的檔案。為什麼？
答: 在 UNIX 系統上，Vim 可以處理連結 (符號連結或硬連結)。Vim 先把檔案寫入一個
    備份檔案中，然後用備份檔案覆蓋原檔案。這樣做是為了保證所有屬性都和原檔案相
    同。在非 UNIX 系統上，首先原檔案被改名，然後寫入新檔案。只有保護位和原檔案
    相同。但是，這個方法不能處理 NFS 檔案系統，那裡除了連結還有一些其它問題。
    唯一的解決辦法是禁用備份檔案，可以通過命令 ":set nobackup nowritebackup"
    實現 						|'writebackup'|

問: 我正通過 Samba 使用 Vim 編輯 Unix 系統上的一個檔案。當我儲存檔案時，檔案所
    有者被改變了。為什麼？
答: 當儲存檔案時，Vim 會給原來檔案換名，使之成為一個備份 (以防寫入檔案過程中失
    敗)。然後該檔案作為一個新檔案被儲存。Samba 這時把它賦予檔案系統上預設的所
    有者，可能會和原所有者不一樣。
    為避免此問題，可以設定 'backupcopy' 選項為 "yes"。Vim 會用複製的方式建立備
    份，然後再覆蓋原檔案。這樣檔案所有者就不會改變了。

問: 執行 ":make" 的時候怎樣看到輸出？
答: 通常，你需要一個 tee 程式，它可以把輸入 (make 的輸出) 複製到標準輸出和錯誤
    資訊檔案裡。你可以在以下地址找到 tee (還有其它 GNU 工具)。
    http://gnuwin32.sourceforge.net 或 http://unxutils.sourceforge.net
    或者你也可以在 http://www.cygwin.com/ 下載 Cygnus 版本的 GNU 工具。
    其它 Win32 上執行的 Unix 風格的工具可以在以下地址找到。
    http://directory.google.com/Top/Computers/Software/Operating_Systems/Unix/Win32/
    得到了 tee 程式之後，你需要把下面的命令新增到你的 _vimrc 檔案中: >
	:set shellpipe=\|\ tee

問: 我把檔案儲存到一臺執行 VisionFS 的遠端計算機上，但是檔案找不到了！
答: VisionFS 不能處理特定的句號 (.) 加三個字母的副檔名，SCO 聲稱這是為了相容
    16 位的 DOS/Windows 環境。下面的兩個命令可以說明問題:
>
	echo Hello > file.bat~
	dir > file.bat
<
    "dir" 命令的輸出被定向到 "file.bat~" 檔案，而並沒有新建一個 "file.bat" 文
    件。這種行為在 Vim 裡的體現就是，當你編輯一個名為 "foo.bat" 的檔案時，Vim
    會自動建立名為檔名加上 '~' 字元的臨時檔案，也就是 "foo.bat~"。寫入
    "foo.bat" 檔案時，最後它倒被刪除了 (譯者注: Vim 想刪除的本來是臨時檔案)。

    解決辦法: 在你的 _vimrc 檔案里加入: >
	:set backupext=.temporary

問: 怎樣改變游標閃爍的頻率？
答: 不能改。這是 NT 控制檯的一個限制，據報告，NT 5.0 可以一次改變所有控制檯的
    閃爍頻率。

							*:!start*
問: 如何非同步地執行一個外部命令或程式，或用預設程式開啟文件或 URL？
答: 執行外部命令的時候，你可以用 ":!start" 代替 ":!"。例如，要執行 notepad: >
	:!start notepad
<   要用預設影象檢視器開啟 "image.jpg": >
        :!start image.jpg
<   要用 Windows Explorer 開啟當前檔案所在的目錄: >
        :!start %:h
<   要用預設的瀏覽器開啟 Vim 主頁: >
        :!start http://www.vim.org/
<
    用 "start" 命令不像 ":!" 那樣 (切換到另一個螢幕、呼叫一個新的控制檯，然後
    等待程式執行結束)；該命令的使用，意味著你所執行的程式不會影響到當前編輯的
    檔案。用 ":!start" 命令執行程式不會得到 Vim 的開啟檔案控制代碼，這意味著他們不
    需要在 Vim 之前退出。
    要避免這種特殊照顧，可以用 ":! start"。
    有兩個可選的引數 (見下個問答):
       /min  最小化方式開啟視窗
       /b    不開啟控制檯視窗
    一次只能使用一個引數。第二個引數會被當作命令的一部分。

問: 如何避免非同步遠行的程式開啟視窗？
答: 取決於你實際需要，有兩個方案:
    1) 用 /min 標誌位，以最小化方式執行，其他不作改變。對控制檯和 GUI
       應用一樣有效。
    2) 用 /b 標誌位以執行控制檯程式，而不建立控制檯視窗 (GUI 應用不受影響)。
       只能用於不需要輸入的應用。否則會得到 EOF 錯誤，因為輸入流 (stdin)
       會重定向到 \\.\NUL (stdout 和 stderr 也是如此)。

   執行 Exuberant ctags 的控制檯示例: >
        :!start /min ctags -R .
<  程式結束時你會看到名為 "tags" 檔案在當前目錄出現。你會注意到底下工作列上
   視窗標題在閃爍。尤其對需時較長的命令更容易看到。
   現在刪除 "tags" 檔案，然後執行: >
        :!start /b ctags -R .
<  還是會產生 "tags" 檔案，但這次工作列不會閃爍了。
   GUI 應用的示例: >
        :!start /min notepad
        :!start /b notepad
<  前一個命令以最小化方式執行 notepad，後一個命令以正常方式執行。

						*windows-icon*
問: 我不喜歡 Vim 圖示，如何改變？
答: 是的，把你喜歡的圖示放在 'runtimepath' 某個目錄下的 bitmaps/vim.ico。例如
    ~/vimfiles/bitmaps/vim.ico。


 vim:tw=78:fo=tcq2:ts=8:ft=help:norl:
