*recover.txt*   For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by Bram Moolenaar
		  VIM REFERENCE MANUAL    by Bram Moolenaar
	    譯者: iCrazy<icrazy@ustc.edu>  http://vimcdoc.sf.net
	    更新: tocer


從崩潰中恢復						*crash-recovery*

您經歷過這樣的事情麼？您錄入一個文件，錄入了很長時間，眼看就要完成的時候，災難
來了: 您的電腦崩潰了！

			別 擔 心 ！

您可以從 Vim 提供的檔案裡恢復大部分的改動，Vim 用這些檔案儲存檔案的內容。一般
情況下，用單個命令就可以恢復您的文件:
	vim -r filename

1. 交換檔案		|swap-file|
2. 恢復			|recovery|

==============================================================================
1. 交換檔案						*swap-file*

Vim 把您對檔案的改動儲存在一個交換檔案中。多數情況下，用修改前的原檔案加上 Vim
的交換檔案，您就可以恢復對文件所做的改動了。

您可以用以下的命令看到當前正在使用的交換檔案的檔名:

	:sw[apname]					*:sw* *:swapname*

正常情況下，交換檔案的檔名和您正在編輯的檔案相同，只是副檔名換成了 ".swp"。
- 在 Unix 系統上，交換檔名以 '.' 開始，這樣它們就不會在列目錄檔案時被顯示出
  來。
- 在 MS-DOS 系統上，如果 'shortname' 選項是開啟的，原檔名中的 '.' 會被 '_'
  替代。
- 如果同名交換檔案已經存在 (例如: 當您從一個崩潰中恢復時)，Vim 會顯示一個警告
  資訊，並且會使用另外一個諸如 ".swo"，".swn" ……這樣的副檔名。
- 現存的檔案永遠不會因此被 Vim 所覆蓋。
- 當 Vim 停止編輯檔案的時候，交換檔案會被立即刪除。

技術上: 用 '_' 替代 '.' 是為了避免在與 MS-DOS 相容的檔案系統中 (crossdos、
	multidos 等) 出現問題。如果 Vim 檢測到您所編輯的檔案存放在一個與
	MS-DOS 相容的檔案系統上，Vim 會建立一個標誌位，實現和 'shortname' 選項
	相同的功能。當您開始編輯其他檔案時，這個標誌位會被重置。
							*E326*
	如果副檔名是 ".swp" 的檔案已經存在，逐次遞減最後的字母，直到找到沒有現
	存檔案的名字為止。如果過了 ".saa" 還找不到，不建立交換檔案。

通過設定 'directory' 這個選項，您可以把交換檔案放到其他目錄中去，而不是預設地
和您所編輯的檔案放在同一目錄中。
優點:
- 您不會因為 ".swp" 檔案的存在弄亂您的目錄。
- 當您把選項 'directory' 的值設定到另一個分割槽的時候，可以減少 (在一次系統崩潰
  中) 檔案所在分割槽檔案系統毀壞的危險。
缺點:
- 如果您在不同目錄下面編輯同名檔案，您會碰到檔案重名問題 (儘管 Vim 會比較檔案
  路徑而盡力避免此問題的發生)。這會導致 Vim 給出虛假的 ATTENTION 警告資訊。
- 如果您使用您的宿主 (home) 目錄，而別人試圖編輯同一個檔案的時候，他不能訪問您
  的交換檔案，也就不會出現 ATTENTION 警告資訊。
在 Amiga 系統上，您還可以使用一種可以恢復資料的 ram disk，但是不能保證它可以
100% 工作正常。把交換檔案放在普通的 ram disk (就像 Amiga 系統中的記憶體那樣) 或
者放在重啟後所有內容都會被清除的地方 (就像 Unix 上的 /tmp 目錄) 是沒有意義的，
在一次計算機崩潰中您會丟失所有的交換檔案。

如果您希望把交換檔案放在一個固定的地方，把類似於下面這些的命令寫到您的 .vimrc
檔案中去:
	:set dir=dh2:tmp	(針對 Amiga)
	:set dir=~/tmp		(針對 Unix)
	:set dir=c:\\tmp	(針對 MS-DOS 和 Win32)
這對於編輯軟盤上的檔案是十分便利的。當然您必須先自己建立這個 "tmp" 目錄。

對於那些只讀的檔案，Vim 不會產生交換檔案，除非檔案特別大，使得記憶體使用超出了
'maxmem' 或 'maxmemtot' 的設定值。當然，如果對只讀的檔案進行了修改，交換檔案文
件還是會被自動建立。

可以復位 'swapfile' 這個選項的值以避免產生交換檔案。:noswapfile 修飾符可用來
使新緩衝區不建立交換檔案。

:nos[wapfile]   {command}			*:nos* *:noswapfile*
		執行 {command}。如果包含載入新緩衝區的命令，緩衝區載入時不建立
		交換檔案，並復位 'swapfile' 選項。如果緩衝區已經有了交換檔案則
		不刪除之，也不復位 'swapfile'。


檢測已經存在的交換檔案 ~

您可以在使用者手冊中找到這些資訊，參閱章節 |11.3|。


更新交換檔案 ~

在您錄入 200 個字元後或者 4 秒內沒有錄入任何字元時，交換檔案會被更新。只有在緩
衝區被修改的情況下，才會有這樣的更新，僅僅移動游標是不會更新交換檔案的。為什麼
不進行實時的更新？原因在於這樣頻繁的更新會極大的拖慢其他正常工作的速度。您可以
在 'updatecount' 選項中修改 200 個字元的設定，還可以在 'updatetime' 選項中修改
4 秒的設定 (時間以毫秒為單位給出)。Vim 更新交換檔案後，會把檔案同步到磁碟上
去。這會消耗一定的時間，在忙碌的 Unix 系統上尤其如此。如果不希望這樣，您可以把
'swapsync' 選項置成空串。不過，這樣會使檔案丟失的機率增大。在一些非 Unix 系統
(MS-DOS、Amiga) 上，交換檔案根本不會被寫到磁碟上。

如果不希望把修改寫到交換檔案中，可以通過把 'updatecount' 選項設成 0 來避免這一
點，用 "-n" 選項啟動 Vim 時也可以達到相同的效果。而把 'updatecount' 選項設成非
0 值可以恢復對交換檔案的寫入。這種情況下，所有緩衝區的交換檔案都會被建立。但是
當把 'updatecount' 選項設成 0 時，已經存在的交換檔案不會被刪除，只有設定之後打
開的檔案才受到影響。

如果您想確定您對檔案所作的修改已經被寫到交換檔案中了，使用這個命令:

					*:pre* *:preserve* *E313* *E314*
:pre[serve]		把緩衝區中的所有文字寫入交換檔案中。這樣在檔案恢復時就
			不再需要原檔案了。
			本命令設定了當前緩衝區的一個標誌位。如果 'cpoptions'
			裡有 '&' 標誌位而且 Vim 退出時如果此緩衝區還處於載入狀
			態，不刪除此緩衝區的交換檔案 |cpo-&|。
			{Vi: 也可能退出}

Vim 會通過檔案開始的 6 個字元 "b0VIM " 來識別它的交換檔案。Vim 的版本號 (如:
3.0) 會緊跟在那些字元之後。


連結和符號連結 ~

Unix 上同一檔案可以有兩個名字。這可以通過硬連結和符號連結 (symlink) 完成。

對於硬連結，Vim 不知道檔案另外的名字。所以，交換檔名基於你用來編輯的檔名。
也不會檢查是否編輯了使用別的名字的相同檔案，因為 Vim 無法找到另外那個交換檔案
(除非在你整個硬碟上搜索，這太慢了)。

對於符號連結，Vim 解析連結以找到實際檔案的名字。交換檔名基於那個實際的名字。
所以不管你用哪個名字編輯，交換檔名通常總是相同的。但有若干例外:
- 如果實際檔案所在的目錄不可寫，交換檔案會放在別處。
- 如果符號連結因為某些原因形成了迴圈，你會得到 *E773* 錯誤訊息，而使用未經修改
  的檔名。你不能在以後正常地儲存檔案。

==============================================================================
2. 恢復						*recovery* *E308* *E311*

基本的檔案恢復已經在使用者手冊中解釋了: |usr_11.txt|。

另一種恢復方式是在啟動 Vim 後使用 ":recover" 命令。當您用 Vim 編輯一個檔案並且
得到一個 "注意: 已找到一個交換檔案 ..." 這樣的提示時，這樣比較方便。這種情況
下，一個簡單的 ":recover" 命令就可以完成所有的工作。您也可以在使用 ":recover"
命令時指定檔名或者交換檔名:
					*:rec* *:recover* *E305* *E306* *E307*
:rec[over] [file]	試圖從交換檔案中恢復 [file]。如果沒有指定 [file]，使用
			當前緩衝區的檔名。當前緩衝區中的內容會丟失。如果緩衝
			區已經被修改，此命令失效。

:rec[over]! [file]	類似於 ":recover"，但當前緩衝區中的任何改變都會丟失。

							*E312* *E309* *E310*
在交換檔案被損壞時，Vim 彷彿有些智慧，知道接下來該怎麼做。如果 Vim 對於找到的
檔案有所懷疑，它會給出一個出錯資訊，並且在文字中插入含有 "???" 的行。如果您在
恢復的時候看到了出錯資訊，請在檔案中查詢 "???" 並確定到底哪裡出了問題。或許您
仍然可以通過剪下和貼上來取回可用的資訊。

最常見的資訊是 "???LINES MISSING"。這表示 Vim 無法從原檔案中讀取文字。通常在系
統崩潰而導致部分原檔案無法及時寫入磁碟時會出現這樣的情況。

在覆蓋原檔案並刪除交換檔案之前，請務必確定您所作的恢復是成功的。先把恢復出來的
檔案存到別的地方，然後執行 'diff' 來確定是否已經所需要的改動，是個好習慣。也可
使用 |:DiffOrig|。

當您確定恢復成功後，請刪除交換檔案。否則，您會繼續得到 ".swp" 檔案已經存在的警
告資訊。

{Vi: 在有可以恢復的內容時，用另一種方式恢復並且傳送郵件}


加 密 和 交 換 文 件					*:recover-crypt*

如果文字檔案經過加密，交換檔案也同樣要加密。這使得恢復稍微複雜一些。從交換檔案
恢復而又用到加密時，你需要輸入一到兩次加密金鑰。

如果文字檔案不再存在，只需要輸入加密金鑰一次來解密交換檔案。

如果文字檔案存在，其加密方式可能與交換檔案不同。你需要輸入加密金鑰兩次:

	Need encryption key for "/tmp/tt" ~
	Enter encryption key: ****** ~
	"/tmp/tt" [crypted] 23200L, 522129C ~
	Using swap file "/tmp/.tt.swp" ~
	Original file "/tmp/tt" ~
	Swap file is encrypted: "/tmp/.tt.swp" ~
	If you entered a new crypt key but did not write the text file, ~
	enter the new crypt key. ~
	If you wrote the text file after changing the crypt key press enter ~
	to use the same key for text file and swap file ~
	Enter encryption key:  ~

有兩種可能的情況:

1. 加密金鑰沒有改變，或者在改變後才寫入文字檔案。你需要輸入加密金鑰兩次。第二
   次，按回車即可。這樣就會應用相同的金鑰來解密文字檔案和交換檔案。
2. 輸入了新加密金鑰，但之後沒有儲存文字檔案。Vim 會使用新金鑰來加密交換檔案，
   但文字檔案仍然會使用舊金鑰來加密。第二次提示時要輸入新金鑰。

注意 恢復後，交換檔案的金鑰會用於文字檔案。寫入文字檔案時，需要使用新金鑰。


 vim:tw=78:ts=8:ft=help:norl:
