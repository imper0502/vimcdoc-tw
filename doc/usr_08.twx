*usr_08.txt*	For Vim version 8.0.  最近更新: 2006年12月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: Nek_in http://vimcdoc.sf.net

			  分割視窗


顯示兩個不同的檔案；或者同時顯示一個檔案的兩個不同地方；又或者並排比較兩個文
件。這一切都可以通過分割視窗實現。

|08.1|	分割視窗
|08.2|	用另一個檔案分割視窗
|08.3|	視窗大小
|08.4|	垂直分割
|08.5|	移動視窗
|08.6|	對所有視窗執行命令
|08.7|	用 vimdiff 顯示檔案差異
|08.8|	雜項
|08.9|  標籤頁

     下一章: |usr_09.txt|  使用 GUI 版本
     前一章: |usr_07.txt|  編輯多個檔案
       目錄: |usr_toc.txt|

==============================================================================
*08.1*	分割視窗

開啟新視窗最簡單的命令如下:
>
	:split

這個命令把螢幕分解成兩個視窗並把游標置於上面的視窗中:

	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

你可以看到顯示同一個檔案的兩個視窗。帶 "====" 的行是狀態條，用來顯示它上面的窗
口的資訊。(在實際的螢幕上，狀態條用反色顯示)
    這兩個視窗允許你同時顯示一個檔案的兩個部分。例如，你可以讓上面的視窗顯示變
量定義而下面的視窗顯示使用這些變數的程式碼。

CTRL-W w 命令可以用於在視窗間跳轉。如果你在上面的視窗，它會跳轉到下面的視窗，
如果你在下面的視窗，它會跳轉到上面的視窗。(CTRL-W CTRL-W 可以完成相同的功能這
是為了避免你有時按第二次的時候從 CTRL 鍵上縮手晚了。)


關 閉 窗 口

以下命令用於關閉視窗:
>
	:close

實際上，任何退出編輯的命令都可以關閉視窗，象 ":quit" 和 "ZZ" 等。但 "close" 可
以避免你在剩下一個視窗的時候不小心退出 Vim 了。


關 閉 所 有 其 它 窗 口

如果你已經打開了一整套視窗，但現在只想編輯其中一個，如下命令可以完成這個功能:
>
	:only

這個命令關閉除當前視窗外的所有視窗。如果要關閉的視窗中有一個沒有存檔，Vim 會顯
示一個錯誤資訊，並且那個視窗不會被關閉。

==============================================================================
*08.2*	用另一個檔案分割視窗

下面命令開啟另一個視窗並用該視窗編輯另一個指定的檔案:
>
	:split two.c

如果你在編輯 one.c，則命令執行的結果是:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

要開啟視窗編輯一個新檔案，可以使用如下命令:
>
	:new

你可以重複使用 ":split" 和 ":new" 命令建立任意多的視窗。

==============================================================================
*08.3*	視窗大小

:split 命令可以接受計數字首。如果指定了這個字首，這個數將作為視窗的高度。例如
如下命令可以開啟一個三行的視窗並編輯檔案 alpha.c:
>
	:3split alpha.c

對於已經開啟的視窗，你可以用有幾種方法改變它的大小。如果你有滑鼠，很簡單: 把鼠
標指標移到分割兩個視窗的狀態列上，上下拖動即可。

要擴大視窗:
>
	CTRL-W +

要縮小視窗:
>
	CTRL-W -

這兩個命令接受計數字首用於指定擴大和縮小的行數。所以 "4 CTRL-W +" 會使視窗增高
4 行。

要把一個視窗設定為指定的高度，可以用這個命令:
>
	{height}CTRL-W _

就是先輸入一個數值，然後輸入 CTRL-W 和一個下劃線 (在美式英語鍵盤中就是 Shift
加上 "-")。
    要把一個視窗擴充套件到儘可能大，可以使用無計數字首的 CTRL-W _ 命令。


使 用 鼠 標

在 Vim 中，你可以用鍵盤很快完成很多工作。但很不幸，改變視窗大小要敲不少鍵。在
這種情況下，使用滑鼠會更快一些。把滑鼠指標移到狀態條上，按住左鍵並拖動。狀態條
會隨之移動，這會使一個視窗更大一個更小。


選 項

'winheight' 選項設定最小的期望視窗高度而 'winminheight' 選項設定最小的 "硬性"
高度。
    同樣，'winwidth' 設定最小期望寬度而 'winminwidth' 設定最小硬性寬度。
    'equalalways' 選項使所有的視窗在關閉或者開啟新視窗的時候總保持相同大小。

==============================================================================
*08.4*	垂直分割

":split" 命令在當前視窗的上面建立視窗。要在視窗左邊開啟新視窗，用這個命令:
>
	:vsplit

或者
>
	:vsplit two.c

這個命令的結果如下:

	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+

實際中，中間的豎線會以反色顯示。這稱為垂直分割線。它左右分割一個視窗。

還有一個 "vnew" 命令，用於開啟一個垂直分割的新視窗。還有一種方法是:
>
	:vertical new
<
"vertical" 命令可以放在任何分割視窗的命令的前面。這會在分割視窗的時候用垂直分
割取代水平分割。(如果命令不分割視窗，這個字首不起作用)。


在 窗 口 間 跳 轉

由於你可以用垂直分割和水平分割命令開啟任意多的視窗，你就幾乎能夠任意設定視窗的
佈局。接著，你可以用下面的命令在視窗之間跳轉:

	CTRL-W h	跳轉到左邊的視窗
	CTRL-W j	跳轉到下面的視窗
	CTRL-W k	跳轉到上面的視窗
	CTRL-W l	跳轉到右邊的視窗

	CTRL-W t	跳轉到最頂上的視窗
	CTRL-W b	跳轉到最底下的視窗

你可能已經注意到這裡使用移動游標一樣的命令用於跳轉視窗。如果你喜歡，改用方向
鍵也行。
    還有其它命令可以跳轉到別的視窗，參見: |Q_wi|。

==============================================================================
*08.5*	移動視窗

你已經分割了一些視窗，但現在的位置不正確。這時，你需要一個命令用於移動視窗。
例如，你已經打開了三個視窗，象這樣:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

顯然，最後一個視窗應該在最上面。移動到那個視窗 (用 CTRL-W w) 並輸入如下命令:
>
	CTRL-W K

這裡使用大寫的 K。這樣視窗將被移到最上面。你可以注意到，這裡又用 K 表示向上移
動了。
    如果你用的是垂直分割，CTRL-W K 會使當前視窗移動到上面並擴充套件到整屏的寬度。
假設你的佈局如下:

	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+

當你在中間的視窗 (three.c) 中使用 CTRL-W K 後，結果會是:

	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+

還有三個相似的命令 (估計你已經猜出來了):

	CTRL-W H	把當前視窗移到最左邊
	CTRL-W J	把當前視窗移到最下邊
	CTRL-W L	把當前視窗移到最右邊

==============================================================================
*08.6*	對所有視窗執行命令

你打開了幾個視窗，現在你想退出 Vim，你可以分別關閉每一個視窗。更快的方法是:
>
	:qall

這表示 "quit all" (全部退出)。如果任何一個視窗沒有存檔，Vim 都不會退出。同時光
標會自動跳到那個視窗，你可以用 ":write" 命令儲存該檔案或者 ":quit!" 放棄修改。

如果你知道有視窗被改了，而你想全部儲存，則執行如下命令:
>
	:wall

這表示 "write all" (全部儲存)。但實際上，它只會儲存修改過的檔案。Vim 知道儲存
一個沒有修改過的檔案是沒有意義的。
    另外，還有 ":qall" 和 "wall" 的組合命令:
>
	:wqall

這會儲存所有修改過的檔案並退出 Vim 。
   最後，下面的命令由於退出 Vim 並放棄所有修改:
>
	:qall!

注意，這個命令是不能撤消的。


為 所 有 的 參 數 打 開 窗 口

要讓 Vim 為每個檔案開啟一個視窗，可以使用 "-o" 引數:
>
	vim -o one.txt two.txt three.txt

這個結果會是:

	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+

"-o" 引數用於垂直分割視窗。
    如果 Vim 已經啟動了，可以使用 ":all" 命令為引數列表中的每個檔案開啟一個窗
口。":vertical all" 以垂直分割的方法開啟視窗。

==============================================================================
*08.7*	用 vimdiff 顯示檔案差異

有一種特殊的啟動 Vim 的方法可以用來顯示兩個檔案的差異。讓我們開啟一個 "main.c"
並插入一些字元。在設定了 'backup' 選項的情況下儲存這個檔案，以便產生 "main.c~"
備份檔案。
    在命令列中輸入如下命令: (不是在 Vim 中)
>
	vimdiff main.c~ main.c

Vim 會用垂直分割的方式開啟兩個檔案。你只能看到你修改過的地方和上下幾行的地方。

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- 摺疊
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- 修改過的行
	|  text		     |	text		  |
	|  text		     |	------------------|  <- 刪除的行
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- 摺疊
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(這幅圖沒有顯示出高亮效果，可以使用 vimdiff 命令看到更好的效果)

    那些沒有修改的行會被摺疊成一行，這稱為 "關閉的摺疊" (closed fold)。上圖中
由 "<- 摺疊" 標記的行就是一個用一行表示 123 行的摺疊。這些行在兩個檔案中完全相
同。
    標記為 "<- 修改過的行" 被高亮顯示，而增加的行被用另一種顏色表示。這可以很
清楚地表示出兩個檔案間的不同。
    被刪除的行在 main.c 視窗中用 "---" 顯示，如圖中用 "<- 刪除的行" 標記的行。
這些字元並不是真的存在。它們只是用於填充 main.c，以便與另一個視窗對齊。


折 疊 欄

每個視窗在左邊都有一個顏色略有不同的顯示欄，圖中標識為 "VV"。你會發現每個摺疊
在那個位置都有一個加號。把滑鼠移到那裡並按左鍵可以開啟那個折起，從而讓你看到裡
面的內容。
    對於開啟的摺疊，摺疊欄上會出現一個減號。如果你單擊那個減號，摺疊會被重新關
閉。
    當然，這隻能在你有滑鼠的情況下使用。如果你沒有，可以用 "zo" 開啟一個摺疊。
關閉使用 "zc"。


用 Vim 做 比 較

啟動比較模式的另一種方法從 Vim 內部開始: 編輯 "main.c" 檔案，然後分割視窗顯示
區別:
>
	:edit main.c
	:vertical diffsplit main.c~ 

":vertical" 命令使視窗用垂直的方式分割。如果你不寫這個命令，結果會變成水平分
割。

如果你有一個當前檔案的補丁或者 diff 檔案，你可以用第三種方法啟動比較模式: 先編
輯這個檔案，然後告訴 Vim 補丁檔案的名稱:
>
	:edit main.c
	:vertical diffpatch main.c diff

警告: 補丁檔案中必須僅包括為一個目標檔案所做的補丁，否則你可能會得到一大堆錯誤
資訊。還可能有些你沒打算打補丁的檔案也被打了補丁。
    補丁功能只改變記憶體中的檔案備份，不會修改你硬碟上的檔案 (除非你決定寫入改
動)。


滾 動 綁 定

當檔案中有很多改動時，你可以用通常的方式滾動螢幕。Vim 會盡可能保持兩個檔案對
齊，以便你可以並排看到檔案的區別。
    如果暫時想關閉這個特性，使用如下命令:
>
	:set noscrollbind


跳 轉 到 修 改 的 地 方

如果你通過某種方法取消了摺疊功能，可能很難找到有改動的地方。使用如下命令可以跳
轉到下一個修改點:
>
       ]c

反向跳轉為:
>
	[c

加上一個計數字首可以跳得更遠。


消 除 差 異

你可以把文字從一個視窗移到另一個，並以此來消除差異，或者為其中一個檔案中增加幾
行。Vim 有時可能無法及時更新高亮顯示。要修正這種問題，使用如下命令:
>
	:diffupdate

要消除差異，你可以把一個高亮顯示的塊從一個視窗移動到另一個視窗。以上面的
"main.c" 和 "main.c~" 為例，把游標移到左邊的視窗，在另一個視窗中被刪除的行的位
置，執行如下命令:
>
	:dp

這將把文字從左邊拷到右邊，從而消除兩邊的差異。"dp" 代表 "diff put"。
    你也可以反過來做: 把游標移到右邊的視窗，移到被 "改動" 了的行上，然後執行
如下命令:
>
	:do

這把文字從左邊拷到右邊，從而消除差異。
由於兩個檔案已經沒有區別了，Vim 會把所有文字全部摺疊起來。"do" 代表 "diff
obtain"。本來用 "dg" (diff get) 會更好。可是它已經有另外的意思了 ("dgg" 刪除從
游標為止到首行的所有文字)。

要了解更多的比較模式的內容，參見 |vimdiff|。

==============================================================================
*08.8*	雜項

'laststatus' 選項用於指定什麼時候對最後一個視窗顯示狀態條:

	0	永遠不
	1	只有用分割視窗的時候 (預設)
	2	永遠有

很多編輯另一個檔案的命令都有一個使用分割視窗的變體。對於命令列命令，這通過前置
一個 "s" 實現。例如 ":tag" 用來跳到一個標記，"stag" 就會分割出一個新視窗並跳到
那個標記。
    對於普通模式，前置一個 CTRL-W 可以完成這個功能。例如，CTRL-^ 跳到輪換文
件，而 CTRL-W CTRL-^ 開啟一個新視窗並編輯輪換檔案。

'splitbelow' 選項可以讓新的窗口出現在當前視窗的下面。'splitright' 選項讓垂直分
割的窗口出現在當前視窗的右邊。

開啟一個新視窗時可以在命令前加上一個修飾符說明新視窗應該出現在什麼地方:
>
	:leftabove {cmd}	當前視窗的左上方
	:aboveleft {cmd}	同上
	:rightbelow {cmd}	當前視窗的右下方
	:belowright {cmd}	同上
	:topleft {cmd}		整個 Vim 視窗的最上面或者最左邊
	:botright {cmd}		整個 Vim 視窗的最下面或者最右邊


==============================================================================
*08.9*	標籤頁

你會注意到視窗永遠不會重疊。這意味著螢幕空間很快會用完。這個問題的解決方法叫做
標籤頁。

假設你正在編輯檔案 "thisfile"。下面的命令可以建立新的標籤頁: >

	:tabedit thatfile

這會在一個視窗中編輯檔案 "thatfile"，這個視窗會佔滿整個 Vim 視窗。你會注意到在
頂部有一個含有兩個檔名的橫條:

	+----------------------------------+
	| thisfile | /thatfile/ __________X|   (thatfile 用加粗字型出現)
	|/* thatfile */			   |
	|that				   |
	|that				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

現在，你擁有了兩個標籤頁。第一個是檔案 "thisfile" 的視窗，第二個是檔案
"thatfile" 的視窗。這就像是兩張重疊的紙，它們所帶的的標籤露在外面，顯示其檔案
名。

現在，使用滑鼠單擊頂端的 "thisfile"。結果是

	+----------------------------------+
	| /thisfile/ | thatfile __________X|   (thisfile 用加粗字型出現)
	|/* thisfile */			   |
	|this				   |
	|this				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

你可以通過單擊頂端的標籤切換標籤頁。如果沒有滑鼠或者不想用它，可以使用 "gt" 命
令。助記符: Goto Tab。

現在，讓我們通過下面的命令建立另一個標籤頁: >

	:tab split

這會建立一個新的標籤頁，包含一個視窗，編輯和剛才所在視窗中的緩衝區相同的緩衝
區:

	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X|  (thisfile 用加粗字型出現)
	|/* thisfile */			      |
	|this				      |
	|this				      |
	|~				      |
	|~				      |
	|~				      |
	|				      |
	+-------------------------------------+

在任何開啟視窗的 Ex 命令前面，你都可以放上 ":tab"。這個視窗在新標籤頁中開啟。
另一個例子: >

	:tab help gt

它將在新的標籤頁中顯示關於 "gt" 的幫助。

使用標籤頁可以完成更多的工作:

- 在末尾標籤後面的空白處單擊滑鼠
        選擇下個標籤頁，同 "gt"。

- 在右上角的 "X" 處單擊滑鼠
        關閉當前標籤頁，除非當前標籤頁中的改變沒有儲存。

- 在標籤行上雙擊滑鼠
        建立新標籤頁。

- "tabonly" 命令
	關閉除了當前標籤頁以外的所有標籤頁，除非其它標籤頁中的改變沒有儲存。

關於標籤頁更多的資訊，參見 |tab-page|。

==============================================================================

下一章: |usr_09.txt|  使用 GUI 版本

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
