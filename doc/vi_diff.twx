*vi_diff.txt*   For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


Vim 和 Vi 的差異					*vi-differences*

在各個幫助檔案裡，Vim 和 Vi/Ex 的差異在花括號裡給出，如 "{Vi 無此功能}"。本文
件只列出其餘各處未列出之處，並給出一個總覽。

Vim 基本上遵守 POSIX 1003.2-1。唯一隻知缺少的命令是 ":open"。還有眾多小的差異
(或者因為 Vim 的缺失，或者因為此處並不涉及 Posix)。

1. 模擬的命令				|simulated-command|
2. 缺失的選項				|missing-options|
3. 限制					|limits|
4. 最有意思的新增功能			|vim-additions|
5. 其它 Vim 特色			|other-features|
6. 命令列引數				|cmdline-arguments|
7. POSIX 相容性				|posix-compliance|

==============================================================================
1. 模擬的命令						*simulated-command*

該命令在 Vi 存在，但 Vim 只是對它進行模擬:

							*:o* *:op* *:open*
:[range]o[pen]			類似於 |:visual|: 結束 Ex 模式。
				{Vi: 在開啟模式開始編輯}

:[range]o[pen] /pattern/	同上，另外移動游標到游標行上匹配 "pattern" 的
				列。

Vim 不支援 open 模式，因為它其實沒什麼用。對於那些 ":open" 會啟動 open 模式的
情形，Vim 會離開 Ex 模式，你可以執行相同的命令，但重新整理的是整個螢幕而不是隻有一
行。

==============================================================================
2. 缺失的選項						*missing-options*

這些選項只有在 Unix Vi 裡存在，但 Vim 沒有。如果你試圖設定這些選項，你不會得到
錯誤訊息。但你給出的值不會使用和顯示。

autoprint (ap)		布林型	(預設開啟)		*'autoprint'* *'ap'*
beautify (bf)		布林型	(預設關閉)		*'beautify'* *'bf'*
flash (fl)		布林型	(預設未知)		*'flash'* *'fl'*
graphic (gr)		布林型	(預設關閉)		*'graphic'* *'gr'*
hardtabs (ht)		數值型	(預設 8)		*'hardtabs'* *'ht'*
	<Tab> 顯示時移動的空白的數目
mesg			布林型	(預設開啟)		*'mesg'*
novice			布林型	(預設關閉)		*'novice'*
open			布林型	(預設開啟)		*'open'*
optimize (op)		布林型	(預設關閉)		*'optimize'* *'op'*
redraw			布林型	(預設關閉)		*'redraw'*
slowopen (slow)		布林型	(預設關閉)		*'slowopen'* *'slow'*
sourceany		布林型	(預設關閉)		*'sourceany'*
w300			數值型	(預設 23)		*'w300'*
w1200			數值型	(預設 23)		*'w1200'*
w9600			數值型	(預設 23)		*'w9600'*

==============================================================================
3. 限制							*limits*

Vim 有一些關於能夠編輯的檔案的限制 {Vi: 不能處理 <Nul> 和超過 128 的字元，行長
有限制，還有其它的限制}。
							*E340*
最大行長		   在 16 位整數的機器上，(Amiga 和 MS-DOS 真實模式):
			   32767，否則 2147483647 個字元。更長的行被分割。
最大行數		   2147483647 行。
最大檔案大小		   2147483647 位元組 (2 千兆) 如果長整數是 32 位。對於
			   64 位的長整型，則更多。另外對於 |swap-file| 而言，
			   也受限於磁碟可用空間。
							*E75*
檔案路徑長度		   Unix 和 Win32: 1024 字元，否則 256 字元 (或系統能支
			   持的最大值)。
擴充套件後字元選項的長度	   Unix 和 Win32: 1024 字元，否則 256 字元
最大顯示寬度		   Unix 和 Win32: 1024 字元，否則 255 字元
最大對映左手邊序列	   50 個字元。
不同高亮型別數目:	   超過 30000
數值型別的範圍:		   -2147483648 到 2147483647 (64 位系統上可能更大)
標籤檔案行的最大長度:	   512 位元組。


撤銷資訊和暫存器內的文字儲存在記憶體裡，因為做 (大的) 改變時，可用的 (虛擬) 記憶體
限制了撤銷的層數和能儲存在暫存器裡的文字。其它在記憶體裡的資訊包括: 命令列歷史、
QuickFix 模式的錯誤資訊，等等。

記憶體使用限制
-------------------

'maxmem' ('mm') 選項用來設定單個緩衝區可用的最大記憶體 (以千位元組計)。'maxmemtot'
用來設定所有緩衝區可用的最大記憶體 (以千位元組計)。它們的預設值視系統而定。在
Amiga 和 MS-DOS 上，'maxmemtot' 的設定根據可用的記憶體決定。
這不是硬性限制，只是用來告訴 Vim 什麼時候把文字移到交換檔案。
如果你不喜歡 Vim 交換到檔案上，設定 'maxmem' 和 'maxmemtot' 為非常大的值。交換
檔案這時只會作恢復用。如果你完全不想要交換檔案，設定 'updatecount' 為 0，或者
在啟動 Vim 時加上 "-n" 引數。

==============================================================================
4. 最有意思的新增功能					*vim-additions*

Vi 相容性。						|'compatible'|
	儘管 Vim 99% 和 Vi 相容，有些 Vi 的特性被認為是漏洞，或至少需要改進。
	不過，Vim 啟動時儘量和 "真正的" Vi 行為相似。要使得 Vim 行為有所改進，
	試試復位 'compatible' 選項:
		:set nocompatible
	或者啟動 Vim 時帶上 "-N" 引數:
		vim -N
	如果你有 .vimrc 檔案，Vim 啟動時自動置位 'nocompatible'。見
	|startup|。
	'cpoptions' 選項可以設定若干專門專案的 Vi 相容性。

支援不同的系統。
	Vim 可以用在:
	- 所有的 Unix 系統 (所有測試過的系統都沒有問題。不過，GUI 和 Perl 介面
	  不一定哪裡都可以用)。
	- Amiga (500、1000、1200、2000、3000、4000、...)。
	- 真實模式下 MS-DOS (無需附加驅動)。
	- 保護模式下的 Windows 3.1 和 MS-DOS (需要 DPMI 驅動)。
	- Windows 95 和 Windows NT，支援長檔名。
	- OS/2 (需要 emx.dll)
	- Atari MiNT
	- VMS
	- BeOS
	- Macintosh
	- Risc OS
	- IBM OS/390
	注意 在有的系統上需要關閉一些特性來節省資源的使用，尤其是 MS-DOS。有的
	老舊的系統上你需要使用舊一點的 Vim 版本。

多層持久撤銷。							|undo|
	'u' 在時間點上往後退。'CTRL-R' 則往前走。'undolevels' 選項可以設定能記
	住的改變數目 (預設為 1000)。如果 'undolevels' 設為 0，就能得到 Vi-相容
	的單次撤銷行為。設為 -1 則完全關閉撤銷功能。
	如果緩衝區所有的改變都被撤銷，緩衝區不再被認為改變過。這時，你可以用
	:q 退出，不用 <!>。
	撤銷一些改變然後又做了新的改編後，Vim 在撤銷樹上建立一個分支。這意味著
	你可以回到文字過去的任何狀態，任何改變都不會有丟失文字的風險。
	|undo-tree|
	如果置位 'undofile' 選項，在檔案裡儲存撤銷資訊。這就是說，你可以退出
	Vim，啟動 Vim 開啟以前編輯過的檔案，然後撤銷在退出 Vim 之前做出的改
	動。

圖形使用者介面 (GUI)。					|gui|
	包括對 GUI 的支援: 選單、滑鼠、滾動條，等等。你可以定義自己的選單。更
	好支援供對 CTRL/SHIFT/ALT 鍵加特殊鍵/滑鼠鍵的組合。支援多種平臺，比如
	X11 (Motif 和 Athena 介面)、GTK、Win32 (Windows 95 和其後版本)、BeOS、
	Amiga 和 Macintosh。

多重視窗和緩衝區。					|windows.txt|
	Vim 可以把螢幕分割為多個視窗，每個編輯一個不同的緩衝區，或者在不同位置
	的同一緩衝區。緩衝區可以被載入 (和改變)，但是不一定在窗口裡顯示。這被
	稱為隱藏緩衝區。為了支援這個機制，增加了許多命令和選項。
	Vim 也可以使用多重標籤頁。每個標籤頁由一個或多個視窗。使用包含所有標籤
	頁標籤的一行可以快速在這些頁面之間切換。|tab-page|

語法高亮。						|:syntax|
	Vim 可以高亮關鍵字、模式和其它。這由若干 |:syntax| 命令定義，而能實現
	大多數語言和檔案型別的高亮。Vim 包含了諸多檔案提供大多數語言的高亮，比
	如 C、C++、Java、Pascal、Makefile、外殼指令碼等等。高亮所用的顏色可以為
	普通終端、色彩終端和 GUI 用 |:highlight| 分別定義。一個方便的方式是使
	用 |:colorscheme| 命令。
	高亮的文字可以匯出為 HTML 格式。|convert-to-HTML|
	其它可以高亮的專案包括搜尋字串的匹配 |'hlsearch'|，匹配的括號
	|matchparen| 和游標所在的行和列 |'cursorline'| |'cursorcolumn'|。

拼寫檢查。						|spell|
	如果置位 'spell' 選項，Vim 會高亮拼寫錯誤。現在支援大約 50 種語言，用
	'spelllang' 選項選擇。原始碼中，只檢查註釋和字串的拼寫。

摺疊。							|folding|
	一個範圍內的行可以顯示為單個 "摺疊" 行。這樣允許概覽檔案並快速移過大段
	文字。摺疊可以手動建立，也可以基於語法、縮排等等創立。

diff 模式。						|diff|
	Vim 可以顯示檔案的兩個版本並高亮兩者的差異。相同的文字部分用摺疊關掉。
	相關命令可以用來從一個版本把文字移到另一個版本。

外掛。							|add-plugin|
	把外掛檔案放在合適的目錄下就可以對基本功能擴充套件。這是一個啟動 Vim 時執
	行別人寫的 Vim 指令碼的簡便方法。外掛可以應用在所有檔案上，或者為某個文
	件型別特別編寫。
	軟體包使這項功能更加簡便。|packages|

非同步通訊和定時器。					|channel| |job| |timer|
	Vim 可以在後臺和其它程序交換資訊。這樣可以讓伺服器完成工作，併發送結果
	給 Vim。|channel|
	Vim 可以啟動作業，與之通訊，並結束作業。|job|
	可以一次或重複啟用定時器，並呼叫函式完成任何功能。|timer|

重複命令序列。						|q|
	"q{c}" 開始記錄輸入的字元，並儲存在命名暫存器 {c} 裡。另一個 "q" 停止
	記錄。該暫存器可以通過 "@{c}" 命令執行。這對重複一個複雜的序列十分有
	用。

靈活的插入模式。					|ins-special-special|
	插入模式下，游標鍵可以用來在檔案移動。就撤銷/重做而言，這使得插入內容
	分成不同的部分。

	CTRL-O 可以用來執行單個普通模式的命令。這和按 <Esc> 輸入命令，再按 |a|
	幾乎相同。

可視模式。						|Visual-mode|
	可視模式可以用來先高亮選擇一段文字並執行一個命令在其上。這是一個代替先
	給出操作符，然後移動到待操作文字的尾部的 (容易使用的) 替代方法。
	|v| 和 |V| 用來開始可視模式，|v| 作用於字元上，|V| 作用於行上。移動光
	標可以擴充套件可視的部分。螢幕上以高亮顯示該部分。輸入 "o"，可視文字的另一
	端也可移動。可視文字可以被一個操作符影響:
		d	刪除
		c	修改
		y	抽出
		> 或 <	插入和刪除縮排
		!	通過外部程式過濾
		=	使用排版機制過濾
		:	對可視行開始 |:| 命令。
		gq	'textwidth' 列內的文字進行排版
		J	連線行
		~	交換大小寫
		u	改變為小寫
		U	改變為大寫

列塊操作符。						|visual-block|
	可以用可視模式選擇一個文字列塊。用 CTRL-V 開始可視模式。該列塊可以被刪
	除 ("d")，抽出 ("y") 和改變大小寫 ("~"、"u" 和 "U")。被刪除和抽出的列
	塊可以用 "p" 和 "P" 命令放回文字中。

幫助系統。						|:help|
	幫助顯示在一個視窗中。可以使用常見的命令移動，搜尋，等等。標籤可以用來
	在幫助檔案間跳轉，就像超連結一樣。|:help| 命令需要一個引數，可以快速跳
	到某主題的資訊。<F1> 能快速訪問到幫助系統。幫助索引檔名可以用
	"helpfile" 選項設定。

命令列編輯和歷史。					|cmdline-editing|
	使用游標，你可以在命令列的任何位置插入或者刪除。右/左游標鍵可以用來前
	移/後移一個字元。Shift + 右/左游標鍵可以用來前移/後移一個單詞。
	CTRL-B/CTRL-E 可以用來跳轉到命令列的開始和結束位置。

							|cmdline-history|
	會記住命令列。上/下游標鍵可以用來記起以前的命令列。'history' 選項可以
	設定能記住的行數。命令列和搜尋模式的歷史分別記憶。

命令列補全。						|cmdline-completion|
	輸入一個命令列 (在螢幕的最底行) 時，<Tab> 可以用來補全
	   什麼		例子~
	- 命令		:e<Tab>
	- 標籤		:ta scr<Tab>
	- 選項		:set sc<Tab>
	- 選項值	:set hf=<Tab>
	- 檔名	:e ve<Tab>
	- 等等

	如果有多個匹配，CTRL-N (下一個) 和 CTRL-P (前一個) 會遍歷各個匹配。
	<Tab> 和 CTRL-N 類似，但會迴繞到第一個匹配。

	'wildchar' 選項可以設定進行命令列補全的字元。<Tab> 是預設值。CTRL-D 可
	以在 (不完全) 萬用字元後輸入；所有的匹配都會被列出。CTRL-A 會插入所有的
	匹配，CTRL-L 會插入所有匹配的最長的共同部分。

插入模式補全。						|ins-completion|
	在插入模式下，CTRL-N 和 CTRL-P 鍵可以用來補全別的地方出現過的單詞。
							|i_CTRL-N|
	CTRL-X 進入另外一個模式，完成一些補全:
	|i_CTRL-X_CTRL-F|	檔名
	|i_CTRL-X_CTRL-K|	'dictionary' 檔案的單詞
	|i_CTRL-X_CTRL-T|	'thesaurus' 檔案的單詞
	|i_CTRL-X_CTRL-I|	標頭檔案的單詞
	|i_CTRL-X_CTRL-L|	整行
	|i_CTRL-X_CTRL-]|	標籤檔案的單詞
	|i_CTRL-X_CTRL-D|	定義或者巨集
	|i_CTRL-X_CTRL-O|	全能補全: 為不同檔案型別分別定製的智慧補全
	等等

長行支援。						|'wrap'| |'linebreak'|
	如果 'wrap' 選項關閉，長行不會迴繞，只有部分的內容會被顯示。如果游標移
	動到未顯示的部分，螢幕會水平滾動。最少滾動的列數由 'sidescroll' 選項決
	定。|zh| 和 |zl| 命令可用來向邊框滾動。
	另一種方法是，長行可以在 'linebreak' 選項置位時，在單詞間斷開。這使得
	單行段落的編輯較為便利 (例如，後來把文字讀到 DTP 程式時)。用 |gk| 和
	|gj| 命令上下移動游標。

文字排版。						|formatting|
	'textwidth' 選項可以用來自動限制行的長度。這可以補充 Vi 的
	'wrapmargin' 選項，後者並不十分有用。|gq| 操作符可以用來排版一段文字
	(例如，|gqap| 排版整個段落) 。文字對齊的命令: |:center|、|:left| 和
	|:right|。

擴充套件的搜尋模式。					|pattern|
	為了匹配各種文字專案，提供了很多附加的模式。例如: "\n"
	可以用來在模式中匹配換行符。
	"x\{2,4}" 匹配 "x" 2 到 4 次。
	"\s" 匹配單個空白字元。

目錄、遠端和歸檔瀏覽。					|netrw|
	Vim 可以瀏覽檔案系統。簡單編輯一個目錄。在列表裡用通常的命令移動，然後
	按 <Enter> 進入游標所在的目錄或檔案。
	也能用於通過 ftp、http、ssh 等連線的遠端檔案。
	也能瀏覽 zip 和 tar 歸檔。|tar| |zip|

加快編輯-編譯-編輯迴圈。				|quickfix|
	|:make| 命令可以用來執行編譯，並跳轉到第一個錯誤。然後對編譯器錯誤資訊
	構成的檔案進行解釋。這時，Vim 開始編輯第一個錯誤。

	錯誤檔案的每一行被檢索一個檔名，行號，和錯誤資訊。'errorformat' 選項
	可以設定類似於 scanf 格式的字串列表，從可以處理很多編譯器的輸出。

	|:cn| 命令可以用來跳轉到下一個錯誤。
	|:cl| 列出所有的錯誤資訊。還有其他的命令。
	'makeef' 選項指出錯誤資訊的檔名。
	'makeprg' 選項包含 |:make| 命令要執行的程式名。
	'shellpipe' 選項包含用來把編譯器的結果輸出到錯誤資訊的命令字串。

在檔案中尋找匹配。					|:vimgrep|
	Vim 可以在多個檔案中搜索模式。可以使用先進的 Vim 正規表示式模式，適用
	於所有系統，同時也能在壓縮檔案裡搜尋。

改進的程式縮排。					|'cindent'|
	'cindent' 選項開啟時，每行的縮排被自動調整。大部分的 C 語法能夠識別。
	各種風格的縮排可以用 'cinoptions' 設定。切換縮排的鍵可以用 'cinkeys'
	來設定。

	註釋可以自動排版。'comments' 選項設定開始和結束註釋的字元。這對 C 程式碼
	最有效，但是對 e-mail 也適用 (行首的 ">") 和其他型別的文字。|=| 操作符
	可以用來重新排版行。

	許多其他的語言包含了縮排外掛，支援自動縮排。|30.3|

搜尋標頭檔案裡的單詞。					|include-search|
	|[i| 命令可以用來搜尋游標下的單詞在當前和包含的標頭檔案裡的匹配。
	'include' 選項可以設定描述包含檔案的命令的模式 (預設是為 C 程式設計)。
	|[I| 命令列出所有的匹配。|[_CTRL-I| 命令跳轉到一個匹配。
	|[d|、|[D| 和 |[_CTRL-D| 命令做相同的事情，不過只查詢用 'define'
	選項給出的模式匹配的行。

自動命令。						|autocommand|
	在讀寫檔案，跳轉到別的緩衝區等等時候，可以根據檔名，自動執行命令。這
	對設定 C 程式、文件、普通文字、e-mail 等等的選項和對映有用。這也使得編
	輯壓縮檔案成為可能。

指令碼和表示式。						|expression|
	增加了命令，可以組成強大的指令碼語言。
	|:if|		條件執行，比如可以用來根據 $TERM 的值設定不同選項。
	|:while|	重複一系列命令。
	|:for|		遍歷列表。
	|:echo|		顯示錶達式的結果。
	|:let|		給一個內部變數、選項等賦值。
			變數型別包括數值、字串、列表和字典。
	|:execute|	執行表示式構造的命令。
	|:try|		捕獲例外。
	等等，等等。見 |eval|。
	支援除錯和刨視。|debug-scripts| |profile|
	如果還不夠，提供了到 |Python|、|Ruby|、|Tcl|、|Lua|、|Perl| 和
	|MzScheme| 的介面。

Viminfo。						|viminfo-file|
	命令列歷史，位置標記，和暫存器可以存在一個在啟動時讀入的檔案裡。這可以
	用來在退出和重啟 Vim 時重複上次的搜尋或命令列命令。也可以用 |'0|
	跳轉回最近一次的編輯。'viminfo' 選項可以設定選項什麼內容儲存在
	.viminfo 檔案裡。預設該功能是關閉的。

列印。							|printing|
	|:hardcopy| 命令傳送文字給印表機。可以包含語法高亮。

滑鼠支援。						|mouse-using|
	支援滑鼠的環境包括 GUI 版本、Unix 的 xterm、支援 sysmouse 的 BSD、支援
	gpm 的 Linux、MS-DOS 和 Win32。它也可用於定位游標，選擇可視區域、貼上
	暫存器，等等。

鍵名的使用。						|<>| |key-notation|
	特殊鍵現在都有名字，類似於 <Up>、<End>，等等。名字可以用來對映，使編
	輯變得方便。

編輯二進位制檔案。					|edit-binary|
	Vim 可以編輯二進位制檔案。你可以修改可執行檔案的若干字元，而不會破壞其它
	內容。 Vim 不會刪除 NUL 字元 (內部，它們被表示成 <NL>)。
	|-b|		開始編輯二進位制檔案的命令列引數
	|'binary'|	|-b| 設定的選項。防止在檔案最後一行增加 <EOL>。

多語言支援。						|multi-lang|
	可以編輯雙位元組或者多位元組編碼的檔案。使用 UTF-8 支援可以同時編輯各種語
	言，而無須切換字型。|UTF-8|
	訊息和選單可以用多種語言提供。

移到游標到行外。
	如果設定 'virtualedit' 選項，游標可以移動到螢幕的任何位置，包括沒有文
	本的地方。可以用於很方便地編輯表格和圖表。

==============================================================================
5. 其它 Vim 特色					*other-features*

隨機選取的一些其他的優美特色的列表。


Vim 以 "-s scriptfile" 啟動時，"scriptfile" 讀取的字元就像你輸入的那樣。如果在
編輯器還沒退出時檔案結束，多餘的字元從控制檯讀入。

"-w" 選項用來把所有的輸入字元記錄在指令碼檔案裡。該檔案可以用來重做編輯的操作，
甚至可以作用在通過修改指令碼檔案裡的一些命令後作用在別的檔案上。

"-o" 選項為每個引數開啟一個視窗。"-o4" 則開啟四個視窗。

要能在全屏工作，Vi 需要幾項 termcap 專案。Vim 只要 "cm" 專案 (游標移動)。


命令模式下:

'showcmd' 選項置位時，命令字元在螢幕末行上顯示。命令結束時它們被刪除。

如果置位了 'ruler' 選項，當前的游標位置顯示在螢幕末行。

"U" 在離開最近修改的行和 "u" 之後都還能工作。

能顯示設定了第 8 位的字元。'~' 和 0xa0 之間的字元顯示為 "~?"、 "~@"、"~A"，等
等。除非它們包含在 'isprint' 選項裡。

"][" 跳到 C 函式的下一個結束處 (第一列的 '}')。
"[]" 轉到 C 函式的前一個結束處 (第一列的 '}')。

"]f"、"[f" 和 "gf" 開始編輯游標所在的檔名。
CTRL-W f 分割視窗，並開始編輯游標所在的檔名。

"*" 正向搜尋游標所在的識別符號，"#" 反向搜尋之。
"K" 執行 'keywordprg' 選項定義的程式，使用游標所在的識別符號作為引數。

"%" 可以在前面加一個計數。游標跳轉到檔案該百分比所處的行。普通的 "%" 功能則跳
轉到匹配的括號上，引號裡的括號跳過。

CTRL-] 命令可以在游標位於識別符號中間時使用。

記住用過的標籤。使用標籤棧的命令包括 CTRL-T、":pop" 和 ":tag"。":tags" 列出標
籤棧。

'tags' 選項可以設定標籤檔名字的列表。可以指定多個標籤檔案。"./" 開始的檔名
裡，"./" 被當前檔案所在的路徑所代替。這樣可以指定編輯中的檔案的相同目錄下的標
籤檔案。

以前用過的檔名被記在輪換檔名列表裡。
CTRL-^ 接受一個計數，指定列表的一個索引。
":files" 命令顯示輪換檔名列表。
"#<N>" 被替換成列表中第 <N> 個輪換檔名。
"#<" 被替換成不帶副檔名的當前檔名。

搜尋模式可以使用更多特性。<NL> 字元被看成搜尋模式和 ":s" 的替換字串的一部
分。Vi 把它看成命令的結束。

搜尋可以把游標放在匹配的結束處，還可以包括一個字元位移。

計數可以應用於 "~"、":next"、":Next"、"n" 和 "N"。

":next!" 命令在置位 'autowrite' 時，不寫入檔案。過去，vi 寫入檔案，但這被認為
是一個漏洞，因為使用者不期待該行為，而且 ":rewind!" 也不寫入檔案。

Vi 在替換模式下輸入 <CR> 時，只有置位 'ai' 以後才刪除一個字元 (但直到你按
<Esc> 時才看到)。Vim 在任何情況下都刪除一個字元 (並立即顯示)。

增加了 :wnext 命令。和 ":write" 接著 ":next" 相同。

":w!" 命令總是寫入，即使檔案防寫時也是如此。Vi 裡你需要先執行
":!chmod +w %:S" 和 ":set noro"。

置位 'tildeop' 以後，"~" 是操作符 (一定要跟在移動命令之後使用)。

"J" (連線) 命令裡，你可以復位 'joinspaces' 選項，使得句號之後只有一個空格 (Vi
插入兩個空格)。

"cw" 可以用來改變多個字元組成的空白 (Vi 則不明確: "cw" 只改變一個空格，而 "dw"
刪除所有的空白)。

"o" 和 "O" 接受計數，以便重複插入的部分 (Vi 清除部分的顯示)。

不支援 Ex 命令之後的標誌位 (也無實現它的計劃)。

非 UNIX 系統上，":cd" 命令顯示當前的目錄，而不是轉到主目錄 (因為沒有)。":pwd"
在所有的系統上顯示當前目錄。

":cd" 命令之後，檔名 (引數列表和開啟的檔案) 仍然指向原來的檔案。Vi 裡，改動
過的檔案裡不允許執行 ":cd"，否則檔名的含義就改變了。

":source!" 命令從檔案裡讀取 Vi 命令。

":mkexrc" 命令寫入當前修改過的選項和對映到 ".exrc" 檔案裡。":mkvimrc" 寫入到
".vimrc" 檔案。

對映不檢查所謂的 "尾遞迴"。這樣可以允許 ":map! foo ^]foo" 類似的形式。

對映以數字開始時，vi 丟失了之前輸入的計數 (例如，如果使用對映 ":map g 4G"，命
令 "7g" 轉到第 4 行)。這被認為是一個 vi 的漏洞。Vim 連線計數 (這個例子裡，它成
為了 "74G")，符合多數人的期待。

:put! 命令把暫存器的內容插到當前行之前。

如果放置的文字少於一行，vi 的 "p" 和 "P" 命令不能用 "." 重複。Vim 它們總是可以
重複的。

":noremap" 命令可以用來輸入不會被重對映的對映。這可以用來交換兩個鍵的含義。
":cmap"、":cunmap" 和 ":cnoremap" 可以用來只在命令列編輯時對映。":imap"、
":iunmap" 和 ":inoremap" 則可用作插入模式的對映。類似的命令對縮寫也存在:
":noreabbrev"、":iabbrev"、":cabbrev"、":iunabbrev"、":cunabbrev"、
":inoreabbrev"、":cnoreabbrev"。

Vi 裡命令 ":map foo bar" 會刪除以前定義過的對映 ":map bug foo"。這被認為是一個
漏洞。所以 Vim 沒有這一特性。
":unmap! foo" 倒是會刪除 ":map! bug foo"。如果不這樣，撤銷對映很難實現 (這和
vi 相容)。

':' 暫存器包含最近的命令列。
'%' 暫存器包含當前的檔名。
'.' 暫存器包含最近插入的文字。

":dis" 命令顯示抽出的暫存器的內容。

CTRL-O/CTRL-I 可用作跳轉到較舊的/較新的位置。這和 '' 命令所用到的位置相同，但
是可以到別的檔案裡。":jumps" 命令列出較老的所有位置。

如果置位了 'shiftround' 選項，">" 和 "<" 命令的縮排被取整到 'shiftwidth' 的倍
數。

'scrolljump' 選項可以設定為游標離開螢幕時最少滾動的行數。可用在滾動緩慢的場
合。

'scrolloff' 選項可以設定游標上面和游標下面最少保留的行數。這樣，你在編輯時，總
能看到一些上下文。如果設為了一個大值，游標總保持在視窗的中間。

大寫位置標記用來在檔案間跳轉。":marks" 命令列出當前設定的所有位置標記。"']" 和
"`]" 命令跳轉到前一個操作符的最後，或者放置 (put) 命令插入文字的最後。"'[" 和
"`[" 這跳轉到相應的開始處。

'shelltype' 選項的設定反映了 Amiga 使用的外殼型別。

'highlight' 選項可以設定若干命令使用的高亮模式。

CTRL-A (加) 和 CTRL-X (減) 命令是新增的。命令的計數 (預設為 1) 被從游標所在或
其後的數字加上/減去。該數字可以是十進位制、八進位制 ('0' 開始)，或者十六進位制 ('0x'
開始)。對巨集很有用。

:set 命令可以使用 "inv" 字首來反轉布林型選項的值。

Vi 和 Vim 上你都可以用 ":substitute" 命令的 CTRL-M 增加換行符。Vi 裡，這意味著
你不能在文本里插入一個真正的 CTRL-M。Vim 裡，你可以用前導 CTRL-V 的方式在文字
裡輸入一個真正的 CTRL-M。


插入模式下:

如果開啟 'revins' 選項，則進行反方向插入。這可以用來輸入希伯來文。插入普通字元
時，游標不會移動，而文字會往右移動。退格、CTRL-W 和 CTRL-U 同樣反向工作。
CTRL-B 切換 'revins' 選項。在替換模式下，'revins' 沒有效果。必須在編譯時開啟這
一功能。

退格鍵和 CTRL-D 一樣可以用來刪除自動的縮排。

如果 'backspace' (bs) 選項包含 "eol"，你可以在換行符上退格、CTRL-U 和 CTRL-W。
如果 'backspace' 選項包含了 "start"，你可以在插入的開始處退格。

如果置位了 'paste' 選項，一些選項被複位，而且插入模式和縮寫的對映被禁止。這允
許在視窗系統裡貼上文字不會產生以外的效果。如果復位 'paste' 選項，舊的選項值重
新恢復。

CTRL-T/CTRL-D 總是插入/刪除當前行的一個縮排，不管游標處於何列。

CTRL-@ (插入上次輸入過的文字) 總能工作 (Vi: 只有在作為第一個字元輸入時)。

CTRL-A 和 CTRL-@ 類似，但不離開插入模式。

CTRL-R {0-9a-z..} 可以用來插入暫存器的內容。

如果置位了 'smartindent' 選項，C 程式會更好的自動縮排，'cindent' 則做得更多。

CTRL-Y 和 CTRL-E 可以用來從當前游標位置的上/下複製字元。

CTRL-V 之後，你可以輸入三個十進位制數字。該位元組作為單個字元插入在文本里。這可以
用來輸入你的鍵盤上沒有的國際字元。

開啟 'expandtab' (et) 選項，使得 <Tab> 被擴充套件為合適數量的空格。

視窗總是反映緩衝區的內容 (Vi 在改變文字和其他一些情況下並不如此)。

如果 Vim 編譯時定義了 DIGRAPHS，就能支援二合字母。已經包含了一組常用的二合字
母。它們可以用 ":digraph" 顯示。用 ":digraph {char1}{char2} {number}" 可以定義
更多。二合字母本身以 "CTRL-K {char1} {char2}" 或 "{char1} BS {char2}" 輸入 (後
者只有在開啟 'digraph' 選項時)。

在重複插入時，例如 "10atest <Esc>"，vi 只會處理第一個插入的迴繞邊界
('wrapmargin')。Vim 則對整體處理。

"i" 或 "a" 命令的計數用於所有文字。Vi 只針對第一行。在 Vi 裡，
"3iabc<NL>def<Esc>" 會插入 "abcabcabc<NL>def"，但 Vim 會給出
"abc<NL>defabc<NL>defabc<NL>def"。


命令列模式下:

<Esc> 退出命令列但不執行之。vi 裡，命令列還是會執行，這和大多數人的期待不符
(按 <Esc> 應該總是讓你退回到普通模式)。要避免一些古老的巨集的問題，巨集中的 <Esc>
仍然執行命令列命令。如果期待 <Esc> 的輸入像 vi 那樣執行命令列命令，你可以如此
修正 ":cmap ^V<Esc> ^V<CR>"

通用:

'ttimeout' 選項和 'timeout' 類似，但只對游標和功能鍵有效，而不是普通的經過對映
的字元。'timeoutlen' 選項給出等待的毫秒數。如果 'esckeys' 選項沒有置位，<Esc>
開始的游標和功能鍵在插入模式下不會識別。

每個終端字串有一個選項。這可以用在 termcap 不支援或者要改變單獨的字串的場
合。

'fileformat' 選項可以設定 <EOL> 的選擇: "dos" <CR><NL>、"unix" <NL> 或 "mac"
<CR>。如果 'fileformats' 選項非空，Vim 試圖自動檢測 <EOL> 的型別，並據此設定
'fileformat' 選項。

有的系統沒有任務 (job) 控制 (舊 Unix 系統和非 Unix 系統)。CTRL-Z、":stop" 或
":suspend" 命令啟動一個新的外殼。

如果 Vim 在 Amiga 上啟動時沒有互動視窗作為輸出，則開啟一個視窗 (並且 :sh 仍然
工作)。你可以用 |-d| 引數給出編輯的裝置，例如 "-d con:20/20/600/150"。

'columns' 和 'lines' 選項可以用來設定或者取得顯示的寬度和高度。

從檔案的第一行或者最後數行裡讀取選項的設定。'modelines' 選項決定嘗試的行數 (缺
省為 5)。注意: 這和 Vi 版本不同，後者會執行模式行裡的任何 Ex 命令 (嚴重的安全
問題)。|trojan-horse|

如果置位了 'insertmode' 選項 (例如在 .exec 裡)，Vim 以插入模式啟動。並且在
按了 <Esc> 以後回到這一模式。

撤銷的資訊儲存在記憶體裡。可用的記憶體限制了可以撤銷的改變的數目和大小。這可能對
MS-DOS 是一個問題，但在 Amiga 上很少是，而 Unix 和 Win32 上幾乎不會。

如果置位了 'backup' 或 'writebackup' 選項: 在檔案覆蓋前，備份檔案 (.bak) 被創
建。如果使用 "backup" 選項，覆蓋後該檔案得以保留。

Vim 建立 ".swp" 結尾的檔案，用以儲存檔案的改動部分和記憶體放不下的內容。該檔案用
於 "vim -r file"，即從強行終止的編輯會話恢復。交換檔案的使用可以用把
updatecount' 選項設為 0，或者以 "-n" 選項啟動 Vim 來關閉。使用 'directory' 選
項把 .swp 檔案放到其它地方。

Vim 在 8.3 檔名的檔案系統下能正常工作。這也包括 Amiga 的 messydos 或者
crossdos 檔案系統，或者 Unix 上裝載 (mount) 的任何 8.3 檔案系統。見
|'shortname'|。

錯誤資訊顯示至少一秒鐘 (Vi 的錯誤資訊會相互覆蓋)。

如果 Vim 給出 |hit-enter| 提示，你可以輸入任何鍵。除了 <CR>、<NL> 和 <Space>
的字元都被認為是命令 (的開始)。(Vi 只接受 ":" 開始的命令)。

計數和無名暫存器的內容在改變檔案後仍然記住。

"No lines in buffer" 訊息是一個普通的訊息，而不是錯誤資訊。因為後者會使得對映
被非正常終止。

Amiga 上支援 AUX: 裝置。

==============================================================================
6. 命令列引數					*cmdline-arguments*

不同版本的 Vi 有不同的命令列引數。這會引起混亂。為了幫助你，本節給出這些差別的
概述。

這裡考慮五個 Vi 的不同版本:
	Elvis	Elvis 2.1b 版本
	Nvi	Nvi 1.79 版本
	Posix	Posix 1003.2
	Vi	Vi 3.7 版本 (Sun 4.1.x 版本)
	Vile	Vile 7.4 版本 (不完整)
	Vim	Vim 5.2 版本

只有 Vim 支援在檔名之間和之後接受選項。

+{command}	Elvis、Nvi、Posix、Vi、Vim: 和 "-c {command}" 相同。

-		Nvi、Posix、Vi: 在批處理模式下執行 Ex。
		Vim: 從標準輸入讀取檔案 (批處理模式用 -s)。

--		Vim: 選項結束，其後的全被解釋為檔名。

--cmd {command}	Vim: 在執行 vimrc 檔案前執行 {command} 命令。

--echo-wid	Vim: GTK+ 在標準輸出回顯視窗 ID。

--help		Vim: 顯示幫助資訊並退出。

--literal	Vim: 按本義接受檔名，不擴充套件萬用字元。

--nofork	Vim: 和 |-f| 相同。

--noplugin[s]	Vim: 跳過外掛的載入。

--remote	Vim: 在另外一個 Vim 伺服器編輯檔案

--remote-expr {expr}	Vim: 在另外一個 Vim 伺服器執行 {expr}

--remote-send {keys}	Vim: 傳送鍵序列 {keys} 到 Vim 伺服器並退出

--remote-silent {file}	Vim: 如有可能，在另外一個 Vim 伺服器編輯檔案

--remote-wait	Vim: 在另外一個 Vim 伺服器編輯檔案，並等待之

--remote-wait-silent	Vim: 和 --remote-wait 類似，但如果不可能不會抱怨

--role {role}	Vim: GTK+ 2: 設定主視窗的角色

--serverlist	Vim: 輸出 Vim 伺服器的列表並退出

--servername {name}	Vim: 指定 Vim 伺服器名

--socketid {id}		Vim: 執行 Vim 的 GTK 視窗套接字

--windowid {id}		Vim: 執行 Vim 的 Win32 視窗號

--version	Vim: 顯示版本資訊並退出。

-?		Vile: 顯示使用小結並退出。

-a		Elvis: 同一個視窗載入所有指定的檔案 (Vim 使用 -o)。

-A		Vim: 以阿拉伯模式啟動 (如果編譯時加入阿拉伯語功能)。

-b {blksize}	Elvis: 會話檔案使用 {blksize} 塊大小。
-b		Vim: 置位 'binary' 模式。

-C		Vim: 相容模式。

-c {command}	Elvis、Nvi、Posix、Vim: 在載入編輯緩衝區後，執行 Ex 命令
		{command}。
		Vim: 允許至多 10 個 "-c" 引數

-d {device}	Vim: 使用 {device} 作為 I/O (僅限於 Amiga)。{僅當編譯時加入
		|+diff| 特性才有效}
-d		Vim: 開始時置位 'diff'。|vimdiff|

-dev {device}	Vim: 使用 {device} 作為 I/O (僅限於 Amiga)。

-D		Vim: 除錯模式。

-e		Elvis、Nvi、Vim: 以 Ex 模式啟動，就像可執行程式叫 "ex" 那樣。

-E		Vim: 以改進的 Ex 模式啟動 |gQ|，就像 "exim" 那樣。

-f		Vim: 在前臺執行 GUI (Amiga: 不開啟新視窗)。
-f {session}	Elvis: 使用 {session} 作為會話檔案。

-F		Vim: 以波斯語模式啟動 (如果編譯時加入波斯語功能)。
		Nvi: 快速啟動，編輯開始時不讀入整個檔案。

-G {gui}	Elvis: 使用 {gui} 作為使用者介面。

-g		Vim: 啟動 GUI。
-g N		Vile: 開始編輯第 N 行

-h		Vim: 給出幫助訊息。
		Vile: 編輯幫助檔案

-H		Vim: 以希伯來語模式啟動 (如果編譯時加入該功能的話)。

-i		Elvis: 以插入模式開始編輯每個視窗。
-i {viminfo}	Vim: 使用 {viminfo} 作為 viminfo 檔案。

-L		Vim: 和 "-r" 相同 (也在某些 Vi 版本里存在)。

-l		Nvi、Vi、Vim: 置位 'lisp' 和 'showmatch' 選項。

-m		Vim: 修改不允許被寫入，復位 'write' 選項。

-M		Vim: 不允許修改，復位 'modifiable' 和 'write' 選項。

-N		Vim: 非相容模式。

-n		Vim: 不用交換檔案。

-nb[args]	Vim: 開啟一個 NetBeans 介面連線

-O[N]		Vim: 和 -o 類似，但使用垂直分割的視窗。

-o[N]		Vim: 開啟 [N] 個視窗，或者每個檔案一個。

-p[N]		Vim: 開啟 [N] 個標籤頁，或者每個檔案一個。

-P {parent-title} Win32 Vim: 在父應用視窗內部開啟 Vim

-q {name}	Vim: 使用 quickfix 錯誤檔案 {name}。
-q{name}	Vim: 同上。

-R		Elvis、Nvi、Posix、Vile、Vim: 置位 'readonly' 選項。

-r		Elvis、Nvi、Posix、Vi、Vim: 恢復模式。

-S		Nvi: 置位 'secure' 選項。
-S {script}	Vim: 在啟動後執行 script 指令碼。

-s		Nvi、Posix、Vim: 在 Ex 模式時，和 "-" 相同 (安靜模式)。
		Elvis: 置位 'safer' 選項。
-s {scriptin}	Vim: 讀入 {scriptin} 指令碼檔案；只有在非 Ex 模式下才有效。
-s {pattern}	Vile: 搜尋 {pattern}

-t {tag}	Elvis、Nvi、Posix、Vi、Vim: 編輯包含 {tag} 的檔案。
-t{tag}		Vim: 同上。

-T {term}	Vim: 設定終端名為 {term}。

-u {vimrc}	Vim: 從 {vimrc} 檔案讀入初始化設定。

-U {gvimrc}	Vim: 從 {gvimrc} 檔案讀入 GUI 初始化設定。

-v		Nvi、Posix、Vi、Vim: 以普通模式啟動 (Vi 的術語是可視模式
		(Visual))。
		Vile: 閱讀模式，不允許修改。

-V		Elvis、Vim: 詳細模式。
-V{nr}		Vim: 指定特定級別的詳細模式。

-w {size}	Elvis、Posix、Nvi、Vi、Vim: 設定 'window' 的值為 {size}。
-w{size}	Nvi、Vi: 和 "-w {size}" 相同。
-w {name}	Vim: 寫入指令碼檔案 {name} (必須以非數值字元啟動)。

-W {name}	Vim: 附加到指令碼檔案 {name} 裡。

-x		Vi、Vim: 要求輸入加密金鑰。見 |encryption|。

-X		Vim: 不連線到 X 伺服器。

-y		Vim: 以簡易模式啟動，類似於 |evim|。

-Z		Vim: 受限模式

@{cmdfile}	Vile: 使用 {cmdfile} 作為啟動檔案。

==============================================================================
7. POSIX 相容性					*posix* *posix-compliance*

2005 年，運行了 POSIX 測試包以對 Vim 的相容性進行了檢查。大多數測試都能正確執
行。有一些行為 Vim 和 POSIX 不相容，即使運行於 Vi 相容模式也是如此。
							*$VIM_POSIX*
Vim 啟動時設定 $VIM_POSIX 環境變數會使得 'cpoptions' 包含 POSIX 的標誌位。這使
Vim 儘可能地照 POSIX 方式執行。這和 Vi 相容模式稍有不同。

這裡是 Vim 和 POSIX 指定行為不同之處以及原因:

							*posix-screen-size*
	如果終端獲得的螢幕大小資訊更加可靠，Vim 忽略 $COLUMNS 和 $LINES 環境變
	量。在 'cpoptions' 里加入 '|' 標誌位使 $COLUMNS 和 $LINES 可以否決另一
	種方式獲得的大小。

	在原來的 Vi 上，"{" 和 "}" 命令不停在 "{" 上，但 POSIX 指定應該如此。
	如果你希望 POSIX 方式，在 'cpoptions' 里加入 '{' 標誌位。

	"D"、"o" 和 "O" 命令接受計數，它們被重複時也是如此。
	如果你希望忽略計數，在 'cpoptions' 里加入 '#' 標誌位。

	如果 'cpoptions' 里加入 '.' 標誌位，那麼當前緩衝區被修改時 ":cd" 命令
	失敗。

	如果 'shortmess' 里加入 "A" 標誌位，沒有 ATTENTION 訊息。

以下是執行 POSIX 測試包相關的評註:
- vi 測試 33 有時因為不明原因失敗
- vi 測試 250 失敗；新版本的行為會有改變
    http://www.opengroup.org/austin/mailarchives/ag-review/msg01710.html
    (連結不再有效，或許現在應是:
    https://www.opengroup.org/sophocles/show_mail.tpl?CALLER=show_archive.tpl&source=L&listname=austin-review-l&id=1711)
- vi 測試 310 失敗；任何錯誤出現時返回程式碼必須非零？
- ex 測試 24 失敗，因為測試有問題。SUSv2 和 SUSv3 之間已修改。
- ex 測試 47、48、49、72、73 失敗，因為安靜模式下不讀入 .exrc 檔案也不使用
  $EXINIT。
- ex 測試 76、78 失敗，因為使用 echo 代替了 printf。(已修正)
    另: \s 沒有被換成空格的問題。
- ex 測試 355 失敗，因為 'window' 不在 "30z" 裡應用。
- ex 測試 368 失敗，因為外殼命令在安靜模式下不回顯。
- ex 測試 394 失敗，因為 "=" 命令輸出在安靜模式下不可見。
- ex 測試 411 失敗，因為測試檔案不正確，包含了多餘的 ':'。
- ex 測試 475 和 476 失敗，因為 reprint 輸出在安靜模式下不可見。
- ex 測試 480 和 481 失敗，因為標籤檔案使用空格而不是製表。
- ex 測試 502 失敗，因為安靜模式下不讀入 .exrc。
- ex 測試 509 失敗，因為安靜模式下不讀入 .exrc。而且退出程式碼是 1 而不是 2。
- ex 測試 534 失敗，因為安靜模式下不讀入 .exrc。


 vim:tw=78:ts=8:ft=help:norl:
