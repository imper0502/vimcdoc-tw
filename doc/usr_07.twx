*usr_07.txt*	For Vim version 8.0.  最近更新: 2005年3月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: Nek_in http://vimcdoc.sf.net

			  編輯多個檔案


無論你有多少個檔案，你都可以同時編輯它們而不需要退出 Vim。本章介紹如何定義一個
檔案列表，並基於這個列表工作，或者從一個檔案跳轉到另一個檔案，又或者從一個檔案
中拷貝文字，並寫入到另一個檔案中。

|07.1|	編輯另一個檔案
|07.2|	檔案列表
|07.3|	從一個檔案中跳到另一個檔案
|07.4|	備份檔案
|07.5|	檔案間拷貝
|07.6|	顯示檔案
|07.7|	修改檔名

     下一章: |usr_08.txt|  分割視窗
     前一章: |usr_06.txt|  使用語法高亮
       目錄: |usr_toc.txt|

==============================================================================
*07.1*	編輯另一個檔案

在本章前，你都是為每一個檔案啟動一次 Vim 的。實際上還有其它辦法。如下命令就可
以在 Vim 中開啟另一個檔案: >

	:edit foo.txt

你可以用任何其它檔名取代上面的 "foo.txt"。Vim 會關閉當前檔案並開啟另一個。但
如果當前檔案被修改過而沒有存檔， Vim 會顯示錯誤資訊而不會開啟這個新檔案:

	E37: No write since last change (use ! to override) ~

	(譯者注: 在中文狀態下顯示:

	E37: 已修改但尚未儲存 (可用 ! 強制執行) ~

	)

	備註:
	Vim 在每個錯誤資訊的前面都放了一個錯誤號。如果你不明白錯誤資訊的意思，
	可以從幫助系統中獲得更詳細的說明。對本例而言: >

		:help E37

出現上面的情況，你有多個解決方案。首先你可以通過如下命令儲存當前檔案: >

	:write

或者，你可以強制 Vim 放棄當前修改並編輯新的檔案。這時應該使用強制修飾符 ! :
>
	:edit! foo.txt

如果你想編輯另一個檔案，但又不想馬上儲存當前檔案，可以隱藏它:
>
	:hide edit foo.txt

原來的檔案還在那裡，只不過你看不見。這將在 "|22.4|: 緩衝區列表" 中解釋。

==============================================================================
*07.2*	檔案列表

你可以在啟動 Vim 的時候指定一堆檔案。例如:
>
	vim one.c two.c three.c

這個命令啟動 Vim 並告訴它你要編輯三個檔案。Vim 只顯示第一個。等你編輯完第一個
以後，用如下命令可以編輯第二個:
>
	:next

如果你在當前檔案中有未儲存的修改，你會得到一個錯誤資訊而無法編輯下一個檔案。這
個問題與前一節執行 ":edit" 命令的問題相同。要放棄當前修改:
>
	:next!

但大多數情況下，你需要儲存當前檔案再進入下一個。這裡有一個特殊的命令:
>
	:wnext

這相當於執行了兩個命令:
>
	:write
	:next


我 在 哪？

要知道當前檔案在檔案列表中的位置，可以注意一下檔案的標題。那裡應該顯示類似
"(2 of 3)" 的字樣。這表示你正在編輯三個檔案中的第二個。
    如果你要檢視整個檔案列表，使用如下命令:
>
	:args

這是 "arguments" (引數) 的縮寫。其輸出應該象下面這樣:

	one.c [two.c] three.c ~

這裡列出所有你啟動 Vim 時指定的檔案。你正在編輯的那一個，例如，"two.c"，會用中
括號括起。


移 動 到 另 一 個 參 數

要回到前一個檔案:
>
	:previous

這個命令與 ":next" 相似，只不過它是向相反的方向移動。同樣地，這個命令有一個快
捷版本用於 "儲存再移動":
>
	:wprevious

要移動到列表中的最後一個檔案:
>
	:last

而要移動到列表中的第一個檔案:
>
	:first

不過，可沒有 ":wlast" 或者 "wfirst" 這樣的命令了。

你可以在 ":next" 和 ":previous" 前面加計數字首。例如要向後跳兩個檔案:
>
	:2next


自 動 保 存

當你在多個檔案間跳來跳去進行修改，你要老記著用 ":write" 儲存檔案。否則你就會得
到一個錯誤資訊。 如果你能確定你每次都會將修改存檔的話，你可以讓 Vim 自動儲存文
件:
>
	:set autowrite

如果你編輯一個你不想自動儲存的檔案，你可以把功能關閉:
>
	:set noautowrite


編 輯 另 一 個 文 件 列 表

你可以編輯另一個檔案列表而不需要退出 Vim。用如下命令編輯另三個檔案:
>
	:args five.c six.c seven.h

或者使用萬用字元，就像在控制檯上一樣:
>
	:args *.txt

Vim 會跳轉到列表中的第一個檔案。同樣地，如果當前檔案沒有儲存，你需要儲存它，或
者使用 ":args!" (加了一個 !) 放棄修改。


你 編 輯 了 最 後 一 個 文 件 嗎？
							*arglist-quit*
當你使用了檔案列表，Vim 假定你想編輯全部檔案，為了防止你提前退出，如果你還沒有
編輯過最後一個檔案。當你退出的時候，Vim 會給如下錯誤資訊:
>
	E173: 46 more files to edit

如果你確實需要退出，再執行一次這個命令就行了 (但如果在兩個命令間還執行了其它命
令就無效了)。

==============================================================================
*07.3*	從一個檔案跳到另一個檔案

要在兩個檔案間快速跳轉，按 CTRL-^ (美式英語鍵盤中 ^ 6 的上面)。例如:
>
	:args one.c two.c three.c

現在你在 one.c。
>
	:next

現在你在 two.c。現在使用 CTRL-^ 回到 one.c。再按一下 CTRL-^ 則回到 two.c。又按
一下 CTRL-^ 你再回到 one.c。如果你現在執行:
>
	:next

現在你在 three.c。注意 CTRL-^ 不會改變你在檔案列表中的位置。只有 ":next" 和
":previous" 才能做到這點。

你編輯的前一個檔案稱為 "輪換" 檔案。如果你啟動 Vim 而 CTRL-^ 不起作用，那可能
是因為你沒有輪換檔案。

預 定 義 標 記

當你跳轉到另一個檔案後，有兩個預定義的標記非常有用:
>
	`"

這個標記使你跳轉到你上次離開這個檔案時的位置。
另一個標記記住你最後一次修改檔案的位置:
>
	`.

假設你在編輯 "one.txt"，在檔案中間某個地方你用 "x" 刪除一個字元，接著用 "G" 命
令移到檔案末尾，然後用 "w" 存檔。然後你又編輯了其它幾個檔案。你現在用 ":edit
one.txt" 回到 "one.txt"。如果現在你用 `"，Vim 會跳轉到檔案的最後一行；而用 `.
則跳轉到你刪除字元的地方。即使你在檔案中移動過，但在你修改或者離開檔案前，這兩
個標記都不會改變。


文 件 標 記

在第四章，我們介紹過使用 "mx" 命令在檔案中增加標記，那隻在一個檔案中有效。如果
你編輯另一個檔案並在那裡加了標記，這些標記都是這個檔案專用的。這樣，每個檔案都
有一個自己的標記集，並只能在該檔案中使用。
    到此為止，我們都用小寫字母的標記。實際上還可以使用大寫字母標記，這種標記是
全域性的，它們可以在任何檔案中使用。例如，你在編輯一個檔案 "foo.txt"。在檔案的中
間 (50%) 並建立一個 J 標記 (J 表示甲):
>
	50%mJ

現在編輯檔案 "bar.txt" 並在檔案的最後一行放一個標記 Y (Y 表示乙):
>
	GmY

現在你可以使用 "`J" 命令跳回到 foo.txt 的中間。或者在另一個檔案中輸入 "`Y" 跳
回到 bar.txt 的末尾。

檔案標記會被一直記住直到被重新定義。這樣，你可以在一個檔案中留下一個標記，然後
任意做一段時間的編輯，最後用這個標記跳回去。
    讓檔案標記符和對應的位置建立一些關係常常是很有用的。例如，用 H 表示標頭檔案
(Head File)，M 表示 Makefile 而 C 表示 C 的程式碼檔案。

要知道一個標記在什麼地方，在 ":marks" 命令中加上標記名作為引數即可:
>
	:marks M

你還可以帶多個引數:
>
	:marks MCP

別忘了你還可以 CTRL-O 和 CTRL-I 在整個跳轉序列中前後跳轉。

==============================================================================
*07.4*	備份檔案

通常 Vim 不會產生備份檔案。如果你希望的話，執行如下命令就可以了:
>
	:set backup

備份檔案的檔名是在原始檔案的後面加上一個 ~ 。如果你的檔名是 data.txt，則備
份檔案的檔名就是 data.txt~ 。
    如果你不喜歡這個名字，你可以修改副檔名:
>
	:set backupext=.bak

這會使用 data.txt.bak 而非 data.txt~。
    還有一個相關選項是 'backupdir'。它指定備份檔案的目錄。預設情況是與原始檔案
的路徑一致，這在很多情況下都是合適的。

	備註:
	如果 'backup' 選項沒有置位而 'writebackup' 選項置了位，Vim 還是會建立
	備份檔案的。但在檔案編輯完後，這個備份檔案會被自動刪除。這個功能用於避
	免發生異常情況導致沒有存檔 (磁碟滿是最常見的情況；被雷擊也是一種情況，
	不過很少發生)。


保 留 原 始 文 件

如果你在編輯源程式，你可能想在修改之前保留一個備份。但備份檔案會在你存檔的時候
被覆蓋。這樣它只能保留前一個版本，而不是最早的檔案。
    要讓 Vim 儲存一個原始的檔案，可以設定 'patchmode' 選項。這個選項定義需要改
動檔案的第一個備份檔案的副檔名。通常可以這樣設:
>
	:set patchmode=.orig

這樣，當你第一次編輯 data.txt，作了修改並執行存檔，Vim 會保留一個名為
"data.txt.orig" 的原始檔案。
    如果你接著修改這個檔案，Vim 會發現這個原始檔案已經存在，並不再覆蓋它。進一
步的備份就存在 "data.txt~" (或者你設定的 'backupext' 指定的檔案) 中。
    如果你讓 'patchmode' 設為空 (這是預設的情況)，則原始檔案不會被保留。

==============================================================================
*07.5*	檔案間拷貝文字

本節解釋如何在檔案間拷貝文字。我們從一個簡單的例子開始。編輯一個你要拷貝文字的
檔案，把游標移到要拷貝的文字的開始處，用 "v" 命令啟動可視模式，然後把游標移到
要拷貝文字的結尾處，輸入 "y" 拷貝文字。
    例如，要拷貝上面這段文字，你可以執行:
>
	:edit thisfile
	/本節解釋
	vjjj$y

現在編輯你要貼上文字的檔案。把游標移到你要插入文字的地方。用 "p" 命令把文字粘
貼到那裡:
>
	:edit otherfile
	/There
	p

當然，你可以用任何命令拷貝文字。例如，用 "V" 命令選中整行的內容。或者用 CTRL-V
選擇一個矩形列塊。或者使用 "Y" 拷貝一個單行，"yaw" 拷貝一個單詞等。
    "p" 命令把文字貼上到游標之後，"P" 命令則貼上到游標之前。注意， Vim 會記住
你拷貝的是一整行還是一個列塊，並用相同的方式把文字貼出來。


使 用 寄 存 器

當你需要拷貝一個檔案的幾個地方到另一個檔案，用上面的方法，你就得反覆在兩個檔案
間跳來跳去。要避免這種情況，你可以把不同的文字拷貝到不同的暫存器中。
    暫存器是 Vim 用來儲存文字的地方。這裡我們使用名稱為 a 到 z 的暫存器 (後面
我們會發現還有其它暫存器)。讓我們拷貝一個句子到 f 暫存器 (f 表示 First):
>
	"fyas

"yas" 命令象以前說過的那樣拷貝一個句子，而 "f 告訴 Vim 把文字拷貝到暫存器 f 。
這必須放在拷貝命令的前面。
    現在，拷貝三個整行到暫存器 l (l 表示 line):
>
	"l3Y

計數字首也可以用在 "l 的前面。要拷貝一個文字列塊到暫存器 b (代表 block) 中:
>
	CTRL-Vjjww"by

注意 "b 正好在 "y" 命令的前面，這是必須的。把它放在 "w" 命令的前面就不行。
    現在你有了在暫存器 f，l 和 b 有三段文字。編輯另一個檔案，並移到要插入文字
的地方:
>
	"fp

同樣地，暫存器識別符號 "f 必須在 "p" 命令的前面。
    你可以用任何順序貼上暫存器的內容。並且，這些內容一直存在於暫存器中，直到你
拷貝其它檔案到這個暫存器中。這樣，你可以貼上任意多次。

    刪除文字的時候，你也可以指定暫存器。使用這個方法可以移動幾處文字。例如，要
刪除一個單詞並寫到 w 暫存器中:
>
	"wdaw

同樣地，暫存器識別符號必須在刪除命令 "d" 的前面。


添 加 到 文 件

當你要在幾個檔案中收集文字，你可以用這個命令:
>
	:write >> logfile

這個命令將文字寫入到檔案的末尾。這樣實現了檔案新增功能。這樣使你免去了拷貝，編
輯和拷貝的過程，省了兩步。但你只能加到目標檔案的末尾。
    要只拷貝一部分內容，可以先用可視模式選中這些內容後在執行 ":write"。在第 10
章，你將學會選中一個行範圍的辦法。

==============================================================================
*07.6*	顯示檔案

有時，你只是想檢視一個檔案，而沒打算修改它。有一個風險是你想都沒想就輸入了一個
"w" 命令。要避免這個問題，以只讀模式編輯這個檔案。
    要用只讀模式啟動 Vim，可以使用這個命令:
>
	vim -R file

在 Unix，如下命令可以完成相同的功能:
>
	view file

現在，你就在用只讀模式閱讀這個檔案 "file" 了。但你執行 ":w" 命令的時候，你會得
到一個禁止寫入的錯誤資訊。
    當你試圖修改這個檔案時，Vim 會給你一個告警提示:

	W10: Warning: Changing a readonly file ~

即使這樣，你的修改還是會被接納的。有可能你只是想排列這些文字，以便閱讀。
    如果你確實要改動這個檔案，在 write 命令前面加上 ! 可以強制寫入。

如果你的確想禁止檔案修改，用這個命令:
>
	vim -M file

現在任何對檔案的修改操作都會失敗。例如，幫助檔案就是這樣的。如果你要在上面作修
改，你會得到一個錯誤提示:

	E21: Cannot make changes, 'modifiable' is off ~

你可以設定 -M 引數使 Vim 工作在只讀模式。這個方式仍然取決於使用者的意願，因為你
可以用下面的命令去掉這層保護:
>
	:set modifiable
	:set write
<
==============================================================================
*07.7*	修改檔名

編輯一個新檔案的一個比較聰明的做法是使用一個現存的、其中大部分內容你都需要的文
件。例如，你要寫一個移動檔案的程式，而你已經有一個用於拷貝的程式了，這樣可以這
樣開始:
>
	:edit copy.c

刪除你不要的東西。現在你需要用一個新的檔名儲存這個檔案。":saveas" 命令就是為
此設計的:
>
	:saveas move.c

Vim 會用給定的名稱儲存檔案，並開始編輯該檔案。這樣，下次你用 ":write"，寫入的
時候，被寫入的就是 "move.c"。而 "copy.c" 不會被改變。
    當你想改變當前檔案的檔名，但不想立即儲存它，用這個命令:
>
	:file move.c

Vim 會把這個檔案標記為 "未編輯"。這表示 Vim 知道你現在編輯的檔案不是原來那個文
件了。當你寫這個檔案的時候，你會得到如下錯誤資訊:

	E13: File exists (use ! to override) ~

這可以避免你不小心覆蓋另一個檔案。

==============================================================================

下一章: |usr_08.txt|  分割視窗

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
