*index.txt*     For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net

								*index*
本檔案包含各個模式下的所有命令的一個列表。包含它們的標籤和簡單說明。列表以
ASCII 值排序。

提示: 要找特定功能，使用搜索命令。例如，要找尋如何刪除，使用: "/刪除"。

1. 插入模式				|insert-index|
2. 普通模式				|normal-index|
   2.1. 文字物件			|objects|
   2.2. 視窗命令			|CTRL-W|
   2.3. 方括號命令			|[|
   2.4. 'g' 開頭的命令			|g|
   2.5. 'z' 開頭的命令			|z|
3. 可視模式				|visual-index|
4. 命令列編輯				|ex-edit-index|
5. EX 命令				|ex-cmd-index|

選項總覽可見 help.txt |option-list|。
內建函式總覽可見 |functions|。
Vim 變數的列表可見 |vim-variable|。
幫助專案的完整列表可見 |help-tags|。

==============================================================================
1. 插入模式						*insert-index*

標籤		字元		插入模式動作~
-----------------------------------------------------------------------
|i_CTRL-@|	CTRL-@		插入最近插入的文字並停止插入
|i_CTRL-A|	CTRL-A		插入最近插入的文字
		CTRL-B		不用 |i_CTRL-B-gone|
|i_CTRL-C|	CTRL-C		退出插入模式，不檢查縮寫，除非置位了
				'insertmode'。
|i_CTRL-D|	CTRL-D		在當前行刪除一個 shiftwidth 的縮排
|i_CTRL-E|	CTRL-E		插入游標下方的字元
		CTRL-F		不用 (但預設是 'cinkeys' 中的一項，用以重新縮
				進本行)
|i_CTRL-G_j|	CTRL-G CTRL-J	往下一行，到插入開始的列
|i_CTRL-G_j|	CTRL-G j	往下一行，到插入開始的列
|i_CTRL-G_j|	CTRL-G <Down>	往下一行，到插入開始的列
|i_CTRL-G_k|	CTRL-G CTRL-K	往上一行，到插入開始的列
|i_CTRL-G_k|	CTRL-G k	往上一行，到插入開始的列
|i_CTRL-G_k|	CTRL-G <Up>	往上一行，到插入開始的列
|i_CTRL-G_u|	CTRL-G u	開始新的可撤銷的編輯
|i_CTRL-G_U|	CTRL-G U	下一個游標移動不破壞撤銷
|i_<BS>|	<BS>		刪除游標前的字元
|i_digraph|	{char1}<BS>{char2}
				輸入二合字母 (只有打開了 'digraph' 選項才有效)
|i_CTRL-H|	CTRL-H		等同於 <BS>
|i_<Tab>|	<Tab>		插入 <Tab> 字元
|i_CTRL-I|	CTRL-I		等同於 <Tab>
|i_<NL>|	<NL>		等同於 <CR>
|i_CTRL-J|	CTRL-J		等同於 <CR>
|i_CTRL-K|	CTRL-K {char1} {char2}
				輸入二合字母
|i_CTRL-L|	CTRL-L		'insertmode' 開啟時: 離開插入模式
|i_<CR>|	<CR>		開始新行
|i_CTRL-M|	CTRL-M		等同於 <CR>
|i_CTRL-N|	CTRL-N		查詢游標前面的關鍵字的下一個匹配
|i_CTRL-O|	CTRL-O		執行單個命令然後回到插入模式
|i_CTRL-P|	CTRL-P		查詢游標前面的關鍵字的前一個匹配
|i_CTRL-Q|	CTRL-Q		等同於 CTRL-V，除非它用於終端控制流
|i_CTRL-R|	CTRL-R {0-9a-z"%#*:=}
				插入暫存器內容
|i_CTRL-R_CTRL-R| CTRL-R CTRL-R {0-9a-z"%#*:=}
				按本義插入暫存器內容
|i_CTRL-R_CTRL-O| CTRL-R CTRL-O {0-9a-z"%#*:=}
				按本義插入暫存器內容，而且不自動縮排
|i_CTRL-R_CTRL-P| CTRL-R CTRL-P {0-9a-z"%#*:=}
				按本義插入暫存器內容，而且修正縮排
		CTRL-S		(用於終端控制流)
|i_CTRL-T|	CTRL-T		在當前行插入一個 shiftwidth 的縮排
|i_CTRL-U|	CTRL-U		刪除當前行的所有輸入字元
|i_CTRL-V|	CTRL-V {char}	按本義插入下一個非數字字元
|i_CTRL-V_digit| CTRL-V {number} 插入三位十進位制數字代表的單個位元組。
|i_CTRL-W|	CTRL-W		刪除游標前的單詞
|i_CTRL-X|	CTRL-X {mode}	進入 CTRL-X 子模式，見 |i_CTRL-X_index|
|i_CTRL-Y|	CTRL-Y		插入游標上方的字元
|i_CTRL-Z|	CTRL-Z		'insertmode' 開啟時: 暫停 Vim
|i_<Esc>|	<Esc>		結束插入模式 (除非打開了 'insertmode')
|i_CTRL-[|	CTRL-[		等同於 <Esc>
|i_CTRL-\_CTRL-N| CTRL-\ CTRL-N	進入普通模式
|i_CTRL-\_CTRL-G| CTRL-\ CTRL-G	進入 'insertmode' 指定的模式
		CTRL-\ a - z	保留給擴充套件用
		CTRL-\ others	不用
|i_CTRL-]|	CTRL-]		切換縮寫
|i_CTRL-^|	CTRL-^		切換 |:lmap| 對映的使用
|i_CTRL-_|	CTRL-_		'allowrevins' 開啟時: 改變語言
				(希伯來語，波斯語等) {僅當編譯時加入
				|+rightleft| 特性才有效}

		<Space> to '~'	不用，除了 CTRL-D 之前的 '0' 和 '^'

|i_0_CTRL-D|	0 CTRL-D	刪除當前行的所有縮排
|i_^_CTRL-D|	^ CTRL-D	刪除當前行的所有縮排，在下一行恢復刪除的縮排

|i_<Del>|	<Del>		刪除游標所在的字元

		Meta 字元 (0x80 到 0xff，128 到 255)
				不用

|i_<Left>|	<Left>		游標左移一個字元
|i_<S-Left>|	<S-Left>	游標左移一個單詞
|i_<C-Left>|	<C-Left>	游標左移一個單詞
|i_<Right>|	<Right>		游標右移一個字元
|i_<S-Right>|	<S-Right>	游標右移一個單詞
|i_<C-Right>|	<C-Right>	游標右移一個單詞
|i_<Up>|	<Up>		游標上移一行
|i_<S-Up>|	<S-Up>		等同於 <PageUp>
|i_<Down>|	<Down>		游標下移一行
|i_<S-Down>|	<S-Down>	等同於 <PageDown>
|i_<Home>|	<Home>		游標移到行首
|i_<C-Home>|	<C-Home>	游標移到檔案首
|i_<End>|	<End>		游標移到行尾後面
|i_<C-End>|	<C-End>		游標移到檔案尾後面
|i_<PageUp>|	<PageUp>	滿屏上滾
|i_<PageDown>|	<PageDown>	滿屏下滾
|i_<F1>|	<F1>		等同於 <Help>
|i_<Help>|	<Help>		停止插入模式顯示幫助視窗
|i_<Insert>|	<Insert>	切換插入/替換模式
|i_<LeftMouse>|	<LeftMouse>	游標移到滑鼠點選處
|i_<ScrollWheelDown>|	<ScrollWheelDown>	視窗向下滾動三行
|i_<S-ScrollWheelDown>|	<S-ScrollWheelDown>	視窗向下滾動完整一頁
|i_<ScrollWheelUp>|	<ScrollWheelUp>		視窗向上滾動三行
|i_<S-ScrollWheelUp>|	<S-ScrollWheelUp>	視窗向上滾動完整一頁
|i_<ScrollWheelLeft>|	<ScrollWheelLeft>	視窗向左滾動六列
|i_<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	視窗向左滾動完整一頁
|i_<ScrollWheelRight>|	<ScrollWheelRight>	視窗向右滾動六列
|i_<S-ScrollWheelRight>| <S-ScrollWheelRight>	視窗向右滾動完整一頁

CTRL-X 子模式的命令					*i_CTRL-X_index*

|i_CTRL-X_CTRL-D|	CTRL-X CTRL-D	補全定義過的識別符號
|i_CTRL-X_CTRL-E|	CTRL-X CTRL-E	上滾
|i_CTRL-X_CTRL-F|	CTRL-X CTRL-F	補全檔名
|i_CTRL-X_CTRL-I|	CTRL-X CTRL-I	補全識別符號
|i_CTRL-X_CTRL-K|	CTRL-X CTRL-K	從字典補全識別符號
|i_CTRL-X_CTRL-L|	CTRL-X CTRL-L	補全完整的行
|i_CTRL-X_CTRL-N|	CTRL-X CTRL-N	下一個補全
|i_CTRL-X_CTRL-O|	CTRL-X CTRL-O	全能 (omni) 補全
|i_CTRL-X_CTRL-P|	CTRL-X CTRL-P	上一個補全
|i_CTRL-X_CTRL-S|	CTRL-X CTRL-S	拼寫建議
|i_CTRL-X_CTRL-T|	CTRL-X CTRL-T	從同義詞詞典補全識別符號
|i_CTRL-X_CTRL-U|	CTRL-X CTRL-U	用 'completefunc' 補全
|i_CTRL-X_CTRL-V|	CTRL-X CTRL-V	如同 : 命令列那樣補全
|i_CTRL-X_CTRL-Y|	CTRL-X CTRL-Y	下滾
|i_CTRL-X_CTRL-]|	CTRL-X CTRL-]	補全標籤
|i_CTRL-X_s|		CTRL-X s	拼寫建議
{僅當編譯時加入 |+insert_expand| 特性才有效}

==============================================================================
2. 普通模式						*normal-index*

CHAR	 任何非空白字元
WORD	 非空白字元的序列 (字串)
N	 命令前輸入的數值
{motion} 游標移動命令
Nmove	 {motion} 移動經過的文字
SECTION	 可能以 '}' 而不是 '{' 開始的小節

備註: 1 = 游標移動命令；2 = 可以撤消/重做

標籤		字元	      備註 普通模式的動作	~
------------------------------------------------------------------------------
		CTRL-@		   不用
|CTRL-A|	CTRL-A		2  把 N 加到游標所在/之後的數值上
|CTRL-B|	CTRL-B		1  反向 (Back) 滾動 N 屏
|CTRL-C|	CTRL-C		   終止當前的 (搜尋) 命令
|CTRL-D|	CTRL-D		   向下 (Down) 滾動 N 行 (預設: 半屏)
|CTRL-E|	CTRL-E		   向上滾動 N 行 (附加 (Extra) N 行)
|CTRL-F|	CTRL-F		1  向前 (Forward) 滾動 N 屏
|CTRL-G|	CTRL-G		   顯示當前檔名和位置
|<BS>|		<BS>		1  等同於 "h"
|CTRL-H|	CTRL-H		1  等同於 "h"
|<Tab>|		<Tab>		1  跳轉到跳轉表裡第 N 個較新的專案
|CTRL-I|	CTRL-I		1  等同於 <Tab>
|<NL>|		<NL>		1  等同於 "j"
|CTRL-J|	CTRL-J		1  等同於 "j"
		CTRL-K		   不用
|CTRL-L|	CTRL-L		   重畫螢幕
|<CR>|		<CR>		1  游標移到 N 行下面的第一個 CHAR
|CTRL-M|	CTRL-M		1  等同於 <CR>
|CTRL-N|	CTRL-N		1  等同於 "j"
|CTRL-O|	CTRL-O		1  跳轉到跳轉表裡第 N 個較舊的專案
|CTRL-P|	CTRL-P		1  等同於 "k"
		CTRL-Q		   (用於終端控制流)
|CTRL-R|	CTRL-R		2  重做 'u' 撤消的改變
		CTRL-S		   (用於終端控制流)
|CTRL-T|	CTRL-T		   跳轉到標籤列表的第 N 個較老的標籤 (Tag)
|CTRL-U|	CTRL-U		   上滾 (Upwards) N 行 (預設: 半屏)
|CTRL-V|	CTRL-V		   開始面向列塊的可視 (Visual) 模式
|CTRL-W|	CTRL-W {char}	   視窗命令，見 |CTRL-W|
|CTRL-X|	CTRL-X		2  從游標所在/之後的數值上減去 N
|CTRL-Y|	CTRL-Y		   下滾 N 行
|CTRL-Z|	CTRL-Z		   暫停程式 (或者啟動新的外殼)
		CTRL-[ <Esc>	   不用
|CTRL-\_CTRL-N| CTRL-\ CTRL-N	   進入普通 (Normal) 模式 (空動作)
|CTRL-\_CTRL-G| CTRL-\ CTRL-G	   進入 'insertmode' 指定的模式
		CTRL-\ a - z	   保留作擴充套件用
		CTRL-\ 其它        不用
|CTRL-]|	CTRL-]		   :ta 到游標所在的識別符號
|CTRL-^|	CTRL-^		   編輯第 N 個輪換檔案 (等價於 ":e #N")
		CTRL-_		   不用

|<Space>|	<Space>		1  等同於 "l"
|!|		!{motion}{filter}
				2  通過 {filter} 命令過濾 Nmove 文字
|!!|		!!{filter}	2  通過 {filter} 命令過濾 N 行
|quote|		"{a-zA-Z0-9.%#:-"}  指定下次刪除、抽出或放置使用的暫存器
				   {a-zA-Z0-9.%#:-"} (大寫用於新增)
				   ({.%#:} 只能用於放置)
|#|		#		1  反向搜尋第 N 次出現的游標所在的識別符號
|$|		$		1  游標移動到往下第 N 行的行尾之後
|%|		%		1  查詢本行下一個 (花/方) 括號，並轉到其匹配的
				   括號上，或者轉到匹配的註釋配對上，或者轉到
				   匹配的預處理命令上。
|N%|		{count}%	1  轉到檔案的百分之 N 的位置上
|&|		&		2  重複上次 :s
|'|		'{a-zA-Z0-9}	1  游標移動到位置標記 {a-zA-Z0-9} 所在行的第一
				   個 CHAR 上
|''|		''		1  游標移動到最近一次跳轉之前所在行的第一個
				   CHAR 上
|'(|		'(		1  游標移動到當前句子的首部所在行的第一個 CHAR
				   上
|')|		')		1  游標移動到當前句子的尾部所在行的第一個 CHAR
				   上
|'<|		'<		1  游標移動到當前緩衝區高亮區開始/曾經開始的行
				   的第一個 CHAR 上。
|'>|		'>		1  游標移動到當前緩衝區高亮區結束/曾經結束的行
				   的第一個 CHAR 上。
|'[|		'[		1  游標移動到當前緩衝區最近操作/放置的文字的首
				   部所在行的第一個 CHAR 上
|']|		']		1  游標移動到當前緩衝區最近操作/放置的文字的尾
				   部所在行的第一個 CHAR 上
|'{|		'{		1  游標移動到當前段落的首部所在行的第一個 CHAR
				   上
|'}|		'}		1  游標移動到當前段落的尾部所在行的第一個 CHAR
				   上
|(|		(		1  游標回退 N 個句子
|)|		)		1  游標前進 N 個句子
|star|		*		1  正向搜尋第 N 次出現的游標所在的識別符號
|+|		+		1  等同於 <CR>
|,|		,		1  反方向重複最近的 f、t、F 或 T N 次
|-|		-		1  游標移動到上方 N 行的第一個 CHAR 上
|.|		.		2  重複最近的改變，其計數被 N 取代
|/|		/{pattern}<CR>	1  正向搜尋第 N 次出現的 {pattern}
|/<CR>|		/<CR>		1  正向搜尋最近一次搜尋使用的 {pattern}
|count|		0		1  游標移動到本行的第一個字元上
|count|		1		   附加於命令前，給出計數
|count|		2			"
|count|		3			"
|count|		4			"
|count|		5			"
|count|		6			"
|count|		7			"
|count|		8			"
|count|		9			"
|:|		:		1  開始進入 Ex 命令
|N:|		{count}:	   開始進入 Ex 命令，給出從當前行開始到下方
				   N-1 行為止的行範圍
|;|		;		1  重複最近的 f、t、F 或 T N 次
|<|		<{motion}	2  左移 Nmove 文字行一個 'shiftwidth'
|<<|		<<		2  左移 N 行一個 'shiftwidth'
|=|		={motion}	2  通過 "indent" 過濾 Nmove 文字行
|==|		==		2  通過 "indent" 過濾 N 行
|>|		>{motion}	2  右移 Nmove 文字行一個 'shiftwidth'
|>>|		>>		2  右移 N 行一個 'shiftwidth'
|?|		?{pattern}<CR>	1  反向搜尋第 N 次出現的 {pattern}
|?<CR>|		?<CR>		1  反向搜尋最近一次搜尋使用的 {pattern}
|@|		@{a-z}		2  執行 {a-z} 暫存器的內容 N 次
|@:|		@:		   重複上次的 ":" 命令 N 次
|@@|		@@		2  重複上次的 @{a-z} N 次
|A|		A		2  在行尾附加文字 N 次
|B|		B		1  游標反向移動 N 個 WORD (字串)
|C|		["x]C		2  從游標位置到行尾部分，再加上 N-1 行進行修改
				   [到暫存器 x]；等價於 "c$"
|D|		["x]D		2  刪除位置到行尾部分，再加上 N-1 行的字元 [到
				   暫存器 x]；等價於 "d$"
|E|		E		1  游標正向移動到第 N 個 WORD 的結束處
|F|		F{char}		1  游標左移到第 N 次出現的 {char} 上
|G|		G		1  游標移動到第 N 行，預設是最後一行
|H|		H		1  游標移動到螢幕頂部開始算的第 N 行
|I|		I		2  在本行第一個 CHAR 之前插入文字 N 次
|J|		J		2  連線 (Join) N 行；預設為 2
|K|		K		   查詢游標所在的關鍵字 (Keyword)，使用
				   'keywordprg' 的定義
|L|		L		1  游標移動到螢幕底部開始算的第 N 行
|M|		M		1  游標移動到螢幕的中間一行
|N|		N		1  反方向重複最近的 '/' 或 '?' N 次
|O|		O		2  在游標上方開始一個新行，並插入文字，重複 N
				   次
|P|		["x]P		2  在游標放置文字 [到暫存器 x] N 次
|Q|		Q		   切換到 "Ex" 模式
|R|		R		2  進入替換模式: 覆蓋存在的字元，重複輸入文字
				   N-1 次
|S|		["x]S		2  刪除 N 行 [到暫存器 x] 並開始輸入；等價於
				   "cc"
|T|		T{char}		1  游標移動到左側第 N 次出現的 {char} 之前
|U|		U		2  撤消一行內所有最近的改變
|V|		V		   進入面向行的可視 (Visual) 模式
|W|		W		1  游標前移 N 個 WORD
|X|		["x]X		2  刪除游標前的 N 個字元 [到暫存器 x]
|Y|		["x]Y		   抽出 N 行 [到暫存器 x]；等價於 "yy"
|ZZ|		ZZ		   如果修改過，儲存當前檔案，然後退出
|ZQ|		ZQ		   無論如何退出當前檔案
|[|		[{char}		   方括號命令 (見下 |[|)
		\		   不用
|]|		]{char}		   方括號命令 (見下 |]|)
|^|		^		1  游標移動到本行的第一個 CHAR 上
|_|		_		1  游標移動到下方第 N - 1 行的第一個 CHAR 上
|`|		`{a-zA-Z0-9}	1  游標移動到位置標記 {a-zA-Z0-9}
|`(|		`(		1  游標移動當前句子的開始處
|`)|		`)		1  游標移動當前句子的結束處
|`<|		`<		1  游標移動高亮區域的開始處
|`>|		`>		1  游標移動高亮區域的結束處
|`[|		`[		1  游標移動最近一次操作/放置的文字的開始處
|`]|		`]		1  游標移動最近一次操作/放置的文字的結束處
|``|		``		1  游標移動最近一次跳轉的位置
|`{|		`{		1  游標移動當前段落的開始處
|`}|		`}		1  游標移動當前段落的結束處
|a|		a		2  在游標處附加文字 N 次
|b|		b		1  游標反向移動 N 個單詞
|c|		["x]c{motion}	2  刪除 Nmove 文字 [到暫存器 x] 並開始編輯
|cc|		["x]cc		2  刪除 N 行 [到暫存器 x] 並開始編輯
|d|		["x]d{motion}	2  刪除 Nmove 文字 [到暫存器 x]
|dd|		["x]dd		2  刪除 N 行 [到暫存器 x]
|do|		do		2  等同於 ":diffget"
|dp|		dp		2  等同於 ":diffput"
|e|		e		1  游標正向移動到第 N 個單詞的結束處
|f|		f{char}		1  游標右移到第 N 次出現的 {char} 上
|g|		g{char}		   擴充套件命令，見下 |g|
|h|		h		1  游標左移 N 個字元
|i|		i		2  在游標前插入文字 N 次
|j|		j		1  游標下移 N 行
|k|		k		1  游標上移 N 行
|l|		l		1  游標右移 N 個字元
|m|		m{A-Za-z}	   在游標位置處設定位置標記 {A-Za-z}
|n|		n		1  重複最近的 '/' 或 '?' N 次
|o|		o		2  在游標下方開始一個新行，並插入文字，重複 N
				   次
|p|		["x]p		2  在游標後放置文字 [從暫存器 x] N 次
|q|		q{0-9a-zA-Z"}	   記錄輸入的字元到命令暫存器 {0-9a-zA-Z"}
				   (大寫用於新增)
|q|		q		   (在記錄時) 停止記錄
|q:|		q:		   在命令列窗口裡編輯 : 命令列
|q/|		q/		   在命令列窗口裡編輯 / 命令列
|q?|		q?		   在命令列窗口裡編輯 ? 命令列
|r|		r{char}		2  用 {char} 替換 N 個字元
|s|		["x]s		2  (替換) 刪除 N 個字元 [到暫存器 x] 並開始輸
				   入
|t|		t{char}		1  游標移動到右側第 N 次出現的 {char} 之前
|u|		u		2  撤消改變
|v|		v		   開始面向字元的可視 (Visual) 模式
|w|		w		1  游標前移 N 個單詞
|x|		["x]x		2  刪除游標開始的 N 個字元 [到暫存器 x]
|y|		["x]y{motion}	   抽出 Nmove 文字 [到暫存器 x]
|yy|		["x]yy		   抽出 N 行 [到暫存器 x]
|z|		z{char}		   'z' 開始的命令，見下 |z|
|{|		{		1  游標反向移動 N 個段落
|bar|		|		1  游標移到第 N 列
|}|		}		1  游標正向移動 N 個段落
|~|		~		2  'tildeop' 關閉時: 切換游標所在處開始的 N 個
				   字元的大小寫，並右移游標 N 個字元
|~|		~{motion}	   'tildeop' 開啟時: 切換 Nmove 文字的大小寫
|<C-End>|	<C-End>		1  等同於 "G"
|<C-Home>|	<C-Home>	1  等同於 "gg"
|<C-Left>|	<C-Left>	1  等同於 "b"

|<C-LeftMouse>|	<C-LeftMouse>	   ":ta" 到滑鼠點選所在的單詞上
|<C-Right>|	<C-Right>	1  等同於 "w"
|<C-RightMouse>| <C-RightMouse>	   等同於 "CTRL-T"
|<Del>|		["x]<Del>	2  等同於 "x"
|N<Del>|	{count}<Del>	   刪除 {count} 最後的一位數字
|<Down>|	<Down>		1  等同於 "j"
|<End>|		<End>		1  等同於 "$"
|<F1>|		<F1>		   等同於 <Help>
|<Help>|	<Help>		   開啟幫助視窗
|<Home>|	<Home>		1  等同於 "0"
|<Insert>|	<Insert>	2  等同於 "i"
|<Left>|	<Left>		1  等同於 "h"
|<LeftMouse>|	<LeftMouse>	1  移動游標到滑鼠點選處
|<MiddleMouse>| <MiddleMouse>	2  等同於在滑鼠點選處 "gP"
|<PageDown>|	<PageDown>	   等同於 CTRL-F
|<PageUp>|	<PageUp>	   等同於 CTRL-B
|<Right>|	<Right>		1  等同於 "l"
|<RightMouse>|	<RightMouse>	   開始可視模式，移動游標到滑鼠點選處
|<S-Down>|	<S-Down>	1  等同於 CTRL-F
|<S-Left>|	<S-Left>	1  等同於 "b"
|<S-LeftMouse>|	<S-LeftMouse>	   等同於在滑鼠點選處 "*"
|<S-Right>|	<S-Right>	1  等同於 "w"
|<S-RightMouse>| <S-RightMouse>	   等同於在滑鼠點選處 "#"
|<S-Up>|	<S-Up>		1  等同於 CTRL-B
|<Undo>|	<Undo>		2  等同於 "u"
|<Up>|		<Up>		1  等同於 "k"
|<ScrollWheelDown>|	<ScrollWheelDown>	視窗向下滾動三行
|<S-ScrollWheelDown>|	<S-ScrollWheelDown>	視窗向下滾動完整一頁
|<ScrollWheelUp>|	<ScrollWheelUp>		視窗向上滾動三行
|<S-ScrollWheelUp>|	<S-ScrollWheelUp>	視窗向上滾動完整一頁
|<ScrollWheelLeft>|	<ScrollWheelLeft>	視窗向左滾動六列
|<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	視窗向左滾動完整一頁
|<ScrollWheelRight>|	<ScrollWheelRight>	視窗向右滾動六列
|<S-ScrollWheelRight>|	<S-ScrollWheelRight>	視窗向右滾動完整一頁

==============================================================================
2.1 文字物件							*objects*

他們可以用在操作符之後，或者在可視模式裡選擇一個物件。

標籤		命令		   操作符等待和可視模式下的動作 ~
------------------------------------------------------------------------------
|v_aquote|	a"		   雙引號字串
|v_a'|		a'		   單引號字串
|v_a(|		a(		   等同於 ab
|v_a)|		a)		   等同於 ab
|v_a<|		a<		   "一個 <> 塊" 從 '<' 到匹配的 '>'
|v_a>|		a>		   等同於 a<
|v_aB|		aB		   "一個大塊" 從 "[{" 到 "]}" (帶上括號)
|v_aW|		aW		   "一個字串" (帶上空白)
|v_a[|		a[		   "一個 [] 塊" 從 '[' 到匹配的 ']'
|v_a]|		a]		   等同於 a[
|v_a`|		a`		   反引號字串
|v_ab|		ab		   "一個塊" 從 "[(" 到 "])" (帶上括號)
|v_ap|		ap		   "一個段落" (帶上空白)
|v_as|		as		   "一個句子" (帶上空白)
|v_at|		at		   "一個標籤塊" (帶上空白)
|v_aw|		aw		   "一個單詞" (帶上空白)
|v_a{|		a{		   等同於 aB
|v_a}|		a}		   等同於 aB
|v_iquote|	i"		   雙引號字串，不帶引號
|v_i'|		i'		   單引號字串，不帶引號
|v_i(|		i(		   等同於 ib
|v_i)|		i)		   等同於 ib
|v_i<|		i<		   "內含 <> 塊" 從 '<' 到匹配的 '>'
|v_i>|		i>		   等同於 i<
|v_iB|		iB		   "內含大塊" 從 "[{" 到 "]}"
|v_iW|		iW		   "內含字串"
|v_i[|		i[		   "內含 [] 塊" 從 '[' 到匹配的 ']'
|v_i]|		i]		   等同於 i[
|v_i`|		i`		   反引號字串，不帶反引號
|v_ib|		ib		   "內含塊" 從 "[(" 到 "])"
|v_ip|		ip		   "內含段落"
|v_is|		is		   "內含句子"
|v_it|		it		   "內含標籤塊"
|v_iw|		iw		   "內含單詞"
|v_i{|		i{		   等同於 iB
|v_i}|		i}		   等同於 iB

==============================================================================
2.2 視窗命令							*CTRL-W*

標籤		命令		   普通模式下的動作	~
------------------------------------------------------------------------------
|CTRL-W_CTRL-B|	CTRL-W CTRL-B	   等同於 "CTRL-W b"
|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   等同於 "CTRL-W c"
|CTRL-W_CTRL-D|	CTRL-W CTRL-D	   等同於 "CTRL-W d"
|CTRL-W_CTRL-F|	CTRL-W CTRL-F	   等同於 "CTRL-W f"
		CTRL-W CTRL-G	   等同於 "CTRL-W g .."
|CTRL-W_CTRL-H|	CTRL-W CTRL-H	   等同於 "CTRL-W h"
|CTRL-W_CTRL-I|	CTRL-W CTRL-I	   等同於 "CTRL-W i"
|CTRL-W_CTRL-J|	CTRL-W CTRL-J	   等同於 "CTRL-W j"
|CTRL-W_CTRL-K|	CTRL-W CTRL-K	   等同於 "CTRL-W k"
|CTRL-W_CTRL-L|	CTRL-W CTRL-L	   等同於 "CTRL-W l"
|CTRL-W_CTRL-N|	CTRL-W CTRL-N	   等同於 "CTRL-W n"
|CTRL-W_CTRL-O|	CTRL-W CTRL-O	   等同於 "CTRL-W o"
|CTRL-W_CTRL-P|	CTRL-W CTRL-P	   等同於 "CTRL-W p"
|CTRL-W_CTRL-Q|	CTRL-W CTRL-Q	   等同於 "CTRL-W q"
|CTRL-W_CTRL-R|	CTRL-W CTRL-R	   等同於 "CTRL-W r"
|CTRL-W_CTRL-S|	CTRL-W CTRL-S	   等同於 "CTRL-W s"
|CTRL-W_CTRL-T|	CTRL-W CTRL-T	   等同於 "CTRL-W t"
|CTRL-W_CTRL-V|	CTRL-W CTRL-V	   等同於 "CTRL-W v"
|CTRL-W_CTRL-W|	CTRL-W CTRL-W	   等同於 "CTRL-W w"
|CTRL-W_CTRL-X|	CTRL-W CTRL-X	   等同於 "CTRL-W x"
|CTRL-W_CTRL-Z|	CTRL-W CTRL-Z	   等同於 "CTRL-W z"
|CTRL-W_CTRL-]|	CTRL-W CTRL-]	   等同於 "CTRL-W ]"
|CTRL-W_CTRL-^|	CTRL-W CTRL-^	   等同於 "CTRL-W ^"
|CTRL-W_CTRL-_|	CTRL-W CTRL-_	   等同於 "CTRL-W _"
|CTRL-W_+|	CTRL-W +	   增加當前視窗高度 N 行
|CTRL-W_-|	CTRL-W -	   減少當前視窗高度 N 行
|CTRL-W_<|	CTRL-W <	   減少當前視窗寬度 N 列
|CTRL-W_=|	CTRL-W =	   使得所有視窗同寬同高
|CTRL-W_>|	CTRL-W >	   增加當前視窗寬度 N 列
|CTRL-W_H|	CTRL-W H	   移動當前視窗到最左端
|CTRL-W_J|	CTRL-W J	   移動當前視窗到最底部
|CTRL-W_K|	CTRL-W K	   移動當前視窗到最頂部
|CTRL-W_L|	CTRL-W L	   移動當前視窗到最右端
|CTRL-W_P|	CTRL-W P	   跳轉到預覽視窗
|CTRL-W_R|	CTRL-W R	   向上旋轉視窗 N 次
|CTRL-W_S|	CTRL-W S	   等同於 "CTRL-W s"
|CTRL-W_T|	CTRL-W T	   移動當前視窗到新標籤頁
|CTRL-W_W|	CTRL-W W	   跳轉到前面第 N 個視窗 (迴繞)
|CTRL-W_]|	CTRL-W ]	   分割視窗並跳轉到游標所在的標籤上
|CTRL-W_^|	CTRL-W ^	   分割視窗並編輯輪換檔案 N
|CTRL-W__|	CTRL-W _	   設定當前視窗高度為 N (預設: 儘量大)
|CTRL-W_b|	CTRL-W b	   跳轉到底部的視窗
|CTRL-W_c|	CTRL-W c	   關閉當前視窗 (類似於 |:close|)
|CTRL-W_d|	CTRL-W d	   分割視窗並跳轉到游標所在的定義上
|CTRL-W_f|	CTRL-W f	   分割視窗並跳轉到游標所在的檔名上
|CTRL-W_F|	CTRL-W F	   分割視窗並編輯游標所在的檔名，然後跳轉到
				   檔名後給出的行號上。
|CTRL-W_g_CTRL-]| CTRL-W g CTRL-]  分割視窗並在游標所在的標籤上執行 |:tjump|
|CTRL-W_g]|	CTRL-W g ]	   分割視窗並在游標所在的標籤上執行 |:tselect|
|CTRL-W_g}|	CTRL-W g }	   在游標所在的標籤上執行 |:ptjump|
|CTRL-W_gf|	CTRL-W g f	   在新的標籤頁裡編輯游標所在的檔名
|CTRL-W_gF|	CTRL-W g F	   在新的標籤頁裡編輯游標所在的檔名然後跳轉
				   到檔名後給出的行號上。
|CTRL-W_h|	CTRL-W h	   跳轉到左面第 N 個的視窗 (在首個視窗上停止)
|CTRL-W_i|	CTRL-W i	   分割視窗並跳轉到游標所在的識別符號的宣告上
|CTRL-W_j|	CTRL-W j	   跳轉到下面第 N 個的視窗 (在最後視窗上停止)
|CTRL-W_k|	CTRL-W k	   跳轉到上面第 N 個的視窗 (在首個視窗上停止)
|CTRL-W_l|	CTRL-W l	   跳轉到右面第 N 個的視窗 (在最後視窗上停止)
|CTRL-W_n|	CTRL-W n	   開啟新視窗，N 行高
|CTRL-W_o|	CTRL-W o	   關閉除了當前視窗以外的所有視窗 (類似於
				   |:only|)
|CTRL-W_p|	CTRL-W p	   轉到前面一個 (最近訪問的) 視窗
|CTRL-W_q|	CTRL-W q	   退出當前視窗 (類似於 |:quit|)
|CTRL-W_r|	CTRL-W r	   向下旋轉視窗 N 次
|CTRL-W_s|	CTRL-W s	   分割當前視窗為兩部分，新的視窗 N 行高
|CTRL-W_t|	CTRL-W t	   跳轉到頂部視窗
|CTRL-W_v|	CTRL-W v	   垂直分割當前視窗，新的視窗 N 列寬
|CTRL-W_w|	CTRL-W w	   轉到後面第 N 個視窗 (迴繞)
|CTRL-W_x|	CTRL-W x	   交換當前和第 N 個視窗 (預設: 下一個視窗)
|CTRL-W_z|	CTRL-W z	   關閉預覽視窗
|CTRL-W_bar|	CTRL-W |	   設定視窗寬度為 N 列
|CTRL-W_}|	CTRL-W }	   在預覽窗口裡顯示游標所在的標籤
|CTRL-W_<Down>|	CTRL-W <Down>	   等同於 "CTRL-W j"
|CTRL-W_<Up>|	CTRL-W <Up>	   等同於 "CTRL-W k"
|CTRL-W_<Left>|	CTRL-W <Left>	   等同於 "CTRL-W h"
|CTRL-W_<Right>| CTRL-W <Right>	   等同於 "CTRL-W l"

==============================================================================
2.3 方括號命令							*[* *]*

標籤		字元	      備註 普通模式下的動作	~
------------------------------------------------------------------------------
|[_CTRL-D|	[ CTRL-D	   跳轉到第一個在當前檔案和它包含的標頭檔案裡匹
				   配游標所在的單詞的 #define，從當前檔案的頭
				   部開始
|[_CTRL-I|	[ CTRL-I	   跳轉到第一個在當前檔案和它包含的標頭檔案裡匹
				   配游標所在單詞的位置，從當前檔案頭部開始
|[#|		[#		1  游標移動到前面第 N 個未匹配的 #if、#else 或
				   者 #ifdef
|['|		['		1  游標移動到前面的小寫位置標記，定位在它所在
				   行的第一個非空白字元上
|[(|		[(		1  游標移動到前面第 N 個未匹配的 '('
|[star|		[*		1  等同於 "[/"
|[`|		[`		1  游標移動到前一個小寫位置標記
|[/|		[/		1  游標移動到前面第 N 個 C 註釋的開始處
|[D|		[D		   列出在當前檔案和它包含的標頭檔案裡匹配游標所
				   在的單詞的所有定義，從當前檔案的頭部開始
|[I|		[I		   列出在當前檔案和它包含的標頭檔案裡匹配游標所
				   在單詞的所有位置，從當前檔案的頭部開始
|[P|		[P		2  等同於 "[p"
|[[|		[[		1  游標後退 N 個小節
|[]|		[]		1  游標後退 N 個 SECTION
|[c|		[c		1  游標後退 N 個更改開始的地方
|[d|		[d		   顯示第一個在當前檔案和它包含的標頭檔案裡匹配
				   游標所在的單詞的 #define，從當前檔案的頭部
				   開始
|[f|		[f		   等同於 "gf"
|[i|		[i		   顯示第一個在當前檔案和它包含的標頭檔案裡匹配
				   游標所在單詞的位置，從當前檔案的頭部開始
|[m|		[m		1  游標後退 N 個成員函式的開始
|[p|		[p		2  類似於 "P"，但調整當前行的縮排
|[s|		[s		1  移動到前一個拼寫錯誤的單詞
|[z|		[z		1  移動到開啟的摺疊的開始
|[{|		[{		1  游標後退 N 個未匹配的 '{'
|[<MiddleMouse>| [<MiddleMouse>	2  等同於 "[p"

|]_CTRL-D|	] CTRL-D	   跳轉到第一個在當前檔案和它包含的標頭檔案裡匹
				   配游標所在的單詞的 #define，從游標位置開始
|]_CTRL-I|	] CTRL-I	   跳轉到第一個在當前檔案和它包含的標頭檔案裡匹
				   配游標所在單詞的位置，從游標位置開始
|]#|		]#		1  游標移動到後面第 N 個未匹配的 #endif、#else
|]'|		]'		1  游標移動到後面的小寫位置標記，定位在它所在
				   行的第一個非空白字元上
|])|		])		1  游標移動到後面第 N 個未匹配的 ')'
|]star|		]*		1  等同於 "]/"
|]`|		]`		1  游標移動到後一個小寫位置標記
|]/|		]/		1  游標移動到後面第 N 個 C 註釋的結尾處
|]D|		]D		   列出在當前檔案和它包含的標頭檔案裡匹配游標所
				   在的單詞的所有定義，從游標位置開始
|]I|		]I		   列出在當前檔案和它包含的標頭檔案裡匹配游標所
				   在單詞的所有位置，從游標位置開始
|]P|		]P		2  等同於 "[p"
|][|		][		1  游標前進 N 個小節
|]]|		]]		1  游標前進 N 個 SECTION
|]c|		]c		1  游標前進 N 個更改開始的地方
|]d|		]d		   顯示第一個在當前檔案和它包含的標頭檔案裡匹配
				   游標所在的單詞的 #define，從游標位置開始
|]f|		]f		   等同於 "gf"
|]i|		]i		   顯示第一個在當前檔案和它包含的標頭檔案裡匹配
				   游標所在單詞的位置，從游標位置開始
|]m|		]m		1  游標前進 N 個成員函式的結尾
|]p|		]p		2  類似於 "p"，但調整當前行的縮排
|]s|		]s		1  移動到後一個拼寫錯誤的單詞
|]z|		]z		1  移動到開啟的摺疊的結尾處
|]}|		]}		1  游標前進 N 個未匹配的 '}'
|]<MiddleMouse>| ]<MiddleMouse>	2  等同於 "]p"

==============================================================================
2.4 'g' 開始的命令						*g*

標籤		字元	      備註 普通模式下的動作	~
------------------------------------------------------------------------------
|g_CTRL-A|	g CTRL-A	   只有在編譯時加入了 MEM_PROFILE 時才有定義:
				   轉儲記憶體內容
|g_CTRL-G|	g CTRL-G	   顯示當前游標位置
|g_CTRL-H|	g CTRL-H	   啟動選擇列塊模式
|g_CTRL-]|	g CTRL-]	   |:tjump| 到游標所在的標籤上
|g#|		g#		1  類似於 "#"，但不使用 "\<" 和 "\>"
|g$|		g$		1  'wrap' 關閉時轉到當前行最右側螢幕上可見的字
				   符
				   'wrap' 開啟時轉到當前螢幕行最右側的字元
|g&|		g&		2  在所有行上重複上次的 ":s"
|g'|		g'{mark}	1  類似於 |'|，但不改變跳轉表
|g`|		g`{mark}	1  類似於 |`|，但不改表跳轉表
|gstar|		g*		1  類似於 "*"，但不使用 "\<" 和 "\>"
|g+|		g+		   轉到第 N 個更新的文字狀態
|g,|		g,		1  轉到改變表第 N 個更新的位置
|g-|		g-		   轉到第 N 個更舊的文字狀態
|g0|		g0		1  'wrap' 關閉時轉到當前行最左側螢幕上可見的字
				   符
				   'wrap' 開啟時轉到當前螢幕行最左側的字元
|g8|		g8		   顯示游標所在的 UTF-8 字元的十六進位制位元組碼
|g;|		g;		1  轉到改變表第 N 個更舊的位置
|g<|		g<		   顯示上次的命令輸出
|g?|		g?		2  Rot13 編碼操作符
|g?g?|		g??		2  Rot13 編碼當前行
|g?g?|		g?g?		2  Rot13 編碼當前行
|gD|		gD		1  轉到當前檔案的游標所在單詞的定義
|gE|		gE		1  反向轉移到上一個 WORD 的結尾處
|gH|		gH		   啟動選擇行模式
|gI|		gI		2  類似於 "I"，但總是從第一列開始
|gJ|		gJ		2  連線行，不插入空格
|gN|		gN	      1,2  使用前次搜尋模式搜尋上一個匹配，並可視選擇
				   之
|gP|		["x]gP		2  在光標籤放置文字 [從暫存器 x] N 次，游標留
				   在插入文字之後
|gQ|		gQ		   Vim 編輯時進入 "Ex" 模式
|gR|		gR		2  進入虛擬替換模式
|gT|		gT		   轉到前一個標籤頁
|gU|		gU{motion}	2  使得 Nmove 文字全部大寫
|gV|		gV		   在執行選擇模式下的對映或者選單時，不要重複
				   選擇過去的可視區域
|g]|		g]		   :tselect 到游標所在的標籤上
|g^|		g^		1  'wrap' 關閉時轉到當前行最左側螢幕上可見的非
				   空白字元
				   'wrap' 開啟時轉到當前螢幕行最左側的非空白字
				   符
|g_|		g_		1  移動游標到下方 N - 1 行的最後 CHAR
|ga|		ga		   列印游標所在處的字元的 ascii 值
|gd|		gd		1  轉到當前函式裡當前游標所在的單詞的定義
|ge|		ge		1  反向轉到前一個單詞的結尾處
|gf|		gf		   開始編輯當前游標所在的名字對應的檔案
|gF|		gF		   開始編輯游標所在的檔名並跳轉到檔名後的
				   行號上。
|gg|		gg		1  游標移動到第 N 行，預設是第一行
|gh|		gh		   開始選擇模式
|gi|		gi		2  類似於 "i"，但先移動到 |'^| 位置標記
|gj|		gj		1  類似於 "j"，但 'wrap' 開啟時往下 N 個螢幕行
|gk|		gk		1  類似於 "k"，但 'wrap' 開啟時往上 N 個螢幕行
|gm|		gm		1  轉到螢幕行正中間的那個字元
|gn|		gn	      1,2  使用前次搜尋模式搜尋下一個匹配，並可視選擇
				   之
|go|		go		1  游標移動到緩衝區的第 N 個位元組
|gp|		["x]gp		2  在游標後面放置文字 [從暫存器 x] N 次，游標
				   留在後面
|gq|		gq{motion}	2  排版 Nmove 文字
|gr|		gr{char}	2  虛擬替換 N 個字元為 {char}
|gs|		gs		   睡眠 N 秒 (預設 1)
|gt|		gt		   轉到下一個標籤頁
|gu|		gu{motion}	2  使得 Nmove 文字全部小寫
|gv|		gv		   重新選擇上次的可視區域
|gw|		gw{motion}	2  排版 Nmove 文字並保持游標位置
|netrw-gx|	gx		   執行游標下的檔名對應的應用程式 (僅限於
				   |netrw| 外掛)
|g@|		g@{motion}	   呼叫 'operatorfunc'
|g~|		g~{motion}	2  改變 Nmove 文字的大小寫
|g<Down>|	g<Down>		1  等同於 "gj"
|g<End>|	g<End>		1  等同於 "g$"
|g<Home>|	g<Home>		1  等同於 "g0"
|g<LeftMouse>|	g<LeftMouse>	   等同於 <C-LeftMouse>
		g<MiddleMouse>	   等同於 <C-MiddleMouse>
|g<RightMouse>|	g<RightMouse>	   等同於 <C-RightMouse>
|g<Up>|		g<Up>		1  等同於 "gk"

==============================================================================
2.5 'z' 開始的命令						*z*

標籤		字元	      備註 普通模式下的動作	~
------------------------------------------------------------------------------
|z<CR>|		z<CR>		   重畫，游標移動到視窗的頂行的第一個非空白字
				   符
|zN<CR>|	z{height}<CR>	   重畫，使得視窗高度為 {height} 行
|z+|		z+		   游標移動到第 N 行 (預設為視窗之後的第一
				   行)，其它同 "z<CR>"
|z-|		z-		   重畫，游標移動到視窗末行的第一個非空白字元
|z.|		z.		   重畫，游標移動到視窗的中間行的第一個非空白
				   字元
|z=|		z=		   給出拼寫建議
|zA|		zA		   遞迴開啟一個關閉的摺疊或關閉一個開啟的摺疊
|zC|		zC		   遞迴關閉摺疊
|zD|		zD		   遞迴刪除摺疊
|zE|		zE		   除去所有摺疊
|zF|		zF		   為 N 行建立摺疊
|zG|		zG		   把單詞標記為拼寫正確 (good)
|zH|		zH		   'wrap' 關閉時向右滾屏半個螢幕寬度
|zL|		zL		   'wrap' 關閉時向左滾屏半個螢幕寬度
|zM|		zM		   設定 'foldlevel' 為零
|zN|		zN		   置位 'foldenable'
|zO|		zO		   遞迴開啟摺疊
|zR|		zR		   設定 'foldlevel' 為最大摺疊級別
|zW|		zW		   把單詞標記為拼寫錯誤 (wrong)
|zX|		zX		   重新應用 'foldlevel'
|z^|		z^		   游標移動到第 N 行 (預設為視窗之前的一行)，
				   其它同 "z-"
|za|		za		   開啟關閉的摺疊，或關閉開啟的摺疊
|zb|		zb		   重畫，游標在視窗底行
|zc|		zc		   關閉摺疊
|zd|		zd		   刪除摺疊
|ze|		ze		   'wrap' 關閉時，水平滾動使得游標定位到螢幕的
				   尾部 (最右側)
|zf|		zf{motion}	   為 Nmove 文字建立摺疊
|zg|		zg		   把單詞標記為拼寫正確 (good)
|zh|		zh		   'wrap' 關閉時，水平右滾螢幕 N 個字元
|zi|		zi		   切換 'foldenable'
|zj|		zj		1  移動到下一個摺疊的開始處
|zk|		zk		1  移動到前一個摺疊的結束處
|zl|		zl		   'wrap' 關閉時，水平左滾螢幕 N 個字元
|zm|		zm		   從 'foldlevel' 減一
|zn|		zn		   復位 'foldenable'
|zo|		zo		   開啟摺疊
|zr|		zr		   給 'foldlevel' 加一
|zs|		zs		   'wrap' 關閉時，水平滾動使得游標定位到螢幕的
				   起始處 (最左側)
|zt|		zt		   重畫，游標移動到視窗的頂部
|zw|		zw		   把單詞標記為拼寫錯誤 (wrong)
|zv|		zv		   開啟足夠的摺疊，使得當前行可見
|zx|		zx		   重新應用 'foldlevel' 然後執行 "zv"
|zz|		zz		   重畫，游標移動到視窗的中間行
|z<Left>|	z<Left>		   等同於 "zh"
|z<Right>|	z<Right>	   等同於 "zl"

==============================================================================
3. 可視模式						*visual-index*

可視模式下，大多數命令同普通模式的相同。以下列出的是不同的部分。

標籤		字元	      備註 可視模式下的動作	~
------------------------------------------------------------------------------
|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N	   結束可視模式
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G	   轉到 'insertmode' 指定的模式
|v_CTRL-A|	CTRL-A		2  給高亮文字中的數值加上 N
|v_CTRL-C|	CTRL-C		   結束可視模式
|v_CTRL-G|	CTRL-G		   在可視模式和選擇模式間切換
|v_<BS>|	<BS>		2  選擇模式: 刪除高亮區域
|v_CTRL-H|	CTRL-H		2  等同於 <BS>
|v_CTRL-O|	CTRL-O		   從選擇模式切換到可視模式，只限於下個命令
|v_CTRL-V|	CTRL-V		   使得可視模式面向列塊，或者退出可視模式
|v_CTRL-X|	CTRL-X		2  給高亮文字中的數值減去 N
|v_<Esc>|	<Esc>		   結束可視模式
|v_CTRL-]|	CTRL-]		   跳轉到高亮的標籤上
|v_!|		!{filter}	2  通過外部命令 {filter} 過濾高亮行
|v_:|		:		   使用高亮行作為範圍，開始一個命令列
|v_<|		<		2  左移高亮行一個 'shiftwidth'
|v_=|		=		2  用 {equalprg} 選項指定的外部程式過濾高亮行
|v_>|		>		2  右移高亮行一個 'shiftwidth'
|v_b_A|		A		2  列塊模式下: 在高亮區域的所有行後附加相同的
				   文字
|v_C|		C		2  刪除高亮行，並開始插入
|v_D|		D		2  刪除高亮行
|v_b_I|		I		2  列塊模式: 在所有高亮行之前插入相同的文字
|v_J|		J		2  連線高亮行
|v_K|		K		   在高亮區域上執行 'keywordprg'
|v_O|		O		   水平移動到區域的另外一側
		Q		   不啟動 Ex 模式
|v_R|		R		2  刪除高亮行並開始插入
|v_S|		S		2  刪除高亮行並開始插入
|v_U|		U		2  使得高亮區域全變大寫
|v_V|		V		   使得可視區域面向行，或者退出可視模式
|v_X|		X		2  刪除高亮區域
|v_Y|		Y		   抽出高亮行
|v_aquote|	a"		   擴充套件高亮區域，使包含一個雙引號字串
|v_a'|		a'		   擴充套件高亮區域，使包含一個單引號字串
|v_a(|		a(		   等同於 ab
|v_a)|		a)		   等同於 ab
|v_a<|		a<		   擴充套件高亮區域，使包含一個 <> 塊
|v_a>|		a>		   等同於 a<
|v_aB|		aB		   擴充套件高亮區域，使包含一個 {} 塊
|v_aW|		aW		   擴充套件高亮區域，使包含 "一個 WORD"
|v_a[|		a[		   擴充套件高亮區域，使包含一個 [] 塊
|v_a]|		a]		   等同於 a[
|v_a`|		a`		   擴充套件高亮區域，使包含一個反引號字串
|v_ab|		ab		   擴充套件高亮區域，使包含一個 () 塊
|v_ap|		ap		   擴充套件高亮區域，使包含一個段落
|v_as|		as		   擴充套件高亮區域，使包含一個句子
|v_at|		at		   擴充套件高亮區域，使包含一個標籤塊
|v_aw|		aw		   擴充套件高亮區域，使包含 "一個單詞"
|v_a{|		a{		   等同於 aB
|v_a}|		a}		   等同於 aB
|v_c|		c		2  刪除高亮區域，並開始插入
|v_d|		d		2  刪除高亮區域
|v_g_CTRL-A|	g CTRL-A	2  給高亮文字中的數值加上 N
|v_g_CTRL-X|	g CTRL-X	2  給高亮文字中的數值減去 N
|v_gJ|		gJ		2  連線高亮行，不插入空格
|v_gq|		gq		2  排版高亮行
|v_gv|		gv		   交換現在和以前的高亮區域
|v_iquote|	i"		   擴充套件高亮區域，使包含一個雙引號字串 (但不
				   含引號)
|v_i'|		i'		   擴充套件高亮區域，使包含一個單引號字串 (但不
				   含引號)
|v_i(|		i(		   等同於 ib
|v_i)|		i)		   等同於 ib
|v_i<|		i<		   擴充套件高亮區域，使包含內含 <> 塊
|v_i>|		i>		   等同於 i<
|v_iB|		iB		   擴充套件高亮區域，使包含內含 {} 塊
|v_iW|		iW		   擴充套件高亮區域，使包含 "內含 WORD"
|v_i[|		i[		   擴充套件高亮區域，使包含內含 [] 塊
|v_i]|		i]		   等同於 i[
|v_i`|		i`		   擴充套件高亮區域，使包含一個反引號字串 (但不
				   含反引號)
|v_ib|		ib		   擴充套件高亮區域，使包含內含 () 塊
|v_ip|		ip		   擴充套件高亮區域，使包含內含段落
|v_is|		is		   擴充套件高亮區域，使包含內含句子
|v_it|		it		   擴充套件高亮區域，使包含內含標籤塊
|v_iw|		iw		   擴充套件高亮區域，使包含 "內含單詞"
|v_i{|		i{		   等同於 iB
|v_i}|		i}		   等同於 iB
|v_o|		o		   移動游標到區域的另一側
|v_r|		r		2  刪除高亮區域，並開始插入
|v_s|		s		2  刪除高亮區域，並開始插入
|v_u|		u		2  使得高亮區域全變小寫
|v_v|		v		   使得可視模式面向字元，或者退出可視模式
|v_x|		x		2  刪除高亮區域
|v_y|		y		   抽出高亮區域
|v_~|		~		2  改變高亮區域的大小寫

==============================================================================
4. 命令列編輯						*ex-edit-index*

使用 ':'、'!'、'/' 或 '?' 命令進入命令列編輯。
輸入普通字元會在當前游標位置插入該字元。
下面的 "補全" 指上下文相關的補全。如果可能，會補全檔名、標籤、命令等。

標籤		字元	       命令列編輯模式下的動作	~
------------------------------------------------------------------------------
		CTRL-@		不用
|c_CTRL-A|	CTRL-A		使用游標前面的模式進行補全，並插入所有的匹配
|c_CTRL-B|	CTRL-B		游標移動到命令列開始的地方
|c_CTRL-C|	CTRL-C		等同於 <Esc>
|c_CTRL-D|	CTRL-D		列出游標前面模式的所有補全
|c_CTRL-E|	CTRL-E		游標移動到命令列結束的地方
|'cedit'|	CTRL-F		'cedit' 的預設值: 開啟命令列視窗；否則不用
|c_CTRL-G|	CTRL-G		'incsearch' 啟用時，下個匹配
|c_<BS>|	<BS>		刪除游標前面的字元
|c_digraph|	{char1} <BS> {char2}
				'digraph' 開啟時，輸入二合字母
|c_CTRL-H|	CTRL-H		等同於 <BS>
|c_<Tab>|	<Tab>		如果 'wildchar' 是 <Tab>: 補全游標前面的模式
|c_<S-Tab>|	<S-Tab>		等同於 CTRL-P
|c_wildchar|	'wildchar'	補全游標前面的模式 (預設: <Tab>)
|c_CTRL-I|	CTRL-I		等同於 <Tab>
|c_<NL>|	<NL>		等同於 <CR>
|c_CTRL-J|	CTRL-J		等同於 <CR>
|c_CTRL-K|	CTRL-K {char1} {char2}
				輸入二合字母
|c_CTRL-L|	CTRL-L		補全游標前的模式，並插入最長的公共子串
|c_<CR>|	<CR>		執行輸入的命令
|c_CTRL-M|	CTRL-M		等同於 <CR>
|c_CTRL-N|	CTRL-N		使用 'wildchar' 並有多個匹配: 轉到下一個匹配，
				不然: 從歷史中調入後一個命令列
		CTRL-O		不同
|c_CTRL-P|	CTRL-P		使用 'wildchar' 並有多個匹配: 轉到上一個匹配，
				不然: 從歷史中調入前一個命令列
|c_CTRL-Q|	CTRL-Q		等同於 CTRL-V，除非用於終端控制流
|c_CTRL-R|	CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
				插入暫存器的內容或特殊物件到游標所在的地方，如
				同直接輸入那樣
|c_CTRL-R_CTRL-R| CTRL-R CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
				按本義插入暫存器的內容或特殊物件到游標所在的地
				方
		CTRL-S		(用於終端控制流)
|c_CTRL-T|	CTRL-T		'incsearch' 啟用時，前個匹配
|c_CTRL-U|	CTRL-U		刪除所有字元
|c_CTRL-V|	CTRL-V		按本義插入下一個非數字字元，或者插入其後三位數
				字所代表的單個位元組。
|c_CTRL-W|	CTRL-W		刪除游標前面的單詞
		CTRL-X		不用 (保留作補全用)
		CTRL-Y		複製 (抽出) 無模式的選擇
		CTRL-Z		不用 (保留作暫停用)
|c_<Esc>|	<Esc>		放棄命令列，不執行
|c_CTRL-[|	CTRL-[		等同於 <Esc>
|c_CTRL-\_CTRL-N| CTRL-\ CTRL-N	轉到普通模式，放棄命令列
|c_CTRL-\_CTRL-G| CTRL-\ CTRL-G	轉到 'insertmode' 指定的模式，放棄命令列
		CTRL-\ a - d	保留給擴充套件用
|c_CTRL-\_e|	CTRL-\ e {expr} 以 {expr} 的結果替換命令列
		CTRL-\ f - z	保留給擴充套件用
		CTRL-\ 其它	不用
|c_CTRL-]|	CTRL-]		啟用縮寫
|c_CTRL-^|	CTRL-^		切換 |:lmap| 對映的使用
|c_CTRL-_|	CTRL-_		'allowrevins'  開啟時: 改變語言 (希伯來，波斯)
|c_<Del>|	<Del>		刪除游標所在的字元

|c_<Left>|	<Left>		游標左移
|c_<S-Left>|	<S-Left>	游標左移一個單詞
|c_<C-Left>|	<C-Left>	游標左移一個單詞
|c_<Right>|	<Right>		游標右移
|c_<S-Right>|	<S-Right>	游標右移一個單詞
|c_<C-Right>|	<C-Right>	游標右移一個單詞
|c_<Up>|	<Up>		從歷史中調入匹配游標前模式的前一個命令列
|c_<S-Up>|	<S-Up>		從歷史中調入前一個命令列
|c_<Down>|	<Down>		從歷史中調入匹配游標前模式的後一個命令列
|c_<S-Down>|	<S-Down>	從歷史中調入後一個命令列
|c_<Home>|	<Home>		游標移動到命令列開始的地方
|c_<End>|	<End>		游標移動到命令列結束的地方
|c_<PageDown>|	<PageDown>	等同於 <S-Down>
|c_<PageUp>|	<PageUp>	等同於 <S-Up>
|c_<Insert>|	<Insert>	切換插入/替換模式
|c_<LeftMouse>|	<LeftMouse>	游標移動到滑鼠點選的地方

亞瑟王，你找到 (聖盃) 了！			*holy-grail* *:smile*

==============================================================================
5. EX 命令					*ex-cmd-index* *:index*

這裡是一個簡短但完整的 ":" 命令的列表。這裡不討論引數。命令可選的部分用 [] 括
起。命令按照名字非可選部分排序。

標籤		字元	       動作	~
------------------------------------------------------------------------------
|:!|		:!		過濾行，或可通過外部命令執行之
|:!!|		:!!		重複上次的 ":!" 命令
|:#|		:#		等同於 ":number"
|:&|		:&		重複上次的 ":substitute"
|:star|		:*		執行暫存器的內容
|:<|		:<		將行左移一個 'shiftwidth'
|:=|		:=		顯示游標所在的行號
|:>|		:>		將行右移一個 'shiftwidth'
|:@|		:@		執行暫存器的內容
|:@@|		:@@		重複上次的 ":@"
|:Next|		:N[ext]		轉到引數列表的上一個檔案
|:Print|	:P[rint]	顯示行
|:X|		:X		請求加密金鑰
|:append|	:a[ppend]	附加文字
|:abbreviate|	:ab[breviate]	輸入縮寫
|:abclear|	:abc[lear]	刪除所有的縮寫
|:aboveleft|	:abo[veleft]	使得分割的窗口出現在左側或者上方
|:all|		:al[l]		為引數列表的每個檔案開啟一個視窗
|:amenu|	:am[enu]	為所有模式輸入選單項
|:anoremenu|	:an[oremenu]	為所有模式輸入選單項，不會被重新對映
|:args|		:ar[gs]		顯示引數列表
|:argadd|	:arga[dd]	增加專案到引數列表中
|:argdelete|	:argd[elete]	從引數列表中刪除專案
|:argedit|	:arge[dit]	增加專案到引數列表中並編輯之
|:argdo|	:argdo		在引數列表上的所有專案上執行一個命令
|:argglobal|	:argg[lobal]	定義全域性引數列表
|:arglocal|	:argl[ocal]	定義本地引數列表
|:argument|	:argu[ment]	轉到引數列表一個指定的檔案
|:ascii|	:as[cii]	顯示游標所在的字元的 ascii 值
|:autocmd|	:au[tocmd]	輸入或者顯示自動命令
|:augroup|	:aug[roup]	選擇要用的自動命令組
|:aunmenu|	:aun[menu]	刪除所有模式下的選單
|:buffer|	:b[uffer]	轉到緩衝區列表裡的特定緩衝區
|:bNext|	:bN[ext]	轉到緩衝區列表裡的上一個緩衝區
|:ball|		:ba[ll]		為緩衝區列表裡的每個緩衝區開啟一個視窗
|:badd|		:bad[d]		增加緩衝區到緩衝區列表
|:bdelete|	:bd[elete]	從緩衝區列表刪除緩衝區
|:behave|	:be[have]	設定滑鼠和選擇行為
|:belowright|	:bel[owright]	使得分割的窗口出現在右側或者下方
|:bfirst|	:bf[irst]	轉到緩衝區列表裡的第一個緩衝區
|:blast|	:bl[ast]	轉到緩衝區列表裡的最後一個緩衝區
|:bmodified|	:bm[odified]	轉到緩衝區列表裡的下一個修改過的緩衝區
|:bnext|	:bn[ext]	轉到緩衝區列表裡的下一個緩衝區
|:botright|	:bo[tright]	使得分割的窗口出現在最右側或者下方
|:bprevious|	:bp[revious]	轉到緩衝區列表裡的上一個緩衝區
|:brewind|	:br[ewind]	轉到緩衝區列表裡的第一個緩衝區
|:break|	:brea[k]	跳出 while 迴圈
|:breakadd|	:breaka[dd]	增加偵錯程式斷點
|:breakdel|	:breakd[el]	刪除偵錯程式斷點
|:breaklist|	:breakl[ist]	列出偵錯程式斷點
|:browse|	:bro[wse]	使用檔案選擇對話方塊
|:bufdo|	:bufdo		為每個列表內緩衝區執行命令
|:buffers|	:buffers	列出緩衝區列表裡的所有檔案
|:bunload|	:bun[load]	解除安裝指定的緩衝區
|:bwipeout|	:bw[ipeout]	真正刪除一個緩衝區
|:change|	:c[hange]	替換一行或若干行
|:cNext|	:cN[ext]	跳轉到上一個錯誤
|:cNfile|	:cNf[ile]	跳轉到前一個檔案的最後一個錯誤
|:cabbrev|	:ca[bbrev]	類似於 ":abbreviate"，但用於命令列模式
|:cabclear|	:cabc[lear]	清除所有縮寫，用於命令列模式
|:caddbuffer|	:cad[dbuffer]	通過緩衝區補充錯誤
|:caddexpr|	:cadde[xpr]	通過表示式補充錯誤
|:caddfile|	:caddf[ile]	加入錯誤資訊到當前 quickfix 列表
|:call|		:cal[l]		呼叫函式
|:catch|	:cat[ch]	:try 命令的一部分
|:cbottom|	:cbo[ttom]	滾動到 quickfox 視窗底部
|:cbuffer|	:cb[uffer]	分析錯誤資訊並跳轉到第一個
|:cc|		:cc		跳轉到特定的錯誤
|:cclose|	:ccl[ose]	關閉 quickfix 視窗
|:cd|		:cd		改變目錄
|:cdo|		:cdo		為每個合法的錯誤列表專案執行命令
|:cfdo|		:cfd[o]		為每個錯誤列表的檔案執行命令
|:center|	:ce[nter]	排版行，使其居中對齊
|:cexpr|	:cex[pr]	從表示式裡讀取錯誤並跳轉到第一個
|:cfile|	:cf[ile]	讀入含有錯誤資訊的檔案，並跳轉到第一個
|:cfirst|	:cfir[st]	跳轉到指定的錯誤上，預設為第一個
|:cgetbuffer|	:cgetb[uffer]	從緩衝區裡得到錯誤
|:cgetexpr|	:cgete[xpr]	從表達實裡得到錯誤
|:cgetfile|	:cg[etfile]	讀入含有錯誤資訊的檔案
|:changes|	:changes	顯示修改的列表
|:chdir|	:chd[ir]	改變當前目錄
|:checkpath|	:che[ckpath]	列出包含的標頭檔案
|:checktime|	:checkt[ime]	檢查載入緩衝區的時間標籤
|:chistory|	:chi[story]	列出所有的錯誤列表
|:clast|	:cla[st]	跳轉到指定的錯誤上，預設為最後一個
|:clearjumps|	:cle[arjumps	清除跳轉列表
|:clist|	:cl[ist]	列出所有錯誤
|:close|	:clo[se]	改變當前視窗
|:cmap|		:cm[ap]		類似於 ":map"，但用於命令列模式
|:cmapclear|	:cmapc[lear]	清除所有對映，用於命令列模式
|:cmenu|	:cme[nu]	為命令列模式增加選單
|:cnext|	:cn[ext]	跳轉到下一個錯誤
|:cnewer|	:cnew[er]	跳轉到下一個較新的錯誤列表
|:cnfile|	:cnf[ile]	跳轉到下一個檔案的第一個錯誤
|:cnoremap|	:cno[remap]	類似於 ":noremap"，但用於命令列模式
|:cnoreabbrev|	:cnorea[bbrev]	類似於 ":noreabbrev"，但用於命令列模式
|:cnoremenu|	:cnoreme[nu]	類似於 ":noremenu"，但用於命令列模式
|:copy|		:co[py]		複製行
|:colder|	:col[der]	跳轉到上一個較老的錯誤列表
|:colorscheme|	:colo[rscheme]	載入特定的色彩方案
|:command|	:com[mand]	建立使用者自定的命令
|:comclear|	:comc[lear]	清除所有使用者自定的命令
|:compiler|	:comp[iler]	為特定編譯器設定選項
|:continue|	:con[tinue]	回到 :while 開始處
|:confirm|	:conf[irm]	需要確認時，提示使用者
|:copen|	:cope[n]	開啟 quickfix 視窗
|:cprevious|	:cp[revious]	跳轉到上一個錯誤
|:cpfile|	:cpf[ile]	跳轉到上一個檔案的最後一個錯誤
|:cquit|	:cq[uit]	退出 Vim，帶錯誤碼
|:crewind|	:cr[ewind]	跳到指定的錯誤，預設為第一個
|:cscope|	:cs[cope]	執行 cscope 命令
|:cstag|	:cst[ag]	使用 cscope 來跳轉到標籤上
|:cunmap|	:cu[nmap]	類似於 ":unmap"，但用於命令列模式
|:cunabbrev|	:cuna[bbrev]	類似於 ":unabbrev"，但用於命令列模式
|:cunmenu|	:cunme[nu]	刪除命令列的選單
|:cwindow|	:cw[indow]	開啟或者關閉 quickfix 視窗
|:delete|	:d[elete]	刪除行
|:delmarks|	:delm[arks]	刪除位置標記
|:debug|	:deb[ug]	在除錯模式執行命令
|:debuggreedy|	:debugg[reedy]	從正常的輸入那裡讀取除錯模式命令
|:delcommand|	:delc[ommand]	刪除使用者自定的命令
|:delfunction|	:delf[unction]	刪除使用者函式
|:diffupdate|	:dif[fupdate]	更新 'diff' 緩衝區
|:diffget|	:diffg[et]	刪除當前緩衝區的所有差異
|:diffoff|	:diffo[ff]	關閉 diff 模式
|:diffpatch|	:diffp[atch]	應用補丁然後顯示差異
|:diffput|	:diffpu[t]	刪除另外一個緩衝區的差異
|:diffsplit|	:diffs[plit]	顯示和另外一個檔案的差異
|:diffthis|	:diffthis	使得當前視窗成為 diff 視窗
|:digraphs|	:dig[raphs]	顯示或者輸入二合字母
|:display|	:di[splay]	顯示暫存器
|:dl|		:dl		帶 'l' 標誌位 |:delete| 的簡寫
|:del|		:del[ete]l	帶 'l' 標誌位 |:delete| 的簡寫
|:djump|	:dj[ump]	跳轉到 #define
|:dlist|	:dli[st]	列出所有的 #define
|:doautocmd|	:do[autocmd]	在當前緩衝區應用自動命令
|:doautoall|	:doautoa[ll]	在所有載入的緩衝區上應用自動命令
|:dp|		:d[elete]p	帶 'p' 標誌位 |:delete| 的簡寫
|:drop|		:dr[op]		跳到編輯某檔案的視窗，不成功則在當前視窗編輯之
|:dsearch|	:ds[earch]	列出一個 #define
|:dsplit|	:dsp[lit]	分割視窗並跳轉到 #define
|:edit|		:e[dit]		編輯檔案
|:earlier|	:ea[rlier]	回到舊的改變，撤銷
|:echo|		:ec[ho]		回顯表示式結果
|:echoerr|	:echoe[rr]	類似於 :echo，如同錯誤一樣顯示和使用歷史
|:echohl|	:echoh[l]	為 echo 等命令設定高亮
|:echomsg|	:echom[sg]	等同於 :echo，在歷史裡放置訊息
|:echon|	:echon		等同於 :echo，但不留 <EOL>
|:else|		:el[se]		:if 命令的一部分
|:elseif|	:elsei[f]	:if 命令的一部分
|:emenu|	:em[enu]	按名字執行選單
|:endif|	:en[dif]	結束最近的 :if
|:endfor|	:endfo[r]	結束最近的 :for
|:endfunction|	:endf[unction]	結束使用者函式
|:endtry|	:endt[ry]	結束最近的 :try
|:endwhile|	:endw[hile]	結束最近的 :while
|:enew|		:ene[w]		編輯新的無名緩衝區
|:ex|		:ex		等同於 ":edit"
|:execute|	:exe[cute]	執行表示式的結果產生的字串
|:exit|		:exi[t]		等同於 ":xit"
|:exusage|	:exu[sage]	Ex 命令總覽
|:file|		:f[ile]		顯示或者設定當前檔名
|:files|	:files		列出緩衝區列表的所有檔案
|:filetype|	:filet[ype]	切換檔案型別檢測的開啟/關閉
|:filter|	:filt[er]	過濾跟隨的命令的輸出結果
|:find|		:fin[d]		在 'path' 裡找尋檔案並編輯之
|:finally|	:fina[lly]	:try 命令的一部分
|:finish|	:fini[sh]	退出 Vim 指令碼的執行
|:first|	:fir[st]	轉到引數列表的第一個檔案
|:fixdel|	:fix[del]	設定 <Del> 的鍵碼
|:fold|		:fo[ld]		建立摺疊
|:foldclose|	:foldc[lose]	關閉摺疊
|:folddoopen|	:foldd[oopen]	對所有不在關閉摺疊的行執行命令
|:folddoclosed|	:folddoc[losed]	對所有在關閉摺疊的行執行命令
|:foldopen|	:foldo[pen]	開啟摺疊
|:for|		:for		for 迴圈
|:function|	:fu[nction]	定義使用者函式
|:global|	:g[lobal]	對匹配的行執行命令
|:goto|		:go[to]		轉到緩衝區某位元組處
|:grep|		:gr[ep]		執行 'grepprg' 並轉到第一個匹配處
|:grepadd|	:grepa[dd]	類似 :grep，但附加到當前列表後
|:gui|		:gu[i]		啟動 GUI
|:gvim|		:gv[im]		啟動 GUI
|:hardcopy|	:ha[rdcopy]	傳送文字到印表機
|:help|		:h[elp]		開啟幫助視窗
|:helpclose|	:helpc[lose]	關閉幫助視窗
|:helpfind|	:helpf[ind]	開啟顯示幫助視窗的對話方塊
|:helpgrep|	:helpg[rep]	類似於 ":grep"，但搜尋幫助檔案
|:helptags|	:helpt[ags]	為一個目錄產生幫助標籤
|:highlight|	:hi[ghlight]	指定高亮方法
|:hide|		:hid[e]		為一個命令隱藏當前緩衝區
|:history|	:his[tory]	顯示歷史列表
|:insert|	:i[nsert]	插入文字
|:iabbrev|	:ia[bbrev]	類似於 ":abbrev"，但用於插入模式
|:iabclear|	:iabc[lear]	類似於 ":abclear"，但用於插入模式
|:if|		:if		條件滿足時執行命令
|:ijump|	:ij[ump]	跳轉到識別符號的定義
|:ilist|	:il[ist]	列出匹配識別符號的行
|:imap|		:im[ap]		類似於 ":map"，但用於插入模式
|:imapclear|	:imapc[lear]	類似於 ":map"，但用於插入模式
|:imenu|	:ime[nu]	為插入模式增加選單
|:inoremap|	:ino[remap]	類似於 ":noremap"，但用於插入模式
|:inoreabbrev|	:inorea[bbrev]	類似於 ":noreabbrev"，但用於插入模式
|:inoremenu|	:inoreme[nu]	類似於 ":noremenu"，但用於插入模式
|:intro|	:int[ro]	顯示介紹文字
|:isearch|	:is[earch]	列出匹配識別符號的一行
|:isplit|	:isp[lit]	分割視窗，並跳轉到識別符號的定義
|:iunmap|	:iu[nmap]	類似於 ":unmap"，但用於插入模式
|:iunabbrev|	:iuna[bbrev]	類似於 ":unabbrev"，但用於插入模式
|:iunmenu|	:iunme[nu]	刪除插入模式的選單
|:join|		:j[oin]		連線行
|:jumps|	:ju[mps]	顯示跳轉表
|:k|		:k		設定位置標記
|:keepalt|	:keepa[lt]	跟隨的命令保持輪換檔案不變
|:keepmarks|	:kee[pmarks]	跟隨的命令保持位置標記不變
|:keepjumps|	:keepj[umps]	跟隨的命令保持跳轉表和位置標記不變
|:keeppatterns|	:keepp[atterns]	跟隨的命令保持搜尋模式歷史不變
|:lNext|	:lN[ext]	轉到位置列表的上一個位置
|:lNfile|	:lNf[ile]	轉到上個檔案的最近一個位置
|:list|		:l[ist]		顯示行
|:laddexpr|	:lad[dexpr]	通過表示式補充位置
|:laddbuffer|	:laddb[uffer]	通過緩衝區補充位置
|:laddfile|	:laddf[ile]	把位置加到當前位置列表裡
|:last|		:la[st]		轉到引數列表的最後一個檔案
|:language|	:lan[guage]	設定語言 (locale)
|:later|	:lat[er]	轉到新的改變，重做
|:lbottom|	:lbo[ttom]	滾動到位置視窗的底部
|:lbuffer|	:lb[uffer]	分析位置並跳轉到第一個位置
|:lcd|		:lc[d]		改變本地的目錄
|:lchdir|	:lch[dir]	改變本地的目錄
|:lclose|	:lcl[ose]	關閉位置視窗
|:lcscope|	:lcs[cope]	類似於 ":cscope"，但使用位置列表
|:ldo|		:ld[o]		為每個合法位置列表專案執行命令
|:lfdo|		:lfd[o]		為每個位置列表的檔案執行命令
|:left|		:le[ft]		左對齊行
|:leftabove|	:lefta[bove]	使得分割的窗口出現在左側或者上方
|:let|		:let		給變數或選項賦值
|:lexpr|	:lex[pr]	從表示式裡讀取位置並跳轉到第一個
|:lfile|	:lf[ile]	從檔案裡讀取位置並跳轉到第一個
|:lfirst|	:lfir[st]	轉到指定的位置上，預設第一個
|:lgetbuffer|	:lgetb[uffer]	從緩衝區裡讀取位置
|:lgetexpr|	:lgete[xpr]	從表示式裡讀取位置
|:lgetfile|	:lg[etfile]	從檔案裡讀取位置
|:lgrep|	:lgr[ep]	執行 'grepprg' 並跳轉到第一個匹配
|:lgrepadd|	:lgrepa[dd]	類似於 :grep，但附加到當前列表上
|:lhelpgrep|	:lh[elpgrep]	類似於 ":helpgrep"，但使用位置列表
|:lhistory|	:lhi[story]	列出所有位置列表
|:ll|		:ll		轉到指定位置
|:llast|	:lla[st]	轉到指定位置，預設最後一個
|:llist|	:lli[st]	列出所有的位置
|:lmake|	:lmak[e]	執行外部命令 'makeprg' 並分析錯誤資訊
|:lmap|		:lm[ap]		類似於 ":map!"，但包括 Lang-Arg 模式
|:lmapclear|	:lmapc[lear]	類似於 ":mapclear!"，但包括 Lang-Arg 模式
|:lnext|	:lne[xt]	跳到下一個位置
|:lnewer|	:lnew[er]	跳到較新的位置列表
|:lnfile|	:lnf[ile]	跳到下一個檔案的第一個位置
|:lnoremap|	:ln[oremap]	類似於 ":noremap!"，但包括 Lang-Arg 模式
|:loadkeymap|	:loadk[eymap]	載入後面的鍵盤對映表，直到 EOF 為止
|:loadview|	:lo[adview]	從檔案裡為當前視窗載入檢視
|:lockmarks|	:loc[kmarks]	跟隨的命令保持位置標記不變
|:lockvar|	:lockv[ar]	給變數加鎖
|:lolder|	:lol[der]	轉到較舊的位置列表
|:lopen|	:lope[n]	開啟位置視窗
|:lprevious|	:lp[revious]	轉到前一個位置
|:lpfile|	:lpf[ile]	轉到上一個檔案的最近的位置
|:lrewind|	:lr[ewind]	轉到指定的位置，預設第一個
|:ls|		:ls		列出所有的緩衝區
|:ltag|		:lt[ag]		跳轉到標籤，並把匹配的標籤加到位置列表上
|:lunmap|	:lu[nmap]	類似於 ":unmap!"，但包括 Lang-Arg 模式
|:lua|		:lua		執行 |Lua| 命令
|:luado|	:luad[o]	對每行都執行 Lua 命令
|:luafile|	:luaf[ile]	執行 |Lua| 指令碼檔案
|:lvimgrep|	:lv[imgrep]	在若干檔案裡搜尋模式
|:lvimgrepadd|	:lvimgrepa[dd]	類似於 :vimgrep，但附加到當前列表
|:lwindow|	:lw[indow]	開啟或關閉位置視窗
|:move|		:m[ove]		移動行
|:mark|		:ma[rk]		設定位置標記
|:make|		:mak[e]		執行外部命令 'makeprg' 並分析其錯誤資訊
|:map|		:map		顯示或者輸入對映
|:mapclear|	:mapc[lear]	清除所有普通和可視模式的對映
|:marks|	:marks		列出所有的位置標記
|:match|	:mat[ch]	定義要高亮顯示的匹配的模式
|:menu|		:me[nu]		輸入新的選單項
|:menutranslate|  :menut[ranslate] 增加選單翻譯專案
|:messages|	:mes[sages]	顯示以前顯示的訊息
|:mkexrc|	:mk[exrc]	寫入當前對映和設定到檔案
|:mksession|	:mks[ession]	寫入會話資訊到檔案
|:mkspell|	:mksp[ell]	生成 .spl 拼寫檔案
|:mkvimrc|	:mkv[imrc]	寫入當前對映和設定到檔案
|:mkview|	:mkvie[w]	寫入當前視窗的檢視到檔案
|:mode|		:mod[e]		顯示或者改變螢幕模式
|:mzscheme|	:mz[scheme]	執行 MzScheme 命令
|:mzfile|	:mzf[ile]	執行 MzScheme 指令碼檔案
|:nbclose|	:nbc[lose]	關閉當前 Netbeans 會話
|:nbkey|	:nb[key]	傳遞一個鍵給 Netbeans
|:nbstart|	:nbs[art]	開啟一個新的 Netbeans 會話
|:next|		:n[ext]		跳轉到引數列表的下一個檔案
|:new|		:new		建立一個新的空白視窗
|:nmap|		:nm[ap]		類似於 ":map"，但使用普通模式
|:nmapclear|	:nmapc[lear]	清除普通模式的所有對映
|:nmenu|	:nme[nu]	為普通模式增加選單
|:nnoremap|	:nn[oremap]	類似於 ":noremap"，但使用普通模式
|:nnoremenu|	:nnoreme[nu]	類似於 ":noremenu"，但使用普通模式
|:noautocmd|	:noa[utocmd]	跟隨的若干命令不啟用自動命令
|:noremap|	:no[remap]	輸入不會被重新對映的對映
|:nohlsearch|	:noh[lsearch]	暫停 'hlsearch' 高亮
|:noreabbrev|	:norea[bbrev]	輸入不會被重新對映的縮寫
|:noremenu|	:noreme[nu]	輸入不會被重新對映的選單
|:normal|	:norm[al]	執行普通模式的命令
|:noswapfile|	:nos[wapfile]	跟隨的若干命令不建立交換檔案
|:number|	:nu[mber]	顯示文字行時給出行號
|:nunmap|	:nun[map]	類似於 ":unmap"，但使用普通模式
|:nunmenu|	:nunme[nu]	刪除普通模式的選單
|:oldfiles|	:ol[dfiles]	列出 viminfo 檔案中包含位置標記的檔案
|:open|		:o[pen]		啟動開啟模式 (沒有實現)
|:omap|		:om[ap]		類似於 ":map"，但使用操作符等待模式
|:omapclear|	:omapc[lear]	刪除操作符等待模式的所有對映
|:omenu|	:ome[nu]	為操作符等待模式增加選單
|:only|		:on[ly]		關閉當前視窗，除了當前的視窗以外
|:onoremap|	:ono[remap]	類似於 ":noremap"，但使用操作符等待模式
|:onoremenu|	:onoreme[nu]	類似於 ":noremenu"，但使用操作符等待模式
|:options|	:opt[ions]	開啟選項視窗
|:ounmap|	:ou[nmap]	類似於 ":unmap"，但使用操作符等待模式
|:ounmenu|	:ounme[nu]	刪除操作符等待模式的選單
|:ownsyntax|	:ow[nsyntax]	為本視窗設定新的區域性語法高亮
|:packadd|	:pa[ckadd]	從 'packpath' 載入外掛
|:packloadall|	:packl[oadall]	從 'packpath' 載入所有包
|:pclose|	:pc[lose]	關閉預覽視窗
|:pedit|	:ped[it]	在預覽視窗編輯檔案
|:perl|		:pe[rl]		執行 Perl 命令
|:print|	:p[rint]	顯示行
|:profdel|	:profd[el]	停止剖視 (profile) 函式或指令碼
|:profile|	:prof[ile]	剖視 (profile) 函式或指令碼
|:promptfind|	:pro[mptfind]	開啟 GUI 對話方塊進行搜尋
|:promptrepl|	:promptr[epl]	開啟 GUI 對話方塊進行搜尋/替代
|:perldo|	:perld[o]	對每行都執行 Perl 命令
|:pop|		:po[p]		跳轉到標籤棧較舊的專案上
|:popup|	:popu[p]	根據名字彈出選單
|:ppop|		:pp[op]		在預覽視窗 ":pop"
|:preserve|	:pre[serve]	寫入所有文字到交換檔案
|:previous|	:prev[ious]	跳轉到引數列表裡的上一個檔案
|:psearch|	:ps[earch]	類似於 ":ijump"，但在預覽視窗顯示匹配
|:ptag|		:pt[ag]		在預覽視窗顯示標籤
|:ptNext|	:ptN[ext]	在預覽視窗 |:tNext|
|:ptfirst|	:ptf[irst]	在預覽視窗 |:trewind|
|:ptjump|	:ptj[ump]	在預覽視窗 |:tjump| 和顯示標籤
|:ptlast|	:ptl[ast]	在預覽視窗 |:tlast|
|:ptnext|	:ptn[ext]	在預覽視窗 |:tnext|
|:ptprevious|	:ptp[revious]	在預覽視窗 |:tprevious|
|:ptrewind|	:ptr[ewind]	在預覽視窗 |:trewind|
|:ptselect|	:pts[elect]	在預覽視窗 |:tselect| 和顯示標籤
|:put|		:pu[t]		插入暫存器的內容到文字
|:pwd|		:pw[d]		顯示當前目錄
|:py3|		:py3		執行 Python 3 命令
|:python3|	:python3	同 :py3
|:py3do|	:py3d[o]	對每行都執行 Python 3 命令
|:py3file|	:py3f[ile]	執行 Python 3 指令碼檔案
|:python|	:py[thon]	執行 Python 命令
|:pydo|		:pyd[o]		對每行都執行 Python 命令
|:pyfile|	:pyf[ile]	執行 Python 指令碼檔案
|:pyx|		:pyx		執行 |python_x| 命令
|:pythonx|	:pythonx	等同於 :pyx
|:pyxdo|	:pyxd[o]	對每行都執行 |python_x| 命令
|:pyxfile|	:pyxf[ile]	執行 |python_x| 指令碼檔案
|:quit|		:q[uit]		退出當前視窗 (如果只有一視窗，則退出 Vim)
|:quitall|	:quita[ll]	退出 Vim
|:qall|		:qa[ll]		退出 Vim
|:read|		:r[ead]		讀入檔案到文字
|:recover|	:rec[over]	從交換檔案裡恢復檔案
|:redo|		:red[o]		重做一次撤銷的改變
|:redir|	:redi[r]	重定向訊息到檔案或者暫存器
|:redraw|	:redr[aw]	強迫顯示的重畫
|:redrawstatus|	:redraws[tatus]	強迫狀態行的重畫
|:registers|	:reg[isters]	顯示暫存器的內容
|:resize|	:res[ize]	改變當前視窗的高度
|:retab|	:ret[ab]	改變製表大小
|:return|	:retu[rn]	從使用者函式返回
|:rewind|	:rew[ind]	轉到引數列表的第一個檔案
|:right|	:ri[ght]	右對齊文字
|:rightbelow|	:rightb[elow]	使得分割窗口出現在右側或者下方
|:ruby|		:rub[y]		執行 Ruby 命令
|:rubydo|	:rubyd[o]	對每行執行 Ruby 命令
|:rubyfile|	:rubyf[ile]	執行 Ruby 指令碼檔案
|:rundo|	:rund[o]	從檔案裡讀入撤銷資訊
|:runtime|	:ru[ntime]	執行 'runtimepath' 裡的 vim 指令碼
|:rviminfo|	:rv[iminfo]	讀取 viminfo 檔案
|:substitute|	:s[ubstitute]	查詢和替代文字
|:sNext|	:sN[ext]	分割視窗並轉到引數列表的前一個檔案
|:sandbox|	:san[dbox]	在沙盤裡執行命令
|:sargument|	:sa[rgument]	分割視窗並轉到引數列表的某一個檔案
|:sall|		:sal[l]		為引數列表的每個檔案開啟視窗
|:saveas|	:sav[eas]	用別的名字儲存檔案。
|:sbuffer|	:sb[uffer]	分割視窗並轉到緩衝區列表的某一個檔案
|:sbNext|	:sbN[ext]	分割視窗並轉到緩衝區列表的前一個檔案
|:sball|	:sba[ll]	為緩衝區列表的每個檔案開啟視窗
|:sbfirst|	:sbf[irst]	分割視窗並轉到緩衝區列表的第一個檔案
|:sblast|	:sbl[ast]	分割視窗並轉到緩衝區列表的最後一個檔案
|:sbmodified|	:sbm[odified]	分割視窗並轉到緩衝區列表的修改過的檔案
|:sbnext|	:sbn[ext]	分割視窗並轉到緩衝區列表的後一個檔案
|:sbprevious|	:sbp[revious]	分割視窗並轉到緩衝區列表的前一個檔案
|:sbrewind|	:sbr[ewind]	分割視窗並轉到緩衝區列表的第一個檔案
|:scriptnames|	:scr[iptnames]	列出所有執行過的 Vim 指令碼的名字
|:scriptencoding| :scripte[ncoding]	執行過的 Vim 指令碼使用的編碼
|:scscope|	:scs[cope]	分割視窗並執行 cscope 命令
|:set|		:se[t]		顯示或設定選項
|:setfiletype|	:setf[iletype]	設定 'filetype'，除非已經設定過
|:setglobal|	:setg[lobal]	顯示或者設定全域性選項值
|:setlocal|	:setl[ocal]	顯示或者設定本地選項值
|:sfind|	:sf[ind]	分割當前視窗並編輯 'path' 的檔案
|:sfirst|	:sfir[st]	分割視窗並轉到引數列表的第一個檔案
|:shell|	:sh[ell]	退到外殼程式
|:simalt|	:sim[alt]	Win32 GUI: 模擬 Windows ALT 鍵
|:sign|		:sig[n]		操作標號
|:silent|	:sil[ent]	安靜地執行命令
|:sleep|	:sl[eep]	幾秒內不作任何事
|:slast|	:sla[st]	分割視窗並轉到引數列表的最後一個檔案
|:smagic|	:sm[agic]	帶 'magic' 的 :substitute
|:smap|		:smap		類似於 ":map"，但用於選擇模式
|:smapclear|	:smapc[lear]	刪除選擇模式所有的對映
|:smenu|	:sme[nu]	增加選擇模式選單
|:smile|	:smi[le]	讓使用者高興一下
|:snext|	:sn[ext]	分割視窗並轉到引數列表的下一個檔案
|:snomagic|	:sno[magic]	帶 'nomagic' 的 :substitute
|:snoremap|	:snor[emap]	類似於 ":noremap"，但用於選擇模式
|:snoremenu|	:snoreme[nu]	類似於 ":noremenu"，但用於選擇模式
|:sort|		:sor[t]		給行排序
|:source|	:so[urce]	從檔案裡讀取 Vim 或 Ex 命令
|:spelldump|	:spelld[ump]	分割視窗並用正確的單詞填充
|:spellgood|	:spe[llgood]	增加拼寫的好詞
|:spellinfo|	:spelli[nfo]	顯示載入的拼寫檔案的資訊
|:spellrepall|	:spellr[epall]	像上次 |z=| 那樣，但替換所有的壞詞
|:spellundo|	:spellu[ndo]	刪除好詞或壞詞
|:spellwrong|	:spellw[rong]	增加拼寫錯誤
|:split|	:sp[lit]	分割當前視窗
|:sprevious|	:spr[evious]	分割視窗並轉到引數列表的前一個檔案
|:srewind|	:sre[wind]	分割視窗並轉到引數列表的第一個檔案
|:stop|		:st[op]		暫停編輯器並退回外殼
|:stag|		:sta[g]		分割視窗並跳轉到標籤上
|:startgreplace|  :startg[replace] 開始虛擬替換模式
|:startreplace|	:startr[eplace]	開始替換模式
|:startinsert|	:star[tinsert]	開始插入模式
|:stopinsert|	:stopi[nsert]	退出插入模式
|:stjump|	:stj[ump]	執行 ":tjump" 並分割視窗
|:stselect|	:sts[elect]	執行 ":tselect" 並分割視窗
|:sunhide|	:sun[hide]	等同於 ":unhide"
|:sunmap|	:sunm[ap]	類似於 ":unmap"，但用於選擇模式
|:sunmenu|	:sunme[nu]	刪除選擇模式的選單
|:suspend|	:sus[pend]	等同於 ":stop"
|:sview|	:sv[iew]	分割視窗並以只讀模式編輯檔案
|:swapname|	:sw[apname]	顯示當前交換檔案的名字
|:syntax|	:sy[ntax]	語法高亮
|:syntime|	:synti[me]	測量語法高亮速度
|:syncbind|	:sync[bind]	同步滾動繫結
|:t|		:t		等同於 ":copy"
|:tNext|	:tN[ext]	跳轉到上一個匹配的標籤
|:tabNext|	:tabN[ext]	跳到上一個標籤頁
|:tabclose|	:tabc[lose]	關閉當前標籤頁
|:tabdo|	:tabdo		為每個標籤頁執行命令
|:tabedit|	:tabe[dit]	在新標籤頁裡編輯檔案
|:tabfind|	:tabf[ind]	尋找 'path' 裡的檔案，在新標籤頁裡編輯之
|:tabfirst|	:tabfir[st]	轉到第一個標籤頁
|:tablast|	:tabl[ast]	轉到最後一個標籤頁
|:tabmove|	:tabm[ove]	把標籤頁移到別的位置
|:tabnew|	:tabnew		在新標籤頁裡編輯檔案
|:tabnext|	:tabn[ext]	轉到下一個標籤頁
|:tabonly|	:tabo[nly]	關閉所有除了當前標籤頁以外的所有標籤頁
|:tabprevious|	:tabp[revious]	轉到前一個標籤頁
|:tabrewind|	:tabr[ewind]	轉到第一個標籤頁
|:tabs|		:tabs		列出標籤頁以及裡面包含的內容
|:tab|		:tab		開啟新視窗時建立新的標籤頁
|:tag|		:ta[g]		跳轉到標籤上
|:tags|		:tags		顯示標籤棧的內容
|:tcl|		:tc[l]		執行 Tcl 命令
|:tcldo|	:tcld[o]	為每行執行 Tcl 命令
|:tclfile|	:tclf[ile]	執行 Tcl 指令碼檔案
|:tearoff|	:te[aroff]	撕下一個選單
|:tfirst|	:tf[irst]	轉到第一個匹配的標籤
|:throw|	:th[row]	丟擲例外
|:tjump|	:tj[ump]	類似於 ":tselect"，只有一個匹配時直接跳轉之
|:tlast|	:tl[ast]	跳轉到最後一個匹配的標籤
|:tmenu|	:tm[enu]	定義選單的工具提示
|:tnext|	:tn[ext]	跳轉到下一個匹配的標籤
|:topleft|	:to[pleft]	使得分割的窗口出現在頂部或者最左端
|:tprevious|	:tp[revious]	跳轉到上一個匹配的標籤
|:trewind|	:tr[ewind]	跳轉到第一個匹配的標籤
|:try|		:try		執行命令，錯誤或者例外時終止
|:tselect|	:ts[elect]	列出匹配的標籤並從中選擇一個
|:tunmenu|	:tu[nmenu]	刪除選單的工具提示
|:undo|		:u[ndo]		撤銷最近的改變
|:undojoin|	:undoj[oin]	將下一個改變和上一個撤銷塊合併
|:undolist|	:undol[ist]	列出撤銷樹的葉結點
|:unabbreviate|	:una[bbreviate]	刪除縮寫
|:unhide|	:unh[ide]	為緩衝區列表裡每個載入的檔案開啟視窗
|:unlet|	:unl[et]	刪除變數
|:unlockvar|	:unlo[ckvar]	給變數解鎖
|:unmap|	:unm[ap]	刪除對映
|:unmenu|	:unme[nu]	刪除選單
|:unsilent|	:uns[ilent]	非安靜模式執行命令
|:update|	:up[date]	如果有修改，寫回緩衝區
|:vglobal|	:v[global]	對不匹配的行，執行命令
|:version|	:ve[rsion]	顯示版本號和其它資訊
|:verbose|	:verb[ose]	執行命令，過程中設定 'verbose'
|:vertical|	:vert[ical]	使得跟隨的命令垂直分割
|:vimgrep|	:vim[grep]	在若干檔案裡查詢模式
|:vimgrepadd|	:vimgrepa[dd]	類似於 :vimgrep，但附加到當前列表
|:visual|	:vi[sual]	等同於 ":edit"，但關掉 "Ex" 模式
|:viusage|	:viu[sage]	普通模式命令的總覽
|:view|		:vie[w]		以只讀方式編輯檔案
|:vmap|		:vm[ap]		類似於 ":map"，但使用可視+選擇模式
|:vmapclear|	:vmapc[lear]	刪除可視+選擇模式所有的對映
|:vmenu|	:vme[nu]	為可視+選擇模式增加選單
|:vnew|		:vne[w]		建立新的空白視窗，垂直分割
|:vnoremap|	:vn[oremap]	類似於 ":noremap"，但使用可視+選擇模式
|:vnoremenu|	:vnoreme[nu]	類似於 ":noremenu"，但使用可視+選擇模式
|:vsplit|	:vs[plit]	垂直分割當前視窗
|:vunmap|	:vu[nmap]	類似於 ":unmap"，但使用可視+選擇模式
|:vunmenu|	:vunme[nu]	刪除可視+選擇模式的選單
|:windo|	:windo		為每個視窗執行命令
|:write|	:w[rite]	寫回檔案
|:wNext|	:wN[ext]	寫回檔案，然後跳轉到引數列表的前一個檔案
|:wall|		:wa[ll]		寫回所有 (改變的) 緩衝區
|:while|	:wh[ile]	只要條件滿足，執行迴圈體
|:winsize|	:wi[nsize]	取得或者設定視窗大小 (已廢棄)
|:wincmd|	:winc[md]	執行視窗 (CTRL-W) 命令
|:winpos|	:winp[os]	取得或者設定視窗位置
|:wnext|	:wn[ext]	寫回檔案，然後跳轉到引數列表的下一個檔案
|:wprevious|	:wp[revious]	寫回檔案，然後跳轉到引數列表的前一個檔案
|:wq|		:wq		寫回檔案，然後退出視窗或者 Vim
|:wqall|	:wqa[ll]	寫回所有 (改變的) 緩衝區然後退出 Vim
|:wsverb|	:ws[verb]	把動詞通過 IPC 傳送給 workshop
|:wundo|	:wu[ndo]	把撤銷資訊寫入檔案
|:wviminfo|	:wv[iminfo]	寫入 viminfo 檔案
|:xit|		:x[it]		如果緩衝區被改動，寫入之。然後退出視窗或者 Vim
|:xall|		:xa[ll]		等同於 ":wqall"
|:xmapclear|	:xmapc[lear]	刪除可視模式的所有對映
|:xmap|		:xm[ap]		類似於 ":map"，但使用可視模式
|:xmenu|	:xme[nu]	增加可視模式的選單
|:xnoremap|	:xn[oremap]	類似於 ":noremap"，但使用可視模式
|:xnoremenu|	:xnoreme[nu]	類似於 ":noremenu"，但使用可視模式
|:xunmap|	:xu[nmap]	類似於 ":unmap"，但使用可視模式
|:xunmenu|	:xunme[nu]	刪除可視模式的選單
|:yank|		:y[ank]		抽出行到暫存器
|:z|		:z		顯示一些行
|:~|		:~		重複上次 ":substitute"


 vim:tw=78:ts=8:ft=help:norl:
