*if_ruby.txt*   For Vim version 8.0.  最近更新: 2017年7月


		  VIM 參考手冊    by Shugo Maeda
				譯者: Willis, tocer
				http://vimcdoc.sf.net

Vim 的 Ruby 介面					*ruby* *Ruby*


1. 命令				|ruby-commands|
2. Vim 模組			|ruby-vim|
3. Vim::Buffer 物件		|ruby-buffer|
4. Vim::Window 物件		|ruby-window|
5. 全域性變數			|ruby-globals|
6. 動態調入			|ruby-dynamic|

{Vi 無此功能}
			*E266* *E267* *E268* *E269* *E270* *E271* *E272* *E273*

只有編譯 Vim 時加入 |+ruby| 特性才會有 Ruby 介面功能。

ruby 的主頁是 http://www.ruby-lang.org/。你可以在那裡找到 Ruby 下載的連結。

==============================================================================
1. 命令							*ruby-commands*

							*:ruby* *:rub*
:rub[y] {cmd}		執行 Ruby 命令 {cmd}。要試一試: >
				:ruby print "Hello"

:rub[y] << {endpattern}
{script}
{endpattern}
			執行 Ruby 指令碼 {script}。
			{endpattern} _不能_有前導空白。如果 {endpattern} 省
			略，預設為單個句號 '.'，類似於 |:append| 和 |:insert|
			命令。這種形式的 |:ruby| 命令主要用於在 vim 腳本里包含
			ruby 程式碼。
			注意: 如果編譯時沒有加入 Ruby 特性，這個命令不會工作。
			為了避免錯誤，參看 |script-here|。

示例 Vim 指令碼: >

	function! RedGem()
	ruby << EOF
	class Garnet
		def initialize(s)
			@buffer = Vim::Buffer.current
			vimputs(s)
		end
		def vimputs(s)
			@buffer.append(@buffer.count,s)
		end
	end
	gem = Garnet.new("pretty")
	EOF
	endfunction
<
要看執行的 Ruby 版本: >
	:ruby print RUBY_VERSION
<

						*:rubydo* *:rubyd* *E265*
:[range]rubyd[o] {cmd}	在 [range] 界定的每行上分別執行 Ruby 命令 {cmd}，執行
			時，$_ 設為相應的行文字，不含結尾的 <EOL>。修改 $_ 就
			會修改相應的行，不過要 注意: 此命令不能用來增加或者刪
			除行。
			預設的 [range] 是整個檔案: "1,$"。

							*:rubyfile* *:rubyf*
:rubyf[ile] {file}	執行 Ruby 指令碼檔案 {file}。這和 `:ruby load 'file'` 相
			當，但可用檔名自動補全功能。


|sandbox| 裡不能執行 Ruby 命令。

==============================================================================
2. Vim 模組						*ruby-vim*

Ruby 程式碼通過 "Vim" 模組呼叫所有的 vim 功能。

概述: >
	print "Hello"				# 顯示訊息
	Vim.command(cmd)			# 執行 ex 命令
	num = Vim::Window.count			# 得到視窗行數
	w = Vim::Window[n]			# 得到第 "n" 個視窗
	cw = Vim::Window.current		# 得到當前視窗
	num = Vim::Buffer.count			# 得到緩衝區的個數
	b = Vim::Buffer[n]			# 得到第 "n" 個緩衝區
	cb = Vim::Buffer.current		# 得到當前緩衝區
	w.height = lines			# 設定視窗高度
	w.cursor = [row, col]			# 設定窗口裡的游標位置
	pos = w.cursor				# 得到陣列 [行, 列]
	name = b.name				# 得到緩衝區的檔名
	line = b[n]				# 得到緩衝區的某一行
	num = b.count				# 得到總的行數
	b[n] = str				# 設定緩衝區的某一行
	b.delete(n)				# 刪除某一行
	b.append(n, str)			# 在第 n 行後增加一行
	line = Vim::Buffer.current.line		# 得到當前行
	num = Vim::Buffer.current.line_number	# 得到當前行號
	Vim::Buffer.current.line = "test"	# 設定當前行
<

模組函式:

							*ruby-message*
Vim::message({msg})
	顯示訊息 {msg}。

							*ruby-set_option*
Vim::set_option({arg})
	設定 vim 選項。{arg} 可以是任何一個 ":set" 命令接受的命令。 注意 這意
	味著引數裡不能有空格！參見 |:set|。

							*ruby-command*
Vim::command({cmd})
	執行 Ex 命令 {cmd}。

							*ruby-evaluate*
Vim::evaluate({expr})
	用 vim 內部的表示式分析器執行 {expr} (參看 |expression|)。執行結果返回
	的型別如下:
	- Integer， 如果 Vim 表示式返回數值
	- Float，如果 Vim 表示式返回浮點數
	- String，如果 Vim 表示式返回字串
	- Array，如果 Vim 表示式返回 Vim 列表
	- Hash，如果 Vim 表示式返回 Vim 字典
	遞迴擴充套件字典和列表。

==============================================================================
3. Vim::Buffer 物件					*ruby-buffer*

Vim::Buffer 物件代表 Vim 緩衝區。

類方法:

current		返回當前緩衝區物件。
count		返回緩衝區的總數。
self[{n}]	返回第 {n} 個緩衝區。首個緩衝區的序號是 0。

方法:

name		返回緩衝區的名字。
number		返回緩衝區的序號。
count		返回總行數。
length		返回總行數。
self[{n}]	從緩衝區中返回一行。{n} 是行號。
self[{n}] = {str}
		設定緩衝區的一行。{n} 是行號。
delete({n})	刪除緩衝區的一行。{n} 是行號。
append({n}, {str})
		在第 {n} 行後增加一行。
line		如果緩衝區啟用，返回緩衝區的當前行。
line = {str}    如果緩衝區啟用，設定緩衝區的當前行。
line_number     如果緩衝區啟用，返回當前行的行號。

==============================================================================
4. Vim::Window 物件					*ruby-window*

Vim::Window 物件代表 Vim 視窗。

類方法:

current		返回當前視窗物件。
count		返回視窗的總數。
self[{n}]	返回第 {n} 個視窗。首個視窗的序號是 0。

方法:

buffer		返回顯示的緩衝區物件。
height		返回視窗的高度。
height = {n}	設定視窗的高度為 {n}。
width		返回視窗的寬度。
width = {n}	設定視窗的寬度為 {n}。
cursor		返回游標位置陣列: [行、列]。
cursor = [{row}, {col}]
		設定游標位置為行 {row} 和列 {col}。

==============================================================================
5. 全域性變數						*ruby-globals*

有兩個全域性變數。

$curwin		當前視窗物件。
$curbuf		當前緩衝區物件。

==============================================================================
6. 動態調入						*ruby-dynamic*

MS-Windows 和 Unix 上，可以動態調入 Ruby 庫。|:version| 輸出這時應包括
|+ruby/dyn|。

這意味著 Vim 只有在必要時才尋找 Ruby DLL 或動態庫檔案。如果不使用 Ruby 介面，
你就不需要它。這樣，即使沒有該 DLL 檔案，你也可使用 Vim。


MS-Windows ~

必須安裝正確的 Ruby 版本才能工作。該包可以從這裡下載:
http://rubyinstaller.org/downloads/
目前的版本是 rubyinstaller-2.2.5.exe

要使用 Ruby 介面，Ruby DLL 必須在搜尋路徑上。控制檯窗口裡輸入 "path" 可以看到
(搜尋路徑) 當前使用的目錄。也可用 'rubydll' 選項設定 Ruby DLL。

DLL 名必須匹配 Vim 編譯時所使用的 Ruby 版本。目前，該名字為
"msvcrt-ruby220.dll"，也就是 Ruby 2.2.X。要確信這一點，編輯 "gvim.exe" 檔案並
查詢 "ruby\d*.dll\c"。

如果編譯 Vim 時要使用帶 MSVC 的 RubyInstaller 1.9 或 2.X，需要一點技巧。詳見
src/INSTALLpc.txt。


Unix ~

'rubydll' 選項可用來指定 Ruby 共享庫檔案，而不用編譯時指定的 DYNAMIC_RUBY_DLL
檔案。共享庫的版本必須和 Vim 編譯使用的 Ruby 版本保持一致。

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
