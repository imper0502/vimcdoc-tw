*usr_42.txt*	For Vim version 8.0.  最近更新: 2017年8月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: lang2 http://vimcdoc.sf.net

			      新增新選單


現在你應該已經瞭解到 Vim 是非常靈活的。這也包括在 GUI 中使用的選單。你可以定義
你自己的選單項來更方便的使用一些命令。這是為那些滑鼠愛好者準備的。

|42.1|	簡介
|42.2|	選單命令
|42.3|	雜項
|42.4|	工具欄和彈出選單

             下一章: |usr_43.txt|  使用檔案型別
             前一章: |usr_41.txt|  編寫 Vim 指令碼
               目錄: |usr_toc.txt|

==============================================================================
*42.1*	簡介

Vim 使用的選單是定義在 "$VIMRUNTIME/menu.vim" 檔案裡的。如果你想編寫自己的菜
單，你可以先看看那個檔案。
   使用 ":menu" 可以定義一個選單項。這個命令的基本格式如下: >

	:menu {menu-item} {keys}

{menu-item} 告訴 Vim 把選單項放在哪。"File.Save" 是一個典型的例子。它表示
"File" 選單下的 "Save" 選單項。那個點被用來分隔選單的名字。例: >

	:menu File.Save  :update<CR>

":update" 命令在檔案被修改時寫入檔案。
   你可以再加一層: "Edit.Settings.Shiftwidth" 在 "Edit" 選單下定義一個
"Settings" 子選單，然後在其下定義一個選單項 "Shiftwidth"。你還可以再加更深的
層。但別用太多，那樣要找到一個選單層就需要太多的滑鼠動作。
   ":menu" 命令和 :map 命令很象: 左邊指定了該選單項如何被觸發，右邊定義它將執
行的字串。{keys} 只是一串字元，Vim 會象你鍵入它們一樣使用該字串。因此在插
入模式下，當 {keys} 不包括特殊字元時，Vim 會插入那些字元。


菜 單 快 捷 鍵

& 字元可以被用來指示一個選單快捷鍵。例如，你可以使用 Alt-F 來選擇 "File" 然後
S 來選中 "Save"。(不過 'winaltkeys' 選項可以關閉這種操作！)。因此，該選單項的
{menu-item} 是 "&File.&Save"。快捷鍵使用的字元在選單中會被加上下劃線。
   你必須自己留神不要在同一選單中使用兩個一樣的快捷鍵，那樣你就不知道哪個會被
選中。Vim 是不會提醒你的。


優 先 級

File.Save 真正的定義是: >

	:menu 10.340 &File.&Save<Tab>:w  :confirm w<CR>

數字 10.340 叫優先順序數。Vim 用它來決定把該選單放在哪裡。第一個數 (10) 表示該菜
單在選單欄上的位置。優先順序數較小的選單會被放在左邊，大數字對應的選單會被放在右
邊。下面是標準選單的優先順序:

	  10	20     40     50      60       70		9999

	+------------------------------------------------------------+
	| File	Edit  Tools  Syntax  Buffers  Window		Help |
	+------------------------------------------------------------+

Help 選單被指定了一個很大的值，這樣它就會被放置在最右邊。
   第二個數字 (340) 決定選單項在下拉選單中的位置。較小的數字在上邊，大的在下
邊。下面是 File 選單的優先順序:

			+-----------------+
	    10.310	|Open...	  |
	    10.320	|Split-Open...	  |
	    10.325	|New		  |
	    10.330	|Close		  |
	    10.335	|---------------- |
	    10.340	|Save		  |
	    10.350	|Save As...	  |
	    10.400	|---------------- |
	    10.410	|Split Diff with  |
	    10.420	|Split Patched By |
	    10.500	|---------------- |
	    10.510	|Print		  |
	    10.600	|---------------- |
	    10.610	|Save-Exit	  |
	    10.620	|Exit		  |
			+-----------------+

注意這些數值不是連續的。那些沒有被使用的值可以被用來插入你自己定義的項。(通常
情況下，最好不要改動那些標準選單。如果需要，你可以建立新的選單)。
   當建立子選單時，你可以加入另一級數字。這樣每一個選單項都有其優先順序數。


特 殊 字 符

這裡用的 {menu-item} 的例子是 "&File.&Save<Tab>:w"。這裡有很重要一點:
{menu-item} 必須是一個單詞。如果你想加一個點，一個空格或製表符，你要麼使用 <>
記法 (例如 <Space> 和 <Tab>) 或使用反斜槓。 >

	:menu 10.305 &File.&Do\ It\.\.\. :exit<CR>

上面例子中，選單項名 "Do It..." 包括一個空格，執行的命令是 ":exit<CR>"。

選單名中的 <Tab> 字元可以被用來分隔選單定義部分和使用者提示部分。<Tab> 之後的部
分會被以右對齊格式顯示。File.Save 選單項的定義是 "&File.&Save<Tab>:w"。因此該
選單名是 "File.Save"；提示是 ":w"。


分 隔 符

分隔符 (線) 可以用來將相關的選單放在一起。開始和最後一個字元都是 '-' 的選單名
就會認為是選單分隔符，例如 "-sep-"。在同一個選單中使用多個分隔符時，它們的名字
必須被區別開，否則其名字不相干。
   分隔符所相關的命令永遠不會被執行。但你同樣得定義一個。用一個冒號就行了。例
如: >

	:amenu 20.510 Edit.-sep3- :

==============================================================================
*42.2*	選單命令

你可以為某一特定的執行模式定義專用的選單。就好象各種 ":map" 命令的變體一樣:

	:menu		普通、可視和操作符等待模式
	:nmenu		普通模式
	:vmenu		可視模式
	:omenu		操作符等待模式
	:menu!		插入和命令列模式
	:imenu		插入模式
	:cmenu		命令列模式
	:amenu		所有模式

為了避免選單項執行的命令被重對映，使用 ":noremenu"、":nnoremenu"、"anoremenu"
等形式。


使 用 :AMENU

":amenu" 命令有些不同。它假定你給出的 {keys} 是被用在普通模式下的。當 Vim 在可
視或插入模式下執行並執行這些選單命令時，Vim 先回到普通模式。":amenu" 會替你插
入 CTRL-C 或 CTRL-O。例如，如果你使用這個命令:
>
	:amenu  90.100 Mine.Find\ Word  *

你得到的選單命令將會是:

	Normal mode:		*
	Visual mode:		CTRL-C *
	Operator-pending mode:	CTRL-C *
	Insert mode:		CTRL-O *
	Command-line mode:	CTRL-C *

在命令列模式下 CTRL-C 會清除已鍵入的命令。在可視和操作符等待模式下 CTRL-C 會終
止該模式。在插入模式下 CTRL-O 會執行該命令然後回到插入模式。
   CTRL-O 只能用來執行一個命令。如果你要執行多於兩個命令，你可以把它們定義成一
個函式然後在選單定義中呼叫該函式。例如: >

	:amenu  Mine.Next\ File  :call <SID>NextFile()<CR>
	:function <SID>NextFile()
	:  next
	:  1/^Code
	:endfunction

這個選單項用 ":next" 命令移動到引數列表中的下一個檔案，然後查詢其中以 "Code"
開始的行。
   函式名前的 <SID> 是一個指令碼 ID。這使得該函式成為當前 Vim 指令碼檔案的區域性函
數。這是用來避免在其他指令碼定義了相同名字的函式的麻煩。見 |<SID>|。


默 菜 單

Vim 像你鍵入 {keys} 一樣執行選單命令。對於 ":" 命令這就意味著你將在命令列上看
到該命令及其輸出。如果命令很長的話，那個令人討厭的 hit-Enter 提示就會出現。
   為了避免這種情況，讓那個選單保持緘默。用 <silent> 引數就可以了。拿前面例子
中的 NextFile() 呼叫來說，當你使用該選單時，你將在命令列上看到:

	:call <SNR>34_NextFile() ~

為了避免這些文字被顯示，你可以用 "<silent>" 作為第一個引數: >

	:amenu <silent> Mine.Next\ File :call <SID>NextFile()<CR>

別濫用 "<silent>"。對於短的命令來說是不需要的。如果你定義一個選單給其他人使
用，讓他看到被執行的命令會提示他如何只用鍵盤來執行這些操作而無需大費周章使用鼠
標。


菜 單 列 表

當執行 menu 命令時不帶 {keys} 部分，列出已經定義的選單。你可以給出 {menu-item}
或其中的一部分，來列出指定的選單。例如: >

	:amenu

這將列出所有選單。太長了！最好指定選單名來減短一些: >

	:amenu Edit

這隻列出 "Edit" 選單下的為所有模式定義的各項。要只列出一個為插入模式定義的選單
項: >

	:imenu Edit.Undo

注意要使用準確的名字。大小寫是有區別的。但是 '&' 可以被省略。<Tab> 以及其後的
提示也可以被省略。


刪 除 菜 單

要刪除一個選單，使用 "unmenu" 命令加上和列出選單名的命令一樣的引數。這樣，
":menu" 變成 ":unmenu"，":nmenu" 變成 ":nunmenu"，依此類推。要刪除為插入模式定
義的 "Tools.Make" 選單項: >

	:iunmenu Tools.Make

你也可以用選單名來刪除包括所有子項的整個選單。例如: >

	:aunmenu Syntax

這會刪除 Syntax 選單及其所有選單項。

==============================================================================
*42.3*	雜項

你可以利用 'guioptions' 選項來改變選單的外觀。預設情況下除了 "M" 以外，所有的
標誌位都將被使用。你可以用下面的標誌位來選擇性去除選單的某一部分。這些標誌位的
使用如下: >

	:set guioptions-=m
<
	m		當該位被清除時整個選單都會消失。

	M		加入該位時，預設選單不會被載入。

	g		當該位被清除時那些無效選單會完全消失而不是僅僅被染灰
			(並非所有的系統都有效。)

	t		當該位被清除時不使用可撕下選單功能。

一個選單頂部的那個用點組成的行不是分隔符。當你選中該行時，該選單會被 "撕下"。
它顯示在單獨的窗口裡，亦稱撕下選單。當你經常使用同一選單的時候，這是非常方便
的。

要翻譯選單項，見 |:menutrans|。

既然選擇選單項需要使用滑鼠，最好在選單項裡使用 ":browse" 命令來選擇檔案；使用
":confirm" 來獲得一個對話方塊。這兩個也可以聯起來用: >

	:amenu File.Open  :browse confirm edit<CR>

":browse" 彈出一個檔案瀏覽器用來選擇檔案。":confirm" 在當前檔案改動後會自動彈
出一個確認的對話方塊。你可以選擇儲存或放棄改動，或者取消命令。
   對於更復雜的選單項，可以使用 confirm() 和 inputdialog() 函式。系統預設的菜
單包含若干例項。

==============================================================================
*42.4*	工具欄和彈出選單

Vim 中有兩個特殊的選單: ToolBar (工具欄) 和 PopUp (彈出選單)。以這兩個名字開始
的選單不會出現在一般的選單欄裡。


工 具 欄

只有當 'guioptions' 選項中包括 "T" 標誌位時，工具欄才會出現。
   工具欄使用圖示來表示一個命令，而不是文字。例如，名為 "ToolBar.New" 的
{menu-item} 會在工具欄裡顯示一個 "New" 圖示。
   Vim 有 28 個內建的圖示。這裡可以找到一個列表: |builtin-tools|。大多數是用在
預設的工具欄裡的。你可以重新定義這些工具欄項所執行的操作。(在預設選單被設定之
後)。
   你可以為工具欄項新增另外的點陣圖，或者定義新的工具欄項。例如: >

	:tmenu ToolBar.Compile  Compile the current file
	:amenu ToolBar.Compile  :!cc % -o %:r:S<CR>

現在你需要建立圖示。對於 MS-Windows 圖示必須是名為 "Compile.bmp" 的點陣圖格式文
件。對於 Unix 系統必須是名為 "Compile.xpm" 的 XPM 格式檔案。大小必須是 18 X 18
個畫素。對於 MS-Windows 來說也可以使用其它大小的圖示，但可能看起來會比較難看。
   把點陣圖放到 'runtimepath' 其中一個目錄下的 "bitmaps" 子目錄內。例如: 對於
Unix 系統可以使用 "~/.vim/bitmaps/Compile.xpm" 目錄。

你也可以為工具欄項定義一個工具提示。工具提示是解釋工具欄項功能的簡短文字。例如
"開啟檔案"。當滑鼠移動到該工具欄項上並停留一會時，該提示會被自動顯示。當圖片的
意圖不是很明顯時，這是很有用的。
例如: >

	:tmenu ToolBar.Make  Run make in the current directory
<
	備註:
	注意大小寫的使用。"Toolbar" 和 "toolbar" 和 "ToolBar" 是不同的！

要去除一個工具提示，可以使用 |:tunmenu| 命令。

'toolbar' 選項可以被用來在工具欄上顯示文字而不是圖示，或兩者都顯示。大多數人
只使用點陣圖，因為文字會佔用太多空間。


彈 出 菜 單

彈出選單會被顯示在滑鼠所在的位置。在 MS-Windows 系統上你點選滑鼠右鍵就可以啟用
彈出選單，然後用滑鼠左鍵選擇專案。在 Unix 系統上啟用該選單需要按住滑鼠右鍵。
   只有當 'mousemodel' 選項被設定為 "popup" 或 "popup_setpos" 時，彈出選單才有
效。兩者之間的區別在於 "popup_setpos" 會將游標移動到滑鼠指標所在處。當滑鼠在一
個選擇區內時，選中的區域不受影響。當滑鼠點選在選中區域外時，該選中的區域會被刪
除。
   對於每一個執行模式分別有一個獨立的彈出選單。所以永遠不會有一般選單中的灰色
選單項。

What is the meaning of life, the universe and everything?  *42*
Douglas Adams, the only person who knew what this question really was about is
now dead, unfortunately.  So now you might wonder what the meaning of death
is...

生命的意義是什麼？宇宙以及一切的一切的意義又是什麼？
不幸的是，唯一瞭解這個問題的人，Douglas Adams 已經死了。所以你現在可能正在冥想
死亡的意義是什麼...
(譯者注: Douglas Adams 寫的科幻小說裡，超級電腦對這個問題的回答是: 42。)

==============================================================================

下一章: |usr_43.txt|  使用檔案型別

版權: 見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
