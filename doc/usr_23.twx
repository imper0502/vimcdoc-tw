*usr_23.txt*	For Vim version 8.0.  最近更新: 2005年3月

		     VIM 使用者手冊 - by Bram Moolenaar
		     譯者: Chimin Yen http://vimcdoc.sf.net

			     編輯特殊檔案


本章討論特殊檔案的編輯。利用 Vim 你可以編輯經過壓縮或加密的檔案。有些檔案需要
在網際網路上存取。二進位制檔案也能有限度地編輯。

|23.1|	DOS、Mac 和 Unix 檔案
|23.2|	網際網路上的檔案
|23.3|	加密
|23.4|	二進位制檔案
|23.5|	壓縮檔案

       下一章: |usr_24.txt|  快速插入
       前一章: |usr_22.txt|  尋找要編輯的檔案
         目錄: |usr_toc.txt|

==============================================================================
*23.1*	DOS、Mac 和 Unix 檔案

很久以前，老式的電傳打字機使用兩個字元來另起新行。一個字元把滑動架移回首位 (稱
為回車，<CR>)，另一個字元把紙上移一行 (稱為換行，<LF>)。
   當計算機問世以後，儲存器曾經非常昂貴。有些人就認定沒必要用兩個字元來表示行
尾。UNIX 開發者決定他們可以用 <Line Feed> 一個字元來表示行尾。Apple 開發者規定
了用 <CR>。開發 MS-DOS (以及微軟視窗) 的那些傢伙則決定沿用老式的 <CR><LF>。
   那意味著，如果你試圖把一個檔案從一種系統移到另一種系統，那麼你就有換行符方
面的麻煩。Vim 編輯器自動識別不同檔案格式，並且不勞你操心就把事情給辦妥了。
   選項 'fileformats' 包含各種各樣的格式，Vim 會在編輯一個新檔案之初嘗試該選項
定義的各種格式。例如，下面這個命令告訴 Vim 先嚐試用 UNIX 格式，其次，嘗試
MS-DOS 格式: >

	:set fileformats=unix,dos

編輯一個檔案時，你將注意到 Vim 給出的資訊訊息報中包括檔案所用的格式。如果你編
輯的是本地格式檔案 (你編輯的檔案格式和所用系統一致)，你就不會看到任何格式名。
因此在 Unix 系統上編輯一個 Unix 格式檔案不會產生任何關於格式的資訊。但你若編輯
一個 dos 檔案，Vim 將這樣通知你:

	"/tmp/test" [dos] 3L，71C ~

如果是 Mac 檔案，你會看到 "[mac]"。
   探測到的檔案格式會被存入 'fileformat' 選項。執行下面這個命令可以顯示你當前
使用的檔案格式: >

	:set fileformat?

Vim 能使用的三種格式如下:

	unix		<LF>
	dos		<CR><LF>
	mac		<CR>


使 用 MAC 格 式

在 Unix 上，<LF> 用於分行。但 <CR> 字元混在文字行中間也非罕見。這種情況碰巧經
常發生在 Vi (和 Vim) 指令碼內。
   在採用 <CR> 作為換行符的 Macintosh 上，<LF> 字元也有可能混在文字行中間。
   結果，很難 100% 肯定一個同時包含 <CR> 和 <LF> 的檔案究竟是 Mac 還是 Unix 格
式。所以，Vim 假設你一般不會在 Unix 上編輯一個 Mac 檔案，所以乾脆對這種檔案格
式不作檢查。果真要檢查此種格式，就把 "mac" 加入 'fileformats': >

	:set fileformats+=mac

然後 Vim 就會猜測檔案格式。要當心， Vim 可能會猜錯的。


強 制 格 式

如果你用往日美好的 Vi 來嘗試編輯一個採用 MS-DOS 格式的檔案，你將會發現每一行的
末尾有個 ^M 字元。(^M 就是 <CR>)。而 Vim 的自動探測功能就避免了這個問題。莫非
你確實要按那個樣子來編輯這個檔案嗎？那麼你需要強制 Vim 忽略檔案格式而使用你指
定的格式: >

	:edit ++ff=unix file.txt

字串 "++" 告訴 Vim 後面跟的是選項名，以取代其預設值。但僅作用於這一個命令。
"++ff" 用於 'fileformat' 選項。你也可以用 "++ff=mac" 或 "++ff=dos"。
   這樣用法並非適用於任意選項，目前 Vim 僅僅實現了 "++ff" 和 "++enc"。用全稱
"++fileformat" 和 "++encoding" 也行。


轉 換

你可以用 'fileformat' 選項把檔案從一種格式轉換為另一種。例如，假定你有個名為
README.TXT 的 MS-DOS 檔案，你要把它轉換成 UNIX 格式。首先編輯這個採用 MS-DOS
格式的檔案: >
	vim README.TXT

Vim 將識別出那是一個 dos 格式檔案。現在把這個檔案的格式改為 UNIX: >

	:set fileformat=unix
	:write

這個檔案就以 Unix 格式存檔了。

==============================================================================
*23.2*	網際網路上的檔案

有人給你傳送了一封電子郵件，其中引用了一個以超連結 URL 表示的檔案。例如:

	You can find the information here: ~
		ftp://ftp.vim.org/pub/vim/README ~

你當然可以啟動一個程式來下載這個檔案，把它存入你本地磁碟，然後啟動 Vim 來編輯
它。
   但有一個簡單得多的方法。把游標移到那個超連結裡任何一個字元上，然後使用這個
命令: >

	gf

運氣好的話，Vim 將確定用哪個程式來下載這個檔案，並把檔案下載下來讓你編輯該副
本。在另一個新視窗開啟這個檔案，則用 CTRL-W f。
   如果事情不順利的話，你會得到出錯資訊。可能那個連結有錯，也可能你沒有閱讀它
的許可權，還可能網路連線中斷了，等等。不幸的是，很難講搞清除出錯的原因。你也許得
嘗試以手工方法來下載這個檔案。

訪問因特網上的檔案要安裝外掛 netrw 才行。目前，下面這些格式的超文字連結可被識
別:

	ftp://		使用 ftp
	rcp://		使用 rcp
	scp://		使用 scp
	http://		使用 wget (只讀)

Vim 並非親自與因特網聯絡。它有賴於你的計算機上安裝好的上面提及的程式。大多數
Unix 系統上裝有 "ftp" 和 "rcp"。而 "scp" 和 "wget" 也許要另外安裝。

無論你用哪個命令開始編輯，Vim 總是會探測一下這些超文字連結。包括如 ":edit" 和
":split" 這樣的命令。存檔命令也行，但除了 http:// 之外。

欲知詳情，包括密碼問題，參見 |netrw|。

==============================================================================
*23.3*	加密

有些資訊你希望保留給自己。例如，當你在計算機上寫一份給學生用的試卷。你不會願意
在考試開始之前給聰明的學生琢磨出一種偷閱試題的方法。Vim 能為你給檔案加密，為你
提供一些保護。
   要開始編輯一個需要加密的新檔案，可以用 "-x" 引數來啟動 Vim。例如: >

	vim -x exam.txt

Vim 提示你確定一個密碼，用於為檔案加密和解密:

	Enter encryption key: ~

	(譯者注: 中文是
	輸入密碼: ~
	)

現在仔細鍵入那個密碼。你所鍵入的字元將為星號代替，因此你看不到。為了避免由於打
字錯誤引起麻煩，Vim 要求你再輸入一次密碼:

	Enter same key again: ~

	(譯者注: 中文是
	請再輸入一次: ~
	)

現在你可以像平時一樣編輯這個檔案並把你所有的祕密放進去。當你編完檔案要退出 Vim
時，這個檔案就被加密存檔了。
   當你用 Vim 編輯這個檔案時，它就會要求你再輸入那同一個密碼。你不需要用 "-x"
引數。你也可以用普通的 ":edit" 命令編輯加密的檔案。Vim 給這個檔案加上特定的
magic 字串，據以識別那是經過加密的檔案。
   如果你試圖用另一個程式來閱讀這個檔案，你將讀到一堆垃圾。如果你用 Vim 來編輯
這個檔案，但輸入了錯誤的密碼，你也只能得到垃圾。Vim 並不具備檢驗密碼正確性的機
理 (這一點使得破譯密碼更為困難)。


開 / 關 加 密

要給一個檔案撤除加密，設定 'key' 選項為空字串:
>
	:set key=

你下次把這個檔案存檔時，存檔的檔案就是未經加密的。
   設定 'key' 選項來啟用加密是個壞主意。因為密碼會被清清楚楚地顯示在螢幕上。任
何人都可以偷看到你的密碼。
   為了避免這樣的問題，創造了 ":X" 命令。它會像 "-x" 引數向你索取一個密碼: >

	:X
	Enter encryption key: ******
	Enter same key again: ******


加 密 的 局 限 性

Vim 採用的加密演算法有弱點的。它對於防止那種偷窺者是綽綽有餘了，但不足以防止一個
手上有大量時間的密碼專家。而且，你應該知道交換檔案是不加密的；所以當你在編輯文
件時，擁有超級使用者許可權的人能夠讀取未經加密的檔案文字。
   不讓人們讀到你的交換檔案的一個方法就是不使用交換檔案。如果在命令列上用了 -n
引數，交換檔案就不會被建立了 (Vim 把所有的東西都存放在記憶體裡)。例如，要編輯經
過加密的檔案 "file.txt"，但不用交換檔案，請用下面的命令: >

	vim -x -n file.txt

如果你已經在編輯這個檔案了，那麼交換檔案 swapfile 可以用下面的命令禁止: >

	:setlocal noswapfile

由於沒了交換檔案，檔案復原就不可能了。為了避免失去編輯的成果，要比平時更勤快地
存檔你的檔案。

檔案在記憶體中以明文形式存在。因此任何具備許可權的人都能進入編輯者的記憶體瀏覽，從
而，發現這個檔案的內容。
   如果你使用資訊檔案 viminfo，別忘了文字暫存器的內容也是明明白白寫在其中的。
   如果你真的要保證一個檔案內容的安全，那麼，你必須永遠只在一個不聯網的可攜式
計算機上編輯這個檔案，使用優良的加密工具，並且在不用時，把你的計算機鎖進一個大
保險箱。

==============================================================================
*23.4*	二進位制檔案

你可以用 Vim 來編輯二進位制檔案。Vim 本非為此而設計的，因而有若干侷限。但你能讀
取一個檔案，改動一個字元，然後把它存檔。結果是你的檔案就只有那一個字元給改了，
其它的就跟原來那個一模一樣。
   要保證 Vim 別把它那些聰明的竅門用錯地方，啟動 Vim 時加上 "-b" 引數: >

	vim -b datafile

這個引數設定了 'binary' 選項。其作用是排除所有的意外副作用。例如，'textwidth'
設為零，免得文字行給擅自排版了。並且，檔案一律以 Unix 檔案格式讀取。

二進位制模式可以用來修改某程式的訊息報文。小心別插入或刪除任何字元，那會讓程式運
行出問題。用 "R" 命令進入替換模式。

檔案裡的很多字元都是不可顯示的。用 Hex 格式來顯示它們的值: >

	:set display=uhex

另外，也可以用命令 "ga"  來顯示游標下的字元值。當游標位於一個 <Esc> 字元上時，
該命令的輸出看起來就像這樣:

	<^[>  27， Hex 1b,  Octal 033 ~

檔案中也許沒那麼多換行符。你可以關閉 'wrap' 選項來獲得總覽的效果: >

	:set nowrap


字 節 位 置

要發現你在檔案中的當前位元組位置，請用這個命令: >

	g CTRL-G

其輸出十分冗長:

    Col 9-16 of 9-16; Line 277 of 330; Word 1806 of 2058; Byte 10580 of 12206 ~

最後兩個數字就是檔案中的當前位元組位置和檔案位元組總數。這已經考慮了 'fileformat'
選項導致換行符位元組不同的影響。
    要移到檔案中某個指定的位元組，請用 "go" 命令。例如，要移到位元組 2345: >

	2345go


使 用 XXD

一個真正的二進位制編輯器用兩種方式來顯示文字: 二進位制和十六進位制格式。你可以在 Vim
裡通過轉換程式 "xxd" 來達到這效果。該程式是隨 Vim 一起釋出的。
   首先以二進位制方式編輯這個檔案: >

	vim -b datafile

現在用 xxd 把這個檔案轉換成十六進位制: >

	:%!xxd

文字看起來像這樣:

	0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
	0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
	0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

現在你可以隨心所欲地閱讀和編輯這些文字了。 Vim 把這些資訊當作普通文字來對待。
修改了十六進位制部分並不導致可顯示字元部分的改變，反之亦然。
   最後，用下面的命令把它轉換回來:
>
	:%!xxd -r

只有十六進位制部分的修改才會被採用。右邊可顯示文字部分的修改忽略不計。

欲知更多詳情，參見 xxd 手冊。

==============================================================================
*23.5*	壓縮檔案

這很容易: 你可以像編輯任何其它檔案一樣，來編輯一個經過壓縮的檔案。外掛 "gzip"
負責在你編輯這個檔案時把它解壓縮，以及在你存檔時再把它壓縮起來。
   目前支援的壓縮方法有下面這些:

	.Z	compress
	.gz	gzip
	.bz2	bzip2

Vim 呼叫上面提到的程式來實際完成壓縮和解壓縮。你也許需要先安裝這些程式。

==============================================================================

下一章: |usr_24.txt|  快速插入

版權: 參見 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
