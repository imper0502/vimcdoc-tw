*editing.txt*   For Vim version 8.0.  最近更新: 2017年7月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


編輯檔案						*edit-files*

1.  簡介			|edit-intro|
2.  編輯單個檔案		|edit-a-file|
3.  引數列表			|argument-list|
4.  寫入			|writing|
5.  寫入並退出			|write-quit|
6.  對話方塊			|edit-dialogs|
7.  當前目錄			|current-directory|
8.  編輯二進位制檔案		|edit-binary|
9.  加密			|encryption|
10. 修改時間			|timestamps|
11. 檔案搜尋			|file-searching|

==============================================================================
1. 簡介							*edit-intro*

用 Vim 編輯一個檔案意味著:

1. 把該檔案讀到緩衝區
2. 用編輯器命令修改緩衝區
3. 把緩衝區內容寫回檔案

							*current-file*
只要你不儲存緩衝區，原來的檔案保持不變。如果你開始編輯一個檔案 (把它的內容讀到
緩衝區裡)，該檔名被認作 "當前檔名"，或者說當前緩衝區的名字。命令列上，可以
用 "%" 來引用它 |:_%|。

							*alternate-file*
如果已經有了另外一個當前檔名，它會成為輪換檔名。命令列上，可以用 "#" 引用
它 |:_#|。你還可以用 |CTRL-^| 命令在當前和輪換檔案之間切換。不過，輪換檔名在
使用 |:keepalt| 期間不予改變。
每個視窗分別記住自己的輪換檔名。

							*:keepalt* *:keepa*
:keepalt {cmd}		執行 {cmd}，在此期間保持當前輪換檔名不變。注意 間接
			呼叫的命令 (比如通過函式) 仍然可以設定輪換檔名。
			{Vi 無此功能}

所有檔名都會被記錄在緩衝區列表裡。在你輸入檔名以便編輯 (例如，用 ":e 檔案
名") 或者寫回 (例如，用 ":w 檔名") 時，此檔名被加入該列表。你可以用緩衝區
列表來記住編輯過什麼檔案並用 CTRL-^ 命令快速的從一個檔案切換到另一個 (例如，以
便複製文字)。先敲入檔案的編號再敲入 CTRL-^。{Vi: 只有一個輪換檔名}

CTRL-G		或				*CTRL-G* *:f* *:fi* *:file*
:f[ile]			顯示當前檔名 (如同輸入的那樣，除非使用過 ":cd")、光
			標位置 (除非置位了 'ruler' 選項) 和檔案狀態 (只讀、已
			修改、讀入錯誤、新檔案)。參見 'shortmess' 選項，瞭解如
			何可以簡化該訊息。 {Vi 不包括列號}

:f[ile]!		和 |:file| 類似，但即使 'shortmess' 要求截短檔名，也
			不這麼做。

{count}CTRL-G		和 CTRL-G 類似，但顯示當前檔名的完整路徑。如果計數大
			於 1，則同時給出當前緩衝區號。{Vi 無此功能}

					*g_CTRL-G* *word-count* *byte-count*
g CTRL-G		顯示當前游標位置，以五種方式表達: 列、行、單詞、字元和
			位元組計數。如果字元數和位元組數相同，省略字元位置。
			如果當前行有字元佔據多於一個位置 (<Tab> 或其他特殊字
			符)，"實際" 列和螢幕列同時顯示，以連字號分隔。參見
			'ruler' 選項和 |wordcount()| 函式。
			{Vi 無此功能}

							*v_g_CTRL-G*
{Visual}g CTRL-G	和 "g CTRL-G" 類似，但顯示可視選擇區域的單詞、字元、行
			和位元組計數。在面向列塊模式裡，列數也同時顯示。(關於
			{Visual} 見 |Visual-mode|。) {Vi 無此功能}

							*:file_f*
:f[ile][!] {name}	設定當前檔名為 {name}。可選的 ! 避免截短訊息，就像
			|:file| 那樣。
			如果緩衝區已有名字，該名字成為 |alternate-file| 輪換
			檔名。新建一個列表外緩衝區來記住這個舊名字。
							*:0file*
:0f[ile][!]		刪除當前緩衝區的名字。可選的 ! 避免截短訊息，就像
			|:file| 那樣。{Vi 無此功能}

:buffers
:files
:ls			列出當前已知的檔名。見 'windows.txt' |:files|
			|:buffers| |:ls|。{Vi 無此功能}

vim 會記住你輸入檔名的完整路徑。大多數情況下，檔名只以你輸入的方式顯示。但
":cd" 命令 |:cd| 使用後，就會看到完整路徑名。

							*home-replace*
如果設定了環境變數 $HOME，而檔名以該字串開始，它的顯示會把 HOME 替換成
"~"。這麼做是為了使檔名的顯示較為簡潔。在讀寫檔案時仍然使用完整路徑名，"~"
只供顯示檔名用。如果要替換名字實質上只有 "~" 的檔案，會使用 "~/" (為了避免
設為 $HOME 的選項和設為 '~' 時的 'backupext' 混淆)。

儲存緩衝區時，預設使用當前檔名。這樣，如果你給出 "ZZ" 或者 ":wq" 命令，原有
的檔案被覆蓋。如果你不想如此，給 ":write" 命令給出一個檔名引數，你可以把緩衝
區寫到另外一個檔案裡。例如: >

	vim testfile
	[用編輯器命令修改緩衝區]
	:w newfile
	:q

這會建立檔案 "newfile"，它是 "testfile" 經過修改的版本。"testfile" 檔案保持不
變。無論如何，如果置位 'backup' 選項，Vim 會在原來的檔案被覆蓋之前改名或複製。
如果你以後發現你需要原來的版本，你可以用這個備份檔案。也可參見 'patchmode' 選
項。備份檔名通常是原來的檔案加上 'backupext' 字尾。預設的 "~" 比較奇特，目的
是為了防止意外覆蓋現存的檔案。如果你喜歡 ".bak"，修改 'backupext' 選項。在
MS-DOS 機器上，當 Vim 檢測到正在使用的是 MS-DOS 或類似的檔案系統 (例如，
messydos 或者 crossdos) 或者打開了 'shortname' 選項，多餘的點號被替換成 '_'。
通過設定 'backupdir'，備份檔案也可存在別的目錄下。

							*auto-shortname*
技術上:	在 Amiga 上檔名可以長達 30 個字元。但在 MS-DOS 相容的檔案系統上只能
	用 8+3 個字元。Vim 試圖在建立 .swp 檔案的時候檢測檔案系統的型別。如果
	懷疑是一個類似 MS-DOS 的檔案系統，則置位一個標誌位，它和設定
	'shortname' 選項有相同的效果。一旦你開始編輯一個新檔案，該標誌位被複
	位。在根據當前檔名建立 ".swp" 和 ".~" 檔案時，該標誌位起作用。但如果
	你在一個正常的檔案系統上編輯檔案，而寫到一個類似於 MS-DOS 的檔案系統，
	該標誌位不會被置位。這種情況下，建立 ".~" 檔案可能會失敗，你會得到一個
	錯誤訊息。這種情況下，用 'shortname' 選項。

當你開始編輯而不給出檔名，會給出 "No File" 訊息。如果 ":write" 命令帶一個文
件名引數，當前檔名被設為那個名字。這隻有在 'cpoptions' 裡帶 'F' 標誌位 (預設
的確是如此) 時才會發生 |cpo-F|。這對在空緩衝區裡編輯文字後寫入到檔案有用。如果
'cpoptions' 裡包含 'f' 標誌位 (預設_不_包含) |cpo-f|，在執行 ":read file" 時，
檔名被設定。這可用來先不帶引數啟動 Vim 再用 ":read file" 編輯檔案。
如果設定了檔名而 'filetype' 為空，啟用檔案型別檢測的自動事件。
							*not-edited*
因為設定檔名並不是真正編輯該檔案，你不會覆蓋它。這可由設定 "notedited" 標誌
位來完成。你可由 CTRL-O 或 ":file" 命令看到該標誌位是否設定。如果 "notedited"
標誌位已設定，它會包括 "[Not edited]"。當將緩衝區寫回當前檔名 (用 ":w!")
時，"notedited" 標誌位被重設。

							*abandon*
Vim 記住你是否修改了緩衝區。你所作的修改不會不小心丟失。如果試圖不寫回而退出，
或開始編輯別的檔案，Vim 會拒絕。要繞過這重保護，在命令後加上 '!'。這樣，修改就
會丟失。例如: ":q" 在緩衝區修改後不會工作，但 ":q!" 會。要知道緩衝區是否修改，
用 "CTRL-G" 命令。如果緩衝區被修改，訊息裡會有字串 "[Modified]" 或者 "+"，
後者如果 'shortmess' 有 'm' 標誌位。

如果你想不經提示而自動寫回改動，開啟 'autowriteall' 選項。'autowrite' 是相關的
Vi-相容選項，它並非對所有命令有效。

如果想保留修改了的緩衝區但不寫回，開啟 'hidden' 選項。參見 |hidden-buffer|。有
些命令即便 'hidden' 沒有置位也會如此，具體須參見各個命令的幫助。

==============================================================================
2. 編輯單個檔案						*edit-a-file*

							*:e* *:edit* *reload*
:e[dit] [++opt] [+cmd]	編輯當前檔案。可用於在它被 Vim 之外的程式所改變的時候
			重新編輯當前檔案。 如果當前緩衝區已經被修改而且沒有置
			位 'autowriteall'，或者檔案不能被寫入，本命令失敗。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

							*:edit!* *discard*
:e[dit]! [++opt] [+cmd]
			總是編輯當前檔案。放棄當前緩衝區任何已有的改變。如果你
			想從頭來過，這就會很有用。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

							*:edit_f*
:e[dit] [++opt] [+cmd] {file}
			編輯檔案 {file}。
			如果當前緩衝區已被修改，這會失敗，除非置位了 'hidden'
			或者 'autowriteall' 並且檔案能夠寫入。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

							*:edit!_f*
:e[dit]! [++opt] [+cmd] {file}
			總是編輯檔案 {file}。放棄當前緩衝區任何已有的改變。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

:e[dit] [++opt] [+cmd] #[count]
			編輯第 [count] 個緩衝區 (根據 :files 顯示的結果)。
			該命令和 [count] CTRL-^ 一樣，但是 ":e #" 在輪換緩衝區
			沒有檔名時不能工作，而 CTRL-^ 則可以。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

							*:ene* *:enew*
:ene[w]			編輯一個新的無名緩衝區。如果當前緩衝區已被修改，這會失
			敗，除非置位了 'hidden' 或者 'autowriteall' 並且檔案能
			夠寫入。
			如果 'fileformats' 非空，其給出的第一個格式將用於新的
			緩衝區上。如果 'fileformats' 為空，則使用當前緩衝區的
			'fileformat'。
			{Vi 無此功能}

							*:ene!* *:enew!*
:ene[w]!		編輯新的無名緩衝區。放棄當前緩衝區任何已有的改變。
			'fileformat' 的設定類似於 |:enew|。
			{Vi 無此功能}

							*:fin* *:find*
:fin[d][!] [++opt] [+cmd] {file}
			在 'path' 裡找到 {file}，然後編輯 |:edit| 它。
			{Vi 無此功能} {僅當編譯時加入 |+file_in_path| 特性才有
			效}

:{count}fin[d][!] [++opt] [+cmd] {file}
			和 ":find" 類似，但使用 'path' 的第 {count} 個匹配。這
			樣，":2find file" 會找到 'path' 裡的第二個 "file"。如
			果 'path' 裡檔案的匹配不足所需之數，你會得到一個錯誤消
			息。

							*:ex*
:ex [++opt] [+cmd] [file]
			和 |:edit| 相同。

							*:vi* *:visual*
:vi[sual][!] [++opt] [+cmd] [file]
			用於 Ex 模式時: 退出 |Ex-mode|，回到普通模式。否則和
			|:edit| 相同。

							*:vie* *:view*
:vie[w][!] [++opt] [+cmd] file
			用於 Ex 模式時: 退出 |Ex-mode|，回到普通模式。否則和
			|:edit| 相同，但為本緩衝區置位 'readonly' 選項。{Vi 無
			此功能}

							*CTRL-^* *CTRL-6*
CTRL-^			編輯輪換檔案。
			多數情況下，輪換檔案就是上次編輯的檔案。這是切換兩個文
			件的一個快速方法。這和 ":e #" 等價，但也能用在沒有檔案
			名的情況。

			如果 'autowrite' 或 'autowriteall' 選項開啟並且緩衝區
			被修改，則寫入檔案。
			大多數情況下，^ 字元在鍵 6 之上，同時按 CTRL 和 6 會給
			出我們叫 CTRL-^ 的鍵碼。但在有的非-US 的鍵盤上 CTRL-^
			須以不同的方式生成。

[count]CTRL-^		編輯緩衝區列表裡第 [count] 個檔案 (和 ":e #[count]" 等
			價)。這是切換檔案的一個快速方法。
			詳情見上面 |CTRL-^|。
			{Vi 無此功能}

[count]]f						*]f* *[f*
[count][f		和 "gf" 一樣。它本身已被淘汰。

							*gf* *E446* *E447*
[count]gf		編輯游標之上或之後的檔名。助記: "goto file"。
			使用 'isfname' 選項來決定組成檔名的字元。拖尾的標點
			符號 ".,:;!" 被忽略。空格的轉義 "\ " 縮為一個空格。
			在 'path' 選項組成的目錄名列表查詢檔案。關於相對路徑和
			萬用字元，可見 'path' 選項。
			設定 'suffixesadd' 選項可以用來查詢檔案所要附加的後
			綴。如果檔案找不到，用 'includeexpr' 來修改名字，然後
			再試一次。
			如果給出 [count]，'path' 裡找到的第 count 個檔案被編
			輯。
			如果 Vim 拒絕放棄 |abandon| 當前檔案，該命令失敗。
			如果你想在新窗口裡編輯檔案，用 |CTRL-W_CTRL-F|。
			如果你想編輯新檔案，用: >
				:e <cfile>
<			想使得 gf 總是如此工作，可以如此: >
				:map gf :e <cfile><CR>
<			如果名字是一個超文字連結，也就是看來像
			"type://machine/path" 這樣的，你需要 |netrw| 外掛。
			對 Unix 而言，'~' 字元被擴充套件，比如在 "~user/file" 的場
			合。環境變數也得到擴充套件 |expand-env|。
			{Vi 無此功能}
			{僅在編譯時加入 |+file_in_path| 特性才有效}

							*v_gf*
{Visual}[count]gf	和 "gf" 相同，但是高亮文字被用來作為要編輯的檔名。
			'isfname' 被忽略。開頭的空白被忽略，除此以外，所有的空
			白和特殊字元被包括在檔名裡。
			({Visual} 可參見 |Visual-mode|。)
			{Vi 無此功能}

							*gF*
[count]gF		和 "gf" 相同，但如果檔名後面跟隨著數值，那麼游標將定
			位在該檔名的該行上。檔名和數值之間必須以一個非檔案
			名 (見 'isfname') 和非數字字元分隔。檔名、分隔符和數
			值之間的空白被忽略。
			例如:
				eval.c:10 ~
				eval.c @ 20 ~
				eval.c (30) ~
				eval.c 40 ~

							*v_gF*
{Visual}[count]gF	和 "v_gf" 相同。

這些命令用來開始編輯單獨一個檔案。這意味著該檔案被讀入緩衝區裡並設定當前檔案
名。開啟哪個檔案和當前目錄有關，見 |:cd|。

關於檔案讀入以後給出的訊息，參見 |read-messages|。

如果你把緩衝區內容弄亂了想從頭開始編輯，你可以用 ":e!" 命令。":e" 命令只有在你
改變當前檔名的時候有用。

							*:filename* *{file}*
除了這裡說明的事項以外，|cmdline-special| 也提到更多特殊專案，它們在期待檔名
時可用。

注意 除了 Unix 以外的系統: 在使用接受單個檔名的名字時 (如 ":edit file")，文
件名裡可以有空格，但是拖尾的空格被忽略。這可用於允許檔名有內含的空格的系統
(如 MS-Windows 和 Amiga)。示例: 命令 ":e   Long File Name " 會編輯檔案 "Long
File Name"。在使用能接受多於一個檔名的命令時 (如 ":next file1 file2")，內含
的空格必須以反斜槓轉義。

						*wildcard* *wildcards*
{file} 裡的萬用字元被擴充套件，但和檔案補全一樣，也適用 'wildignore' 和 'suffixes'。
具體支援什麼萬用字元由系統決定。以下是一些通用的字元:
	?	匹配一個字元
	*	匹配任何東西，包括什麼都沒有
	**	匹配任何東西，包括什麼都沒有，遞迴進入目錄
	[abc]	匹配 'a'、'b' 或 'c'

要避免萬用字元的特殊含義，在前面加上反斜槓。不過，在 MS-Windows 上，反斜槓是路徑
分隔符，"path\[abc]" 在 'isfname' 選項裡有 "[" 的時候還是被看作萬用字元。一個簡
單避免該問題的方法是用 "path\[[]abc]"。這樣這匹配檔名 "path[abc]"。

					*starstar-wildcard*
在 Unix、Win32、Mac OS/X 和一些其它系統上，可以擴充套件 "**"。它允許你在目錄樹裡搜
索。最大深度可以到 100 層目錄。
注意 有些命令的工作方式略有不同。見 |file-searching|。
例如: >
	:n **/*.txt
找到檔案:
	aaa.txt ~
	subdir/bbb.txt ~
	a/b/c/d/ccc.txt ~
緊接著 "**" 之前或之後使用的非通配字元，只匹配第一層目錄，而不用於匹配樹結構其
下的目錄。例如: >
	:n /usr/inc**/types.h
找到檔案:
	/usr/include/types.h ~
	/usr/include/sys/types.h ~
	/usr/inc/old/types.h ~
注意 之所以帶 "/sys" 的路徑，是因為那一層的名字不需要匹配 "/inc"。也就是說，
這相當於匹配 "/usr/inc*/*/*..."，而不是 "/usr/inc*/inc*/inc*"。

					*backtick-expansion* *`-expansion*
在 Unix 和一些其它系統上你可以用反引號代替檔名引數。例如: >
	:next `find . -name ver\\*.c -print`
	:view `ls -t *.patch  \| head -n1`
星號之前需要有反斜槓，以防 "ver*.c" 在執行 find 程式之前被外殼先擴充套件。在外殼管
道符號 "|" 之前的反斜槓使 Vim 不會把它解析為命令的終止。
該功能對於多數其他系統也使用，但要求反引號必須包圍整個專案。你不能在第一個之前
和最後一個反引號之後有別的文字。

							*`=*
在第一個反引號之後緊跟等號，可以使得反引號用來作 Vim 表示式，而非外部命令來擴
展。例如 >
	:e `=tempname()`
該表示式裡可以包含任何東西，因而可以用來避免 '"'、'|'、'%' 和 '#' 的特殊含義。
不過，和其它萬用字元一樣，'wildignore' 也適用。

表示式裡的環境變數在執行表示式前先擴充套件，所以可以這樣: >
	:e `=$HOME . '/.vimrc'`
此處 $HOME 如果在字串裡，會被按本義使用，所以不能這樣: >
	:e `='$HOME' . '/.vimrc'`

如果表示式結果為字串，名字以換行符分隔。如果結果是 |List|，每個專案用作一個
名字。換行符也分隔名字。
注意 這樣的表示式只有在 Ex 命令期待檔名引數的地方才有效。

							*++opt* *[++opt]*
[++opt] 引數可以用來為某個命令強制指定 'fileformat'、'fileencoding' 或
'binary' 的值，並指定遇到壞字元的行為。其形式是: >
	++{optname}
或: >
	++{optname}={value}

其中 {optname} 是以下之一:	    *++ff* *++enc* *++bin* *++nobin* *++edit*
    ff     或  fileformat   超越 'fileformat' 之值
    enc    或  encoding	    超越 'fileencoding' 之值
    bin    或  binary	    置位 'binary'
    nobin  或  nobinary	    復位 'binary'
    bad			    指定壞字元的行為
    edit		    只用於 |:read|: 保持選項的值，就像編輯檔案那樣

{value} 不能包含空白。它可以是這些選項任何可取之值。例如: >
	:e ++ff=unix
再次編輯相同的檔案，但指定 'fileformat' 為 "unix"。 >

	:w ++enc=latin1 newfile
把當前緩衝區寫入到 "newfile"，以 latin1 編碼。

可以用多個 ++opt 引數，以空格分隔。它們都必須在任何 |+cmd| 引數之前。

								*++bad*
引數 "++bad=" 指定遇到不能轉化或者包含非法位元組的字元時的行為。它可以是以下三種
形式之一:
    ++bad=X      單位元組的字元，替代每個壞字元。
    ++bad=keep   保留壞字元，不予轉化。注意 這可能使得你的文本里出現非法位元組！
    ++bad=drop   刪除壞字元。

預設就像用了 "++bad=?" 一樣: 每個壞字元被問號代替。有些地方會使用一個倒轉的問
號 (0xBF)。

注意 不是所有的命令都接受 ++bad 引數，但也不會報錯，例如 |:write|。

注意 在讀入檔案時，'fileformat' 和 'fileencoding' 選項會被設為實際所用的格式。
在寫回時，這不會發生。因此下一次寫會使用選項的舊值。'binary' 選項也同樣如此。

							*+cmd* *[+cmd]*
[+cmd] 引數可以用來在新開啟的檔案定位游標或執行任何其他命令:
	+		從最後一行開始。
	+{num}		從第 {num} 行開始。
	+/{pat}		從匹配 {pat} 的第一行開始。
	+{command}	開啟新檔案以後執行 {command}。
			{command} 可以是任何 Ex 命令。
要在 {pat} 或 {command} 裡包含空白，在它之前加上反斜槓。反斜槓本身則要加倍。 >
	:edit  +/The\ book	     file
	:edit  +/dir\ dirname\\      file
	:edit  +set\ dir=c:\\\\temp  file
注意 最後一個例子裡反斜槓減半兩次: 一次用於 "+cmd" 引數，一次用於 ":set" 命
令。

							*file-formats*
'fileformat' 選項指定檔案裡的換行符 (<EOL>) 風格:
'fileformat'    字元		   名字				~
  "dos"		<CR><NL> 或 <NL>   DOS 格式		*DOS-format*
  "unix"	<NL>		   Unix 格式		*Unix-format*
  "mac"		<CR>		   Mac 格式		*Mac-format*
以前還使用 'textmode' 。現在已經廢棄了。

在讀入檔案時，以上列出的字元被解釋為換行符。DOS 格式 (MS-DOS、OS/2 和 Win32 缺
省值) 把 <CR><NL> 和 <NL> 都解釋為換行符。 注意 在以 DOS 格式寫入檔案時，
會在每個單獨的 <NL> 之後加上 <CR> 字元。另見 |file-read|。

當寫入檔案時，換行符用以上列出的字元寫入。DOS 格式使用 <CR><NL>。另見
|DOS-format-write|。

你可以從 DOS 格式讀入檔案再以 Unix 格式寫回。這樣所有的 <CR><NL> 對會被換成
<NL> (假設 'fileformats' 包括 "dos"): >
	:e file
	:set fileformat=unix
	:w
反之，如果你從 Unix 格式讀入檔案再以 DOS 格式寫回。所有的 <NL> 字元會被換成
<CR><NL> (假設 'fileformats' 包括 "unix"): >
	:e file
	:set fileformat=dos
	:w
如果你開始編輯新檔案而 'fileformats' 選頂非空 (預設)，Vim 會測試檔案以何種格式
分隔行。如果設為 "unix,dos"，Vim 會檢查每行是帶 <NL> (Unix 和 Amiga) 還是帶
<CR><NL> 對 (MS-DOS)。只有當_所有_行都以 <CR><NL> 結尾，'fileformat' 才被設為
"dos"，否則，它被設為 "unix"。如果 'fileformats' 包含 "mac" 而且檔案不含 <NL>
字元，'fileformat' 設為 "mac"。

如果 'fileformat' 選項在非 MS-DOS 的系統上設為 "dos"，訊息 "[dos format]" 會提
示你發生了不同尋常的事情。 在 MS-DOS 系統上，如果 'fileformat' 設為 "unix"，你
也會得到訊息 "[unix format]"。除了 Macintosh 以外的所有的系統中，如果
'fileformat' 設為 "mac"，你會得到訊息 "[mac format]"。

如果 'fileformats' 選項為空而使用了 DOS 格式，但是在讀入檔案時發現某些行不以
<CR><NL> 結尾，"[CR missing]" 會在檔案訊息裡列出。
如果 'fileformats' 選項為空而使用了 Mac 格式，但是在讀入檔案時發現某些行有
<NL>，"[NL missing]" 會在檔案訊息裡列出。

如果新檔案不存在，則當 'fileformats' 為空時使用當前緩衝區的 'fileformat'，否則
使用 'fileformats' 的第一個格式。

在開始編輯二進位制、可執行或 Vim 指令碼檔案時，你應該置位 'binary' 選項。一個簡單
的方式是以 "-b" 選項啟動 Vim。該選項可以避免使用 'fileformat'。如果不設，你會
有單個 <NL> 字元被莫名其妙地換成 <CR><NL> 的風險。

你可以用 'key' 選項在寫回時給檔案加密。它提供了相當安全性，防止別人讀到你的文
件。|encryption|


==============================================================================
3. 引數列表					*argument-list* *arglist*

如果你在啟動 Vim 的時候給出多個檔名，這些檔案將被記住，即引數列表。你可以跳
轉到該列表裡的任何一個檔案。

不要把它和 |:buffers| 命令裡的緩衝區列表混淆。引數列表在 Vi 裡已經存在，但
緩衝區列表是 Vim 新加入的。引數列表裡的檔名也會在緩衝區列表裡存在 (除非你用
|:bdel| 或 |:bwipe| 將其刪除)，但不在引數列表而出現在緩衝區列表的名字很常見。

該主題在使用者手冊的 |07.2| 一節已有介紹。

只有一個全域性引數列表，所有視窗預設都使用它。但可以建立區域性於視窗的新引數列表，
見 |:arglocal|。

下面的命令使用引數列表，還有表示式函式 |argc()| 和 |argv()|。他們均作用於當前
視窗的引數列表。

							*:ar* *:args*
:ar[gs]			顯示引數列表，當前檔案以方括號表示。

:ar[gs] [++opt] [+cmd] {arglist}			*:args_f*
			定義 {arglist} 為新的引數列表並編輯其中的第一個。如果
			已經作了修改而 vim 不能放棄 |abandon| 當前的緩衝區，該
			命令失敗。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

:ar[gs]! [++opt] [+cmd] {arglist}			*:args_f!*
			定義 {arglist} 為新的引數列表並編輯其中的第一個。忽略
			任何對當前緩衝區的改動。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

:[count]arge[dit][!] [++opt] [+cmd] {name}		*:arge* *:argedit*
			將 {name} 加到引數列表裡，並編輯之。
			如果 {name} 已經在引數列表裡存在，只編輯之。
			這和用 |:argadd| 然後 |:edit| 類似。
			注意 這裡只允許單個檔名，檔名裡的空格是允許的，就
			像 |:edit| 一樣。
			[count] 的用法和 |:argadd| 一樣。
			如果當前檔案不能被放棄 |abandon|，[!] 是必需的。
			另見 |++opt| 和 |+cmd|。
			{Vi: 無 ++opt}

:[count]arga[dd] {name} ..			*:arga* *:argadd* *E479*
:[count]arga[dd]
			將若干檔名 {name} 等加到引數列表裡。如果 {name} 省
			略，把當前緩衝區名字加入引數列表。
			如果忽略 [count]， {name} 等加入到引數列表的當前項之
			後。不然，加到第 [count] 個檔案之後。如果引數列表是
			"a b c"，而 "b" 是當前引數，那麼以下命令會導致:
				命令		新的引數列表 ~
				:argadd x	a b x c
				:0argadd x	x a b c
				:1argadd x	a x b c
				:$argadd x	a b c x
			在末項之後:
				:+2argadd y	a b c x y
			這裡不會檢查重複項，因此一個檔案可能加入引數列表兩次。
			不改變當前編輯的檔案。
			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}
			注意: 你也可以使用這個方法: >
				:args ## x
<			這會加入 "x" 項並對新的列表排序。

:argd[elete] {pattern} ..			*:argd* *:argdelete* *E480*
			從引數列表裡刪除匹配 {pattern} (可有多個) 的檔案。
			{pattern} 為檔案模式，見 |file-pattern|。"%" 可以用來
			刪除當前入口項。
			即使該命令從引數列表裡刪除了當前編輯檔案，該檔案保持被
			編輯。
			例如: >
				:argdel *.obj
<			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}

:[range]argd[elete]	從引數列表裡刪除 [range] 範圍裡的檔案。
			例如: >
				:10,$argdel
<			刪除第 10 個和其後的引數，保留 1-9。 >
				:$argd
<			只刪除最後一個。 >
				:argd
				:.argd
<			刪除當前引數。 >
				:%argd
<			刪除引數列表裡所有檔案。
			如果該範圍的最後一個數字過大，刪除直到最後一個引數為
			止。
			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}

							*:argu* *:argument*
:[count]argu[ment] [count] [++opt] [+cmd]
			編輯引數列表裡的第 [count] 個檔案。在忽略 [count] 的時
			候，編輯當前入口項。如果已經作了修改而 vim 不能放棄
			|abandon| 當前的緩衝區，該命令失敗。
			另見 |++opt| 和 |+cmd|。
			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}

:[count]argu[ment]! [count] [++opt] [+cmd]
			編輯引數列表裡的第 [count] 個檔案。忽略任何對當前緩衝
			區的已有修改。在忽略 [count] 的時候，編輯當前入口項。
			另見 |++opt| 和 |+cmd|。
			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}

:[count]n[ext] [++opt] [+cmd]			*:n* *:ne* *:next* *E165* *E163*
			編輯向後第 [count] 個檔案。如果已經作了修改而 vim 不能
			放棄 |abandon| 當前的緩衝區，該命令失敗。另見 |++opt|
			和 |+cmd|。{Vi 沒有 count 和 ++opt}

:[count]n[ext]! [++opt] [+cmd]
			編輯向後第 [count] 個檔案。忽略任何對當前緩衝區的已有
			修改。另見 |++opt| 和 |+cmd|。{Vi 沒有 count 和 ++opt}

:n[ext] [++opt] [+cmd] {arglist}			*:next_f*
			和 |:args_f| 相同。

:n[ext]! [++opt] [+cmd] {arglist}
			和 |:args_f!| 相同。

:[count]N[ext] [count] [++opt] [+cmd]			*:Next* *:N* *E164*
			編輯向前第 [count] 個檔案。如果已經作了修改而 vim 不能
			放棄 |abandon| 當前的緩衝區，該命令失敗。另見 |++opt|
			和 |+cmd|。{Vi 沒有 count 和 ++opt}

:[count]N[ext]! [count] [++opt] [+cmd]
			編輯向前第 [count] 個檔案。忽略任何對當前緩衝區的已有
			修改。另見 |++opt| 和 |+cmd|。{Vi 沒有 count 和 ++opt}

:[count]prev[ious] [count] [++opt] [+cmd]		*:prev* *:previous*
			和 :Next 相同。另見 |++opt| 和 |+cmd|。{Vi: 只有在某些
			版本存在}

							*:rew* *:rewind*
:rew[ind] [++opt] [+cmd]
			開始編輯引數列表的第一個檔案。如果已經作了修改而 vim
			不能放棄 |abandon| 當前的緩衝區，該命令失敗。另見
			|++opt| 和 |+cmd|。{Vi 沒有 ++opt}

:rew[ind]! [++opt] [+cmd]
			開始編輯引數列表的第一個檔案。忽略任何對當前緩衝區的已
			有修改。另見 |++opt| 和 |+cmd|。{Vi 沒有 ++opt}

							*:fir* *:first*
:fir[st][!] [++opt] [+cmd]
			":rewind" 的別名。{Vi 無此功能}

							*:la* *:last*
:la[st] [++opt] [+cmd]
			開始編輯引數列表的最後一個檔案。如果已經作了修改而 vim
			不能放棄 |abandon| 當前的緩衝區，該命令失敗。另見
			|++opt| 和 |+cmd|。{Vi 無此功能}

:la[st]! [++opt] [+cmd]
			開始編輯引數列表的最後一個檔案。忽略任何對當前緩衝區的
			已有修改。另見 |++opt| 和 |+cmd|。{Vi 無此功能}

							*:wn* *:wnext*
:[count]wn[ext] [++opt]
			寫回當前檔案並開始編輯向後第 [count] 個檔案。另見
			|++opt| 和 |+cmd|。{Vi 無此功能}

:[count]wn[ext] [++opt] {file}
			寫入當前檔案到 {file} 並開始編輯向後第 [count] 個文
			件，除非 {file} 已經存在並且 'writeany' 選項被關閉。另
			見 |++opt| 和 |+cmd|。{Vi 無此功能}

:[count]wn[ext]! [++opt] {file}
			寫入當前檔案到 {file} 並開始編輯向後第 [count] 個文
			件。另見 |++opt| 和 |+cmd|。{Vi 無此功能}

:[count]wN[ext][!] [++opt] [file]		*:wN* *:wNext*
:[count]wp[revious][!] [++opt] [file]		*:wp* *:wprevious*
			和 :wnext 相同，向前編輯而不是向後。{Vi 無此功能}

以上命令的 [count] 預設為一。對有些命令可以使用兩個計數。後者 (右面那個) 被使
用。

如果沒有給出 [+cmd] 引數，游標定位於檔案最後一個已知的位置。如果置位了
'startofline'，游標會定位於該行第一個非空白字元，不然，則使用最後一個已知列。
如果沒有最後已知的游標位置，游標會定位在第一行 (Ex 模式下則是最後一行)。

							*{arglist}*
引數列表裡的萬用字元會擴充套件，檔名會排序。這樣你可以用命令 "vim *.c" 編輯所有的
C 檔案。在 Vim 裡面，":n *.c" 命令會做同樣的事。

空白用來分隔檔名。在空格或製表前加上反斜槓可以在檔名裡使用它們。例如，要編
輯單個檔案 "foo bar": >
	:next foo\ bar

在 Unix 和一些其它系統上你還可以使用反引號，例如: >
	:next `find . -name \\*.c -print`
星號之前的反斜槓是必要的，它用來防止 "*.c" 在執行 find 程式之前被外殼擴充套件。

							*arglist-position*
如果有引數列表，你可以在視窗的標題上看到正在編輯哪個檔案 (如果有一個視窗，而且
'title' 被置位)，或者通過 "CTRL-G" 命令，在檔案訊息裡看到。你會看到類似於
	(file 4 of 11)
的東西。如果 'shortmess' 包含 'f'，它會成為
	(4 of 11)
如果你還沒有編輯引數列表當前位置的檔案，它會是
	(file (4) of 11)
這表示你在引數列表的第四個位置，不過還沒有開始編輯之。這發生於你剛做 ":e file"
的時候。


局 部 參 數 列 表

{Vi 無此功能}
{僅在編譯時加入 |+windows| 和 |+listcmds| 特性時才有效}

							*:arglocal*
:argl[ocal]		複製一個全域性引數列表的區域性備份。並不開始編輯另外一個文
			件。

:argl[ocal][!] [++opt] [+cmd] {arglist}
			定義一個新的區域性於當前視窗的引數列表。除此以外，和
			|:args_f| 列表。

							*:argglobal*
:argg[lobal]		當前視窗使用全域性引數列表。並不開始編輯另外一個檔案。

:argg[lobal][!] [++opt] [+cmd] {arglist}
			當前視窗使用全域性引數列表。和 |:args_f| 一樣，定義一個
			新的全域性引數列表。所有使用全域性引數列表的視窗都會看到這
			個新的列表。

可以有多個引數列表。他們可以在視窗之間共享。如果他們共享，在其中一個視窗修改參
數列表就會改變另一個視窗的列表。

如果一個視窗被分割，新的視窗從原來的視窗繼承引數列表。兩個視窗因而共享該列表，
直到其中一個視窗使用 |:arglocal| 或 |:argglobal| 來使用另外一個引數列表。


使 用 參 數 列 表

						*:argdo*
:[range]argdo[!] {cmd}	對引數列表裡的每個檔案執行 {cmd}。如果給出 [range]，只
			對給出範圍內的引數執行。
			它的工作方式大致如下: >
				:rewind
				:{cmd}
				:next
				:{cmd}
				等等
<			如果當前檔案不能被放棄 |abandon| 而且不存在 [!]，該命
			令失敗。
			如果一個檔案檢測到錯誤，引數列表裡的其餘檔案將不再被操
			作。
			引數列表裡的最後一個檔案 (或發生錯誤的那個) 成為當前文
			件。
			{cmd} 可以包含 '|'，從而連線多個命令。
			{cmd} 不可修改引數列表。
			注意: 當命令執行時，Syntax 自動命令事件被加到
			'eventignore' 裡，從而被遮蔽。這樣顯著提高了編輯每個文
			件的速度。
			{Vi 無此功能} {僅當編譯時加入 |+listcmds| 特性才有效}
			另見 |:windo|、|:tabdo|、|:bufdo|、|:cdo|、|:ldo|、
			|:cfdo| 和 |:lfdo|

示例: >
	:args *.c
	:argdo set ff=unix | update
它把 'fileformat' 選項設為 "unix"，並寫回現在已改變的所有的 *.c 檔案。

示例: >
	:args *.[ch]
	:argdo %s/\<my_foo\>/My_Foo/ge | update
它把所有 *.c 和 *.h 檔案裡的單詞 "my_foo" 換成 "My_Foo"。"e" 標誌位使得
":substitute" 命令對沒有使用 "my_foo" 的檔案不提示錯誤。":update" 只有在發生改
變的時候才寫入檔案。

==============================================================================
4. 寫入						*writing* *save-file*

注意: 如果 'write' 選項關閉，你不能寫入任何檔案。

							*:w* *:write*
						*E502* *E503* *E504* *E505*
						*E512* *E514* *E667* *E796*
:w[rite] [++opt]	將整個緩衝區寫入當前檔案。這是儲存檔案更動最普通的方
			式。如果置位了 'readonly' 選項或者其他原因不能寫入文
			件，它會失敗。
			關於 ++opt 可見 |++opt|，但只有 ++bin、++nobin、++ff
			和 ++enc 有效。

:w[rite]! [++opt]	和 ":write" 類似，但即使 'readonly' 已置位或者有其他原
			因寫入被拒絕，還是強制寫入。
			注意: 這可能會改變檔案的許可權和所有者，或者破壞 (符號)
			連線。在 'cpoptions' 里加上 'W' 標誌位可以避免這一點。

:[range]w[rite][!] [++opt]
			將指定行寫入當前檔案。這是很特別的，因為檔案裡將不會包
			含緩衝區的所有行。

							*:w_f* *:write_f*
:[range]w[rite] [++opt]	{file}
			將指定行寫入檔案 {file}，除非該檔案已存在並且未置位
			'writeany' 選項。

							*:w!*
:[range]w[rite]! [++opt] {file}
			將指定行寫入檔案 {file}。覆蓋已存在的檔案。

						*:w_a* *:write_a* *E494*
:[range]w[rite][!] [++opt] >>
			將指定行附加到當前檔案後。

:[range]w[rite][!] [++opt] >> {file}
			將指定行附加到檔案 {file} 之後。'!' 強制寫入，即使該文
			件還不存在。

							*:w_c* *:write_c*
:[range]w[rite] [++opt] !{cmd}
			執行命令 {cmd}，以 [range] 指定的行作為它的標準輸入。
			(注意 ! 之前的空格)。{cmd} 以 ":!{cmd}" 類似的方式被執
			行，任何 '!' 被替換成前一個命令 |:!|。

":w" 命令預設的 [range] 是整個緩衝區 (1,$)。如果寫回整個緩衝區，緩衝區不再被認
為已改變。用 ":w somefile" 寫到別的檔案的情形則取決於 'cpoptions' 的 "+" 標誌
位。如果包含，即便緩衝區本身和其關聯的檔案可能已不同，該寫命令還是復位
"modified" 標誌位。

如果 ":w" 給出一個檔名，它成為輪換檔案。這可以用來，比如說，當寫入失敗而你想
再遲些再試一次: ":w #"。該功能可以通過從 'cpoptions' 選項裡去掉 'A' 標誌位來關
閉。

							*:sav* *:saveas*
:sav[eas][!] [++opt] {file}
			用檔名 {file} 儲存當前緩衝區，並設定當前緩衝區的檔案
			名為 {file}。前一個名字用作輪換檔名。[!] 用以覆蓋已
			存在的檔案。
			如果 'filetype' 為空，在寫入檔案前用新名字進行檔案型別
			檢測。
			如果寫操作成功，復位 'readonly'。
			{Vi 無此功能}

							*:up* *:update*
:[range]up[date][!] [++opt] [>>] [file]
			和 ":write" 類似，但只有在緩衝區已修改的時候才寫入。
			{Vi 無此功能}


寫 入 多 個 緩 衝 區					*buffer-write*

							*:wa* *:wall*
:wa[ll]			儲存所有已修改的緩衝區。沒有檔名的緩衝區會報錯。只讀
			的緩衝區不會被寫入。{Vi 無此功能}

:wa[ll]!		儲存所有已修改的緩衝區，包括只讀的。沒有檔名的緩衝區
			不會寫入並報錯。{Vi 無此功能}


如果你試圖覆蓋在別的地方修改的檔案，Vim 會警告你。參見 |timestamp|。

			    *backup* *E207* *E506* *E507* *E508* *E509* *E510*
如果你寫入已存在的檔案 (但非附加) 而打開了 'backup'、'writebackup' 或者
'patchmode' 選項，原來檔案的一個備份會被建立。該檔案或者由複製，或者由換名得
到 (見 'backupcopy')。在檔案被成功寫入後，當置位 'writebackup' 選項而沒有置位
'backup' 時，該備份檔案被刪除。當 'patchmode' 選項開啟時，備份檔案可能被改名。

							*backup-table*
'backup' 'writebackup'	動作	~
   關	     關		沒有備份
   關	     開		備份當前檔案，寫入後刪除 (預設)
   開	     關		刪除舊的備份，備份當前檔案
   開	     開		刪除舊的備份，備份當前檔案

當 'backupskip' 模式匹配被寫入的檔名，備份檔案不會被建立。此時，'backup' 和
'writebackup' 被忽略。

如果 'backup' 選項置位，舊的備份檔案 (與新的備份檔案同名) 被刪除。如果沒有置位
'backup' 但置位了 'writebackup'，已有的備份檔案不會被刪除。檔案寫入時使用的是
另外一個檔名。

有些檔案系統的崩潰可能導致備份檔案和新寫入的檔案同時丟失 (可能還在但包含不正確
資料)。這種情況下可以嘗試修復功能 |:recover|，因為交換檔案在盤上保持一個同步的
備份，可能還有用。

'backupdir' 選項給出的目錄用於存放備份檔案 (預設在寫入檔案的相同目錄)。

不管備份檔案是否新建，它是否原始檔案複製還是換名得來由 'backupcopy' 選項決定。
該選項的描述解釋了何時使用複製，何時使用換名。

如果備份檔案建立失敗，寫入不會進行。除非命令中加上 '!'。

							*write-permissions*
寫入新檔案時其許可權設為可讀寫。unix 上的掩碼是 0666 外加 umask。寫入已經讀入的
檔案時，Vim 保留原有許可權，但清除 s 位。

							*write-readonly*
如果 'cpoptions' 選項裡包含 'W'，Vim 拒絕覆蓋只讀檔案。如果沒有該標誌位，":w!"
可以用來覆蓋只讀檔案， 如果系統支援的話 (目錄本身必須是可寫的)。

							*write-fail*
如果新檔案寫入失敗，要小心不要同時丟失了你的修改內容_和_原始的檔案。如果沒有
備份檔案而寫入新檔案失敗的話，原始的檔案已經沒有了！除 非 你 寫 了 文 件，不
要 退 出 VIM！如果建立了備份，它儲存了原始檔案的內容 (如果可能的話)。如果你退
出 Vim 並丟失了修改的部分，原始的檔案很有可能還在。如果原始檔案的儲存也失敗的
話，你會得到一個錯誤資訊，提示丟失了原始檔案。

						*DOS-format-write*
如果 'fileformat' 為 "dos"，<CR><NL> 用作換行符 <EOL>。這是 MS-DOS，Win32 和
OS/2 的預設行為。在其他系統中，"[dos format]" 資訊會提示你使用了不同尋常的
<EOL>。
						*Unix-format-write*
如果 'fileformat' 為 "unix"，<NL> 用作換行符 <EOL>。在 MS-DOS，Win32 和 OS/2
上會顯示 "[unix format]"。
						*Mac-format-write*
如果 'fileformat' 為 "mac"，<CR> 用作換行符 <EOL>。在非 Mac 的系統上會顯示
"[mac format]" 訊息。

另見 |file-formats| 和 'fileformat' 以及 'fileformats' 選項。

						*ACL*
ACL 代表訪問控制表 (Access Control List)。這是控制檔案訪問許可權一個高階方法。在
新的 MS-Windows 和 Unix 系統上，如果有檔案系統的支援，可以使用之。
   Vim 試圖在寫入檔案時保留 ACL 資訊。備份檔案會用和原始檔案相同的 ACL 資訊。
   ACL 資訊也用來檢查檔案是否只讀 (在開啟檔案時)。

						*read-only-share*
當 MS-Windows 共享網路驅動器時，可以指定其為只讀。這意味著即使檔案本身沒有隻讀
屬性，你也不能寫入該檔案。Win32 平臺上的 Vim 會檢測只讀的網路驅動器，並標記其
上的檔案為只讀。你不能用 |:write| 修改。

						*write-device*
如果檔名其實是裝置名，Vim 不會建立備份 (這也不可能)。你需要使用 "!"，因為設
備已經存在。Unix 上的示例: >
	:w! /dev/lpt0
MS-DOS 或 MS-Windows 上: >
	:w! lpt0
Unix 上當檔名不引用一個普通檔案或者目錄時，檢測為裝置。fifo 和命令管道對 Vim
而言視同裝置。MS-DOS 和 MS-Windows 上以下名字檢測為裝置:
	AUX
	CON
	CLOCK$
	NUL
	PRN
	COMn	n=1,2,3... 等
	LPTn	n=1,2,3... 等
名字大小寫均可。

==============================================================================
5. 寫入並退出						*write-quit*

							*:q* *:quit*
:q[uit]			退出當前視窗。如果是最後的一個，退出 Vim。如果已經有
			修改而且 Vim 拒絕放棄 |abandon| 當前的緩衝區，或者
			如果引數列表的最後一個檔案還沒有被編輯，該操作失敗。
			如果有其它標籤頁，並且退出的是當前標籤頁的最後一個窗
			口，關閉當前標籤頁 |tab-page|。
			啟用 |QuitPre| 自動命令事件。

:conf[irm] q[uit]	退出，但如果已經有修改或者引數列表的最後一個檔案還未被
			編輯，給出提示。參見 |:confirm| 和 'confirm'。 {Vi 無
			此功能}

:q[uit]!		退出不儲存，即使當前緩衝區發生了修改也是。緩衝區被卸
			載，包括置位 'hidden' 了的。
			如果是最後一個視窗並有修改過的隱藏緩衝區，放棄當前緩衝
			區，第一個修改過的隱藏緩衝區成為當前緩衝區。
			為了保證總能退出，用 ":qall!"。

:cq[uit]		在任何情形下，退出不儲存，並返回一個錯誤程式碼。參見
			|:cq|。此功能可用於 Manx 的 QuickFix 模式 (參見
			|quickfix|)。  {Vi 無此功能}

							*:wq*
:wq [++opt]		寫回當前的檔案並且退出。如果檔案只讀或者該緩衝區無名，
			寫回操作將失敗。如果引數列表的最後一個檔案還沒有編輯，
			那麼退出操作將會失敗。

:wq! [++opt]		寫回當前的檔案並且退出。如果當前緩衝區無名，則寫回操作
			將失敗。

:wq [++opt] {file}	寫入到 {file} 並且退出。 如果引數列表的最後一個檔案還
			沒有編輯， 那麼退出操作將會失敗。

:wq! [++opt] {file}	寫入到 {file} 並且退出。

:[range]wq[!] [++opt] [file]
			同上，但只寫入 [range] 界定的那些行。

							*:x* *:xit*
:[range]x[it][!] [++opt] [file]
			和 ":wq" 類似， 但只有檔案已修改時寫入才會實際進行。
			如果 'hidden' 被設定並且還有其他視窗，當前緩衝區會在
			寫入後被隱藏。

							*:exi* *:exit*
:[range]exi[t][!] [++opt] [file]
			同 :xit。

							*ZZ*
ZZ			如果檔案被修改，寫回當前檔案。然後退出。(和 :x 相
			同)。(注意: 如果有當前檔案有多個視窗，該檔案在被修改
			時會被寫回，當前視窗會被關閉)。

							*ZQ*
ZQ			退出，不檢查是否發生了修改 (等同於 ":q!")。
			{Vi 無此功能}

多 個 窗 口 和 緩 衝 區					*window-exit*

							*:qa* *:qall*
:qa[ll]		退出 Vim，除非存在修改過的緩衝區。(可以使用 ":bmod" 跳轉
		到下一個修改過的緩衝區)。如果置位了 'autowriteall'，所有
		被修改的緩衝區將被儲存，一如呼叫了 |:wqall|。{Vi 無此功能}

:conf[irm] qa[ll]
		退出 Vim。如果存在修改過的緩衝區，給出提示。參見 |:confirm|。
		{Vi 無此功能}

:qa[ll]!	退出 Vim，不會儲存任何的修改。 {Vi 無此功能}
		另見 |:cquit|，功能相同但使用非零的退出值。

							*:quita* *:quitall*
:quita[ll][!]	等同於 ":qall"。{Vi 無此功能}

:wqa[ll] [++opt]				*:wqa* *:wqall* *:xa* *:xall*
:xa[ll]		儲存所有修改過的緩衝區並退出 Vim。如果其中有無名的、只讀的、
		或者其他原因寫入失敗的緩衝區，Vim 不會退出。{Vi 無此功能}

:conf[irm] wqa[ll] [++opt]
:conf[irm] xa[ll]
		儲存所有修改過的緩衝區並退出 Vim。如果其中有隻讀或者其他原因
		寫入失敗的緩衝區，給出提示。參看 |:confirm|。{Vi 無此功能}

:wqa[ll]! [++opt]
:xa[ll]!	儲存所有修改過的緩衝區，甚至包括只讀的，然後退出 Vim。不過，
		如果有無名或者其他原因寫入失敗的緩衝區，Vim 仍然不會退出。
		{Vi 無此功能}

==============================================================================
6. 對話方塊						*edit-dialogs*

							*:confirm* *:conf*
:conf[irm] {command}	執行 {command}，如果有操作需要確認，顯示對話方塊。可用於
			":q"、":qa" 和 ":w" 命令 (後者用於超越只讀的設定)，和
			其他會以類似方式失敗的命令，如 |:only|、|:buffer|、
			|:bdelete| 等。

示例: >
  :confirm w foo
<	如果 "foo" 存在請求確認。 >
  :confirm q
<	如果有改變請求確認。 >
  :confirm qa
<	如果有任何修改過的未儲存的緩衝區存在，對其中的每個緩衝區提示是儲存還是
	放棄。還可以選擇 "save all" (儲存所有) 或 "abandon all" (放棄所有)。

如果你希望總是用 ":confirm"，置位 'confirm' 選項。

			*:browse* *:bro* *E338* *E614* *E615* *E616*
:bro[wse] {command}	為 {command| 的引數顯示檔案選擇對話方塊。目前這可用於
			|:e|、|:w|、|:wall|、|:wq|、|:wqall|、|:x|、|:xall|、
			|:exit|、 |:view|、|:sview|、|:r|、|:saveas|、|:sp|、
			|:mkexrc|、|:mkvimrc|、|:mksession|、|:mkview|、
			|:split|、|:vsplit|、|:tabe|、|:tabnew|、|:cfile|、
			|:cgetfile|、|:caddfile|、|:lfile|、|:lgetfile|、
			|:laddfile|、|:diffsplit|、|:diffpatch|、|:open|、
			|:pedit|、|:redir|、|:source|、|:update|、|:visual|、
			|:vsplit|，還有如果置位 'confirm' 的話，|:qall|。

			{僅對 Win32、Athena、Motif、GTK 和 Mac GUI 有效}
			如果不可用 ":browse"，你會得到錯誤訊息。如果 |+browse|
			特性不存在或者 {command} 不支援該 (瀏覽) 功能，不顯示
			對話方塊，如常執行 {command}。
			":browse set" 和 |:options| 類同。
			關於 ":browse oldfiles"，另見 |:oldfiles|。

該語法最好通過若干範例說明之: >
	:browse e $vim/foo
<		在 $vim/foo 目錄裡開啟瀏覽器並編輯選擇的檔案。 >
	:browse e
<		在 'browsedir' 指定的目錄裡開啟瀏覽器並編輯選擇的檔案。 >
	:browse w
<		在當前緩衝區所在的目錄裡開啟瀏覽器。預設使用當前緩衝區的檔案
		名。把緩衝區寫入到指定的檔案。 >
	:browse w C:/bar
<		在 C:/bar 目錄裡開啟瀏覽器，預設使用當前緩衝區的檔名，把緩衝
		區寫入到指定的檔案。
另見 |'browsedir'| 選項。
如果所用的 Vim 版本不支援瀏覽，該命令照原樣執行。

							*browsefilter*
對 MS Windows 和 GTK 而言，你可以修改瀏覽對話方塊的過濾 (filter)。設定
g:browsefilter 或 b:browsefilter 變數，你可以修改全域性或區域性於緩衝區的過濾設
置。該變數應設為符合如下格式的字串 "{過濾標籤}\t{pattern};{pattern}\n"，其中
的 {過濾標籤} 是出現 "Files of Type" 組合框裡應出現的文字，而 {pattern} 是過濾
檔名的模式。可以給出多個模式，以 ";" 分隔。

Motif 使用相同的格式，但只使用第一個模式 (Motif 只提供一個模式，但可以編輯)。

例如，要使得對話方塊裡只顯示 Vim 檔案，你可以用以下命令: >

     let g:browsefilter = "Vim Scripts\t*.vim\nVim Startup Files\t*vimrc\n"

你可以通過在某個緩衝區上設定 b:browsefilter 變數超越全域性過濾的設定。最有可能的
情況是在檔案型別外掛裡設定 b:browsefilter，以便瀏覽對話方塊只顯示和當前編輯的文
件所屬型別相關的專案。缺點是: 無法編輯一個新的不同型別的檔案。要克服這一點，你
可以加上 "All Files\t*.*\n" 作為最後的過濾。使用者從而擁有訪問任何型別檔案的選
擇。

如果 Vim 不能實際支援時不想設定 browsefilter，可以測試 has("browsefilter"): >

	if has("browsefilter")
	   let g:browsefilter = "你要的值"
	endif

==============================================================================
7. 當前目錄						*current-directory*

你也可以用 |:cd| 和 |:lcd| 命令換到別的目錄，所以你可以不用總是在檔名前輸入
目錄名。這也影響到外部命令的執行，例如 ":!ls"。

如果當前緩衝區被修改、'cpoptions' 裡有 '.' 標誌位而命令又不使用 "!"，那麼改變
目錄會失敗。

							*:cd* *E747* *E472*
:cd[!]			在非 Unix 系統上: 顯示當前目錄名。在 Unix 系統上: 改變
			當前目錄到主 (home) 目錄。在所有的系統上，用 |:pwd| 可
			以顯示當前目錄。

:cd[!] {path}		切換當前目錄為 {path}。如果 {path} 是相對路徑，則在
			|'cdpath'| 列出的目錄搜尋之。
			這不會改變已經開啟的檔案，因為記住的是它們的完整路徑。
			但 |arglist| 裡的檔案則可能會改變！
			MS-DOS 上這會同時改變當前的驅動器。
			要改變到當前檔案的目錄: >
				:cd %:h
<
							*:cd-* *E186*
:cd[!] -		切換到上一個當前目錄 (在上個 ":cd {path}" 命令之前)。
			{Vi 無此功能}

							*:chd* *:chdir*
:chd[ir][!] [path]	和 |:cd| 相同。

							*:lc* *:lcd*
:lc[d][!] {path}	和 |:cd| 類似，但只設置當前視窗的當前目錄。別的視窗的
			當前目錄保持不變。{Vi 無此功能}

							*:lch* *:lchdir*
:lch[dir][!]		和 |:lcd| 相同。{Vi 無此功能}

							*:pw* *:pwd* *E187*
:pw[d]			顯示當前目錄名。{Vi: 沒有 pwd}
			另見 |getcwd()|。

只要沒有用過 |:lcd| 命令，所有視窗共享同一個當前目錄。切換到別的視窗的命令因此
不會改變當前目錄。
當某個視窗用了 |:lcd| 命令，所指定的目錄成為該視窗的當前目錄。沒用過 |:lcd| 的
視窗還是和全域性的當前目錄同步。跳轉到另一個視窗時，當前目錄成為上次指定的本地當
前目錄。如果沒有指定過，則使用全域性當前目錄。
如果使用 |:cd| 命令，當前視窗會丟失他的本地當前目錄，並從此以後使用全域性當前目
錄。

|:cd| 的完整路徑名用於其後的檔案讀寫。在某些網路檔案系統中，這可能會引起麻煩。
使用完整路徑名的結果是當前使用的檔名還是指向相同的檔案。例如: 如果你有檔案
a:test 和 目錄 a:vim。命令 ":e test" ":cd vim" ":w" 會覆蓋檔案 a:test 而不是
a:vim/test。但如果你使用 ":w test" 檔案 a:vim/test 會被覆蓋，因為你給出一個新
的檔名，因而與 ":cd" 之前所指向的檔案業已不同。

==============================================================================
8. 編輯二進位制檔案					*edit-binary*

儘管 Vim 是用來編輯文字檔案的，它也可用來編輯二進位制檔案。Vim 的 |-b| 引數 (b
代表二進位制 (binary)) 使 Vim 以二進位制模式進行檔案讀寫操作，並設定二進位制檔案編輯
相關的一些選項 ('binary' 開啟，'textwidth' 為 0，'modeline' 關閉，'expandtab'
關閉)。置位 'binary' 選項效果相同。不要忘記應在讀入檔案之前進行該操作。

編輯二進位制檔案時要注意以下幾點:
- 在編輯可執行檔案時，不要修改字元數。只用 "R" 或 "r" 命令來修改文字。不要用
  "x" 或退格鍵刪除字元。
- 設定 'textwidth' 選項為 0。不然，行會被意外的截為兩段。
- 如果 <EOL> 符不多，行會很長。如果你希望編輯螢幕顯示不下的行，重設 'wrap' 選
  項，使用橫向滾動。如果一行過長 (Amiga 上超過 32767 個字元，32 位系統中則大得
  多，見 |limits|)，你不能編輯該行。該行在讀入時會被截斷。也可能讀入發生 "out
  of memory" 錯誤。
- 確保在讀入檔案_前_置位 'binary' 選項。不然，<CR><NL> 和 <NL> 都被認為行尾，
  從而在寫回時，<NL> 會被 <CR><NL> 取代。
- <Nul> 字元會在螢幕上顯示為 ^@。你可以用 "CTRL-V CTRL-@" 或 "CTRL-V 000" 輸入
  之 {Vi 不能處理檔案裡的 <Nul> 字元}
- 插入 <NL> 字元會截斷一行。在將緩衝區寫入到檔案時，<NL> 會作為 <EOL> 被寫入。
- 如果檔案尾沒有 <EOL>，Vim 通常會自己加上。置位 'binary' 選項會禁止這一行
  為。你也可以讀取該選項的值來知道最後一行是否有 <EOL> (文字上你是看不到的)。

==============================================================================
9. 加密							*encryption*

Vim 可用加密的方式寫入檔案並讀回。沒有正確的金鑰，加密文字不能被讀取。
{僅當編譯時加入 |+cryptv| 功能才有效}  *E833*

交換檔案和撤銷檔案的文字也被加密。 *E843*
不過，這是分塊進行的，這樣可能縮短破解金鑰的時間。可以關閉交換檔案，但任何崩潰
會丟失你之前的成果。關閉撤銷檔案但沒有什麼大損失。 >
	:set noundofile
	:noswapfile edit secrets

注意: 記憶體裡的文字是不加密的。系統管理員因此可以在你編輯時看到你的文字。用
":!filter" 或者 ":w !command" 過濾的文字也是不加密的，這些都可能造成文字洩露。
'viminfo' 檔案也不加密。

要編輯極度機密的文字: >
	:set noundofile viminfo=
	:noswapfile edit secrets.txt
牢記沒有交換檔案意味著你冒崩潰、停電等事件時丟失工作成果的風險。

_警告_: 如果在輸入金鑰時發生錯誤而且寫入檔案後退出，這些文字就永遠丟失了。

使用加密的通常方法是用 ":X" 命令，它會提示你輸入一個金鑰。其後的一個寫入命令會
使用該金鑰加密檔案。如果你以後編輯該檔案，Vim 會要求你輸入金鑰。如果你的輸入正
確，檔案是可讀的，不然，文字會顯示為亂碼。

							*:X*
:X	提示加密金鑰。輸入時不會反顯輸入的內容。別人即使看到螢幕，也不能看見你
	的金鑰。輸入的字元儲存在 'key' 選項裡，它的值用來在寫入檔案時加密該文
	件。在寫入之前，該檔案保持不變。另見 |-x|。

'key' 選項裡的值在檔案寫入時使用。如果該選項非空，寫入的檔案會用它的值作為金鑰
加密。加密過的檔案的頭部有個魔術數字，使得 Vim 可以識別這是加密檔案。

要關閉加密，復位 'key' 選項為空值: >
	:set key=

使用 'cryptmethod' 選項來選擇加密方法為以下之一: >
	:setlocal cm=zip        " 較弱的加密方法，後向相容
	:setlocal cm=blowfish   " 有漏洞的方法
	:setlocal cm=blowfish2  " 中等強度的方法

必須在寫入檔案前進行。讀入加密檔案時，自動設定該選項為檔案寫入時選擇的方法。寫
入前改變 'cryptmethod' 就可以改變使用的加密方法。

要設定用於新檔案的預設方法，在 |vimrc| 檔案中放入: >
	set cm=blowfish2
強烈推薦使用 "blowfish2"。只有在不支援它的舊版本的 Vim 上才用其它方法。

讀寫檔案給出的資訊會顯示 "[crypted]" 對應 zip，"[blowfish]" 對應 blowfish，等
等。

寫入撤銷檔案時，撤銷檔案的文字使用相同的金鑰和方法。|persistent-undo|。

要測試有無 blowfish 支援，使用以下條件: >
	has('crypt-blowfish')
	has('crypt-blowfish2')
儘管更早時就有 blowfish 支援，這隻可用於 Vim 7.4.1099 開始的版本。所以此條件的
失敗不意味著不支援 blowfish。可以這麼測試 blowfish: >
	v:version >= 703
對 blowfish2 則可以用: >
	v:version > 704 || (v:version == 704 && has('patch401'))
如果確信你的 Vim 包含了 patch 7.4.237，更簡單的檢查是: >
	has('patch-7.4.401')
<
						*E817* *E818* *E819* *E820*
如果加密過程有錯，文字可以寫到檔案裡，但再不能正確讀回來了。為此準備了一項測試
以確定加密順利完成。如果看到這些錯誤其中之一，不要以加密方式寫入檔案！要修正
之，你需要重新編譯 Vim 程式。

*E831* 這是一個內部錯誤，"不應該發生"。如果你能重現該錯誤，請向開發者報告。

讀入加密檔案時如果 'key' 選項非空，它被用作解密的金鑰。如果該值為空，你會得到
提示，輸入金鑰。如果你不輸金鑰或者金鑰不符，該檔案以未解密的形式被編輯。使用錯
誤的金鑰不會有警告 (以增加暴力破解金鑰的難度)。

如果要以不同的金鑰讀入別的檔案，設定 'key' 選項為空串，從而讓 Vim 給出提示輸入
新值。不要用 ":set" 命令輸入該值，否則別人在你身後就能看到了。

因為 'key' 選項的值應該是個祕密，永遠不要看它的值，也不要在 vimrc 檔案裡設定。

如果你把如下諸行加到 "/etc/magic"、"/usr/share/misc/magic" 或者你係統支援的
"magic" 檔案裡，你的加密檔案可以被 "file" 命令識別: >
     0	string	VimCrypt~	Vim encrypted file
     >9	string	01	- "zip" cryptmethod
     >9	string	02	- "blowfish" cryptmethod
     >9	string	03	- "blowfish2" cryptmethod

注意:
- 如果用 'charconvert' 轉換，不能實施加密。
- 你複製或者刪除的文字儲存在編號的暫存器中。暫存器可以儲存在 .viminfo 檔案裡，
  從而可以讀到。修改你的 'viminfo' 選項以確保安全。
- 如果你走開一會兒，別入可能在 Vim 裡輸入命令，他不可能得到你的金鑰。
- 如果你輸入金鑰時發生錯誤，你就無法取回你的文字了！
- 如果你用 ":set key=value" 命令輸入金鑰，它會儲存在歷史裡，從而在 viminfo 文
  件裡顯示 'key' 的值。
- 沒有 100% 的安全。Vim 的加密演算法沒有經過健壯性的嚴格測試。
- 用於 'cryptmethod' 的 "zip" 演算法是可以破解的。一個 4 字元的金鑰需要大概一個
  小時，6 字元的金鑰需要一天 (在一臺 Pentinum 133 PC 上)。這需要你知道檔案裡一
  定會出現的若干文字。
  專家可以依此方法破解任何金鑰，如果文字已經被解密，則金鑰可以被推算出，而其他
  以相同金鑰加密的檔案也能被解出。
- Pkzip 使用和 'cryptmethod' 的 "zip" 相同的加密方法，美國政府對其出口不持異
  議。Pkzip 的公共檔案 APPNOTE.TXT 詳細描述了這一演算法。
- 'cryptmethod' 的 "blowfish" 實現有漏洞。可以破解檔案的前 64 個位元組，在有些情
  況下，甚至更多。不推薦，但 Vim 7.3 和 7.4 裡還是最強的方法。"zip" 方法更弱。
- Vim 起源於荷蘭。這是原始碼的出處。因此，加密程式碼並非從美國出口。

==============================================================================
10. 修改時間					*timestamp* *timestamps*

Vim 記住檔案開始編輯時的修改時間、模式和大小。這用來防止 (在你自己知道之前) 你
有同一個檔案的不同版本。

在執行了外殼命令 (|:!cmd| |suspend| |:read!| |K|) 以後，Vim 會對窗口裡的所有緩
衝區的修改時間、模式和大小進行比較。Vim 會對在此期間被修改的檔案執行相關的
|FileChangedShell| 自動命令或者顯示警告。GUI 上，在 Vim 取回輸入焦點的時候也會
發生。

							*E321* *E462*
如果你想自動重新載入在 Vim 之外被修改的檔案的新內容，置位 'autoread' 選項。如
果你已經在 Vim 裡修改過這個檔案，這不會工作。

如果你不想被詢問，也不想自動載入檔案，可以這樣: >
	set buftype=nofile

或者，從外殼啟動 gvim: >
	gvim file.log -c "set buftype=nofile"

注意 如果定義了 FileChangedShell 自動命令，你不會得到警告資訊或者提示。該自動
命令應負責處理。

對目錄的修改也不會有警告 (例如用 |netrw-browse|)，除非你開始編輯一個新檔案，但
它在外部被建立為一個目錄。

當 Vim 注意到一個檔案的修改時間被修改並且該檔案正在緩衝區裡等待編輯但還未經修
改，會先檢查檔案內容是否相同，這是通過再次讀入該檔案 (到一個隱藏緩衝區，該緩衝
區事後被立即刪除)，並比較兩個緩衝區的文字完成的。如果相同，你不會得到警告。

如果你覺得警告不夠及時或不夠充分，你可以使用如下命令。

							*:checkt* *:checktime*
:checkt[ime]		檢查是否有緩衝區在 Vim 之外被改變。 該命令檢查你是否有
			檔案的兩個版本並給出警告。
			如果它在自動命令、":global" 命令或者任何非鍵盤輸入中調
			用，實際的檢查會延遲，直到副作用 (重新讀入檔案) 不會有
			任何問題。
			每個已讀入的緩衝區會檢查相關的檔案是否被改變。如果是，
			則 Vim 會採取行動。如果緩衝區沒有修改過而且置位了
			'autoread'，緩衝區被重新讀入。否則，你會被詢問是否重新
			讀入檔案。如果檔案被刪除，你會得到一個錯誤資訊。如果文
			件過去不存在但現在已經存在，你會得到一個警告。
			一旦檢查過某個檔案，他的修改時間被重置。因而，你不會被
			重複警告。

:[N]checkt[ime] {filename}
:[N]checkt[ime] [N]
			檢查某個特定緩衝區的修改時間。該緩衝區可以用名字、編號
			或者模式指定。


							*E813* *E814*
如果你指定 Vim 過載緩衝區，如果某可見視窗包含了該緩衝區，過載會在該視窗的上下
文中進行。否則，會使用一個特殊視窗，這使得大多數的自動命令可以執行。你不能關閉
這個視窗，還有一些其它特殊的限制。最好不要涉及到本緩衝區之外的物件。例如，設定
區域性於視窗的選項可能會選錯視窗。分割視窗來做一些操作，然後關閉新分割的視窗應該
沒問題 (假定其它自動命令沒有副作用)。但關閉不相關的視窗和緩衝區就不好了。

在你寫入檔案的時候，修改時間被檢查。如果發生了改變，Vim 會提示你是否要真的覆蓋
該檔案:

	WARNING: The file has been changed since reading it!!!
	Do you really want to write to it (y/n)?

如果你按 'y'，Vim 會繼續寫入檔案。如果你按 'n'，寫入操作被取消。如果你用 ":wq"
或者 "ZZ"，Vim 因而不會退出。從而你還有機會寫入檔案。

通常，該訊息意味著有人在編輯會話開始後，寫入到該檔案裡。這可能是別人，這時你可
能想檢查你的修改和別人的修改是否可以合併。將檔案寫到別的名字然後比較兩者的差
異 (可以用 "diff" 程式)。

當然也有可能你自己在另外一個編輯會話中或者用別的命令 (例如一個過濾命令) 修改了
該檔案。這樣，你自己知道希望保留檔案的哪個版本。

有一個情況即使在沒有任何錯誤的時候也會得到訊息: Win32 系統在夏令時開始的時候。
Win32 庫的一些細節使得 Vim 對小時的變化有些混淆。第二天問題就沒有了。

==============================================================================
11. 檔案搜尋						*file-searching*

{僅當編譯時加入 |+path_extra| 特性才有效}

檔案搜尋目前用於 'path'、'cdpath' 和 'tags' 選項和 |finddir()| 和
|findfile()|。其他命令使用 |wildcards|，則略有不同。

有三種不同型別的搜尋:

1) 向下搜尋:						*starstar*
   向下搜尋使用 '*'、'**' 或其他作業系統支援的萬用字元。'*' 和 '**' 是由 Vim 內
   部處理的，以適用於所有作業系統。注意 "**" 只在檔名開始處才被當作特殊的通
   配符。

   '*' 的使用很簡單: 匹配 0 個或更多字元。如果用搜索模式，應該是 ".*"。但注意
   檔案搜尋不使用 "." 元字元。

   '**' 則複雜的多:
      - _只_匹配目錄。
      - 匹配預設最多可達 30 層的目錄。所以你可以用它整個目錄樹裡查詢
      - 最大匹配的層數可以通過在 '**' 之後給出數字限定。
	這樣，'/usr/**2' 可以匹配: >
		/usr
		/usr/include
		/usr/include/sys
		/usr/include/g++
		/usr/lib
		/usr/lib/X11
		....
<	它_不_匹配 '/usr/include/g++/std'，因為這已到了第三層。
	允許的數字範圍是 0 ('**0' 被直接去掉) 到 100。如果給定的數字小於 0，則
	預設為 30。如果大於 100，則使用 100。系統本身還有路徑長度的上限，通常
	是 256 或 1024 位元組。
      - '**' 只能用於路徑的尾部，或者後面緊跟一個路徑分隔符，或者後面緊跟一個
	數字加一個路徑分隔符。

   你可以用任何順序混合 '*' 和 '**': >
	/usr/*/sys/**
	/usr/*tory/sys/**
	/usr/**2/sys/*

2) 向上搜尋:
   這裡，你可以給出一個目錄，然後沿著目錄樹向上搜尋一個檔案。你可以給出若干終
   止目錄來限制搜尋的範圍。終止目錄附加於路徑 (對 'path' 選項而言) 或檔名
   (對 'tags' 選項而言) 之後，中間以 ";" 分隔。如果需要多個終止目錄，一一列
   出，以 ';' 分隔。如果你不想要終止目錄 (搜尋直到根目錄)，只要用 ";"。 >
	/usr/include/sys;/usr
<   會在以下位置搜尋: >
	   /usr/include/sys
	   /usr/include
	   /usr
<
   如果你用相對路徑，則向上搜尋始於 Vim 的當前目錄或當前檔案的目錄 (如果相對路
   徑始於 "./" 並且 'cpoptions' 裡不含 'd' 的話)。

   如果 Vim 的當前路徑是 /u/user_x/work/release 而你用 >
	:set path=include;/u/user_x
<  然後用 |gf| 搜尋檔案，則檔案在如下位置搜尋: >
	/u/user_x/work/release/include
	/u/user_x/work/include
	/u/user_x/include

3) 混合向上/向下搜尋
   如果 Vim 當前路徑是 /u/user_x/work/release 而你用 >
	set path=**;/u/user_x
<  然後用 |gf| 搜尋檔案，則檔案在如下位置搜尋: >
	/u/user_x/work/release/**
	/u/user_x/work/**
	/u/user_x/**
<
   _要小心_！這會消耗大量時間，因為對 '/u/user_x/**' 的搜尋包括
   '/u/user_x/work/**' 和 '/u/user_x/work/release/**'。因此
   '/u/user_x/work/release/**' 被搜尋三遍而 '/u/user_x/work/**' 被搜尋兩遍。

   因而，在上例中你可能想如此設定 path: >
	:set path=**,/u/user_x/**
<   這會搜尋:
	/u/user_x/work/release/** ~
	/u/user_x/** ~
    它會搜尋相同的目錄群，但順序不同。

    注意 ":find"、":sfind" 和 ":tabfind" 命令的補全目前不接受包含 url、使用帶
    深度限定的雙星記號 (/usr/**2) 或向上搜尋 (;) 記號的 'path' 專案。

 vim:tw=78:ts=8:ft=help:norl:
