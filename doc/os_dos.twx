*os_dos.txt*    For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by Bram Moolenaar
		                     譯者: Dasn
		                     http://vimcdoc.sf.net

							*dos* *DOS*
本文描述 MS-DOS 和 Win32 版本共有的特性。你還可以參考
|os_win32.txt| 和 |os_msdos.txt|。

1. 檔案位置			|dos-locations|
2. 使用反斜槓			|dos-backslash|
3. 標準對映			|dos-standard-mappings|
4. 螢幕的輸出與顏色		|dos-colors|
5. 檔案格式			|dos-file-formats|
6. :cd 命令			|dos-:cd|
7. 中止鍵			|dos-CTRL-Break|
8. 臨時檔案			|dos-temp-files|
9. 預設的 Shell 選項		|dos-shell|

==============================================================================
1. 檔案位置						*dos-locations*

只要你把 Vim 的可執行檔案 (vim.exe)、幫助檔案的目錄 (doc) 以及語法檔案的目錄
(syntax) 放到同一個目錄下，Vim 就可以工作了，不需要額外的配置，也不需要修改注
冊表或新增環境變數，只要保證 Vim 目錄包含在路徑中，或者在桌面上做一個快捷方式
也可以。

通常 Vim 資原始檔 ("_vimrc" 和 "_gvimrc") 放在 Vim 執行目錄的上一級目錄。如果
你想把它放在別的地方，可以設定環境變數指向資原始檔所在的目錄，例如: >
	set VIM=C:\user\piet
Vim 會在 "c:\user\piet\" 下尋找資原始檔。
備註: 多使用者計算機需要這種功能，否則還是把 _vimrc 放在原來的地方簡單些。

如果你改變了 vim.exe 的位置，就需要設定一下 $VIM 變數，這樣相應的執行目錄
(runtime directory) 就是 "$VIM/vim{version}"。例如: >
	set VIM=E:\vim
Vim 會在 "e:\vim\vim54" 尋找 5.4 版本執行時需要的檔案。
備註: 強烈建議不要這樣做。最好把可執行檔案和執行時需要的檔案放到同一個目錄裡。

如果你把可執行檔案和資原始檔都移動了，那麼你必須用 $VIM 和 $VIMRUNTIME 兩個環
境變數來分別指定資原始檔 ("_vimrc" 和 "_gvimrc") 和執行目錄的位置。例如: >
	set VIM=C:\usr\piet
	set VIMRUNTIME=E:\vim\vim54
這樣，Vim 可以在 "c:\user\piet\" 目錄下找到資原始檔，在 "E:\vim\vim54" 目錄下
找到執行時所需的檔案。

要想了解更多內容，見 |$VIM| 和 |$VIMRUNTIME|。

在 Windows 95 上，你可以在 C:\autoexec.bat 裡設定 $VIM。例如: >
  set VIM=D:\vim
在 Windows NT 上，你可以在 "控制面板－系統" 或者右鍵單擊 "我的電腦"－"屬性"，
"環境變數" 選項卡里為每一個使用者設定環境變數。

==============================================================================
2.使用反斜槓 						*dos-backslash*

在檔名 (這裡是指帶路徑的檔名 譯者) 裡使用反斜槓 (\) 可能會出問題。在某些命
令裡，VI 要用兩個反斜槓表示反斜槓。Vim 在這一問題上寬容一些，它不會從檔名中
刪除反斜槓，所以直接用 ":e c:\foo\bar" 就可以工作。但是當反斜槓出現在一些特殊
字元 (空格、逗號、反斜槓，等等) 前面時，Vim 就會刪除反斜槓。用斜槓來避免問題:
":e c:/foo/bar"，同樣可以。Vim 會自動把斜槓替換成反斜槓以避免一些 MS-DOS 或
Win32 程式產生問題。

如果你喜歡用斜槓，就設定 'shellslash' 選項。Vim 就會在自動補全檔名的時候，用
斜槓代替反斜槓。這在你使用 UNIX 風格的 'shell' 時，特別有用。

==============================================================================
3. 標準對映					*dos-standard-mappings*

CTRL-PageUp 和 CTRL-PageDown 的原有對映已經被取消了，現在它們的功能是跳轉到下
一個或者前一個標籤頁 |<C-PageUp>| |<C-PageDown>|

如果你想要讓它們移動到螢幕行的首行和末行，這樣對映:

鍵		鍵碼		正常/可視模式       插入模式 ~
CTRL-PageUp	<M-N><M-C-D>	    H		    <C-O>H
CTRL-PageDown	<M-N>v		    L$		    <C-O>L<C-O>$

此外，下面這些鍵用於複製/剪下/貼上。Win32 版本和 DJGPP 版本使用剪貼簿。

Shift-Insert	貼上文字 (從剪貼簿)				*<S-Insert>*
CTRL-Insert	複製選擇的文字 (到剪貼簿)			*<C-Insert>*
CTRL-Del	剪下選擇的文字 (到剪貼簿)			*<C-Del>*
Shift-Del	剪下選擇的文字 (到剪貼簿)			*<S-Del>*
CTRL-X		剪下可視文字 (到剪貼簿)

這些鍵是這樣對映的 (Win32 和 DJGPP 版本):

鍵		鍵碼	     正常	可視	    插入 ~
Shift-Insert	<M-N><M-T>   "*P	"-d"*P      <C-R><C-O>*
CTRL-Insert	<M-N><M-U>		"*y
Shift-Del	<M-N><M-W>		"*d
CTRL-Del	<M-N><M-X>		"*d

或這樣對映 (非 Win32 版本):

鍵		鍵碼	     正常	可視	    插入 ~
Shift-Insert	<M-N><M-T>   P		"-dP	    <C-R><C-O>"
CTRL-Insert	<M-N><M-U>		y
Shift-Del	<M-N><M-W>		d
CTRL-Del	<M-N><M-X>		d
CTRL-X		<C-X>			"*d

如果系統支援剪貼簿，Vim 就會使用 "* 暫存器。

==============================================================================
4. 螢幕的輸出與顏色					*dos-colors*

預設的寫屏操作是直接呼叫 bios 完成的，這在大多數系統上可以工作。你不需要用
ansi.sys。你可以使用 ":mode" 命令設定當前螢幕模式。見 |:mode|。

要想改變 Vim 的顏色，可以使用 |:highlight| 命令。Normal 高亮組 (highlight
group) 決定了 Vim 用什麼顏色顯示普通的文字。例如，要設定灰色字型和藍色背景: >
	:hi Normal ctermbg=Blue ctermfg=grey
要了解其它可用的高亮組，參見 |highlight-groups|。

DOS 控制檯不支援 "粗體"、"下劃線" 之類的屬性。你可以用九個終端選項來設定五種屬
性值的顏色。備註: 因為你可以用 ":highlight" 命令直接設定顏色，這些選項並沒有必
要。它們是為了相容老版本的 Vim 而保留的。|'highlight'| 選項指定每種行為使用五
種模式中的哪一種。九個終端選項如下:
>
	:set t_mr=^V^[\|xxm		反轉模式開始
	:set t_md=^V^[\|xxm		粗體模式開始
	:set t_me=^V^[\|xxm		返回正常文字

	:set t_so=^V^[\|xxm		突出模式開始
	:set t_se=^V^[\|xxm		返回正常文字

	:set t_us=^V^[\|xxm		下劃線模式開始
	:set t_ue=^V^[\|xxm		返回正常文字

	:set t_ZH=^V^[\|xxm		斜體模式開始
	:set t_ZR=^V^[\|xxm		返回正常文字

^V 代表 CTRL-V
^[ 代表 <Esc>

(在輸入上面的命令時，按下 CTRL-V Vim 只會顯示 ^，這時不要輸入 V，直接輸入
<Esc> 即可。譯者)

你必須把上面命令裡的 xx 換成相應的十進位制數，這個數是前景色與背景色相加的和:

顏色			前景色		背景色	~
黑色			0		0
暗藍色			1	   	16
暗綠色			2	   	32
灰綠色		    	3		48
暗紅色			4		64
暗紫紅色		5		80
棕色，暗黃色	    	6		96
亮灰色		    	7		112
暗灰色		    	8		128 *
藍色，天藍色		9		144 *
綠色，淺綠色		10		160 *
青綠色，蘭綠色		11		176 *
紅色，亮紅色		12		192 *
紫紅色，亮紫紅色	13		208 *
黃色，淺黃色		14		224 *
白色			15		240 *

* 在某些顯示模式下，大於 128 的顏色程式碼可能不起作用，並且程式碼 128 會使字型閃
爍。

程式碼 0 表示顏色恢復到起始狀態 (起始狀態的值通常是 7，亮灰色文字，黑色背景，但
你可以修改。如果你在命令列提示上修改了預設的顏色，你可能需要在 vimrc 檔案裡調
整一些高亮的顏色--見下面)。
這就是 't_me' 的初始值。

下面是 Vim 預設高亮模式:
	t_mr	112	 反轉模式: 黑色文字 (0)，亮灰色背景 (112)
	t_md	 15	 粗體模式: 白色文字 (15)，黑色背景 (0)
	t_me	  0	 正常模式: 正常模式 (返回預設狀態)

	t_so	 31	 突出模式: 白色文字 (15)，暗藍色背景 (16)
	t_se	  0	 突出模式結束 (返回預設狀態)

	t_czh	225	 斜體模式: 暗藍色文字 (1)，黃色背景 (224)
	t_czr	  0	 斜體模式結束 (返回預設狀態)

	t_us	 67	 下劃線模式: 灰綠色文字 (3)，暗紅色背景 (64)
	t_ue	  0	 下劃線模式結束 (返回預設狀態)


之所以選擇這些顏色，是因為它們在使用反轉顯示的時候看起來比較舒服，但是你可以改
成你喜歡的顏色。

例如: >
  :set t_mr=^V^[\|97m	" 啟動反轉模式: 暗藍色文字 (1) 棕色背景 (96)
  :set t_md=^V^[\|67m	" 啟動粗體模式: 灰綠色文字 (3) 暗紅色背景 (64)
  :set t_me=^V^[\|112m	" 返回正常模式: 黑色文字 (0) 亮灰色背景 (112)
  :set t_so=^V^[\|37m	" 啟動突出模式: 暗紫紅色文字 (5) 暗綠色背景 (32)
  :set t_se=^V^[\|112m	" 返回正常模式: 黑色文字 (0) 亮灰色背景 (112)

==============================================================================
5. 檔案格式						*dos-file-formats*

如果 'fileformat' 設定為 "dos" (這是預設設定)，Vim 把 <NL> 或 <CR><NL> 當作行
尾符 (<EOL>)。寫入檔案的時候，Vim 使用 <CR><NL>。這樣，如果你編輯一個檔案並且
儲存了，那麼 Vim 會把所有的 <NL> 替換成 <CR><NL>。

如果 'fileformat' 設定為 "unix"，Vim 則使用一個 <NL> 作為 <EOL>，並且把 <CR>
顯示為 ^M。

你可以用 Vim 把 <NL> 替換成 <CR><NL>: 在任何模式下讀，儲存成 Dos 格式
(":set ff=dos")。

你可以用 Vim 把 <CR><NL> 替換成 <NL>: 在 Dos 模式下讀，儲存成 Unix 格式
(":set ff=unix")。

如果 'fileformats' 非空 (這是預設值)，Vim 會自動設定 'fileformat' 的值，因此你
沒有必要擔心自己究竟在做什麼。
					|'fileformat'| |'fileformats'|

如果你要編輯一個指令碼檔案或者一個二進位制檔案，那麼你應該在裝載這個檔案之前預先設
定 'binary' 選項。指令碼和二進位制檔案可能包含 <NL>，Vim 要把它替換成 <CR><NL>。你
可以在啟動時加上 "-b" 引數，這樣可以自動置位 'binary' 選項。

==============================================================================
6. :cd 命令						*dos-:cd*

":cd" 命令能識別驅動器符號，並且可以改變當前的驅動器。命令 ":cd c:" 使驅動器 C
成為當前驅動器。命令 ":cd d:\foo"，切換當前目錄到 "D 盤的 foo 目錄下"。Vim 也
能識別 UNC 路徑。例如: ":cd \\server\share\dir"。  |:cd|

==============================================================================
7. 中止鍵						*dos-CTRL-Break*

用 CTRL-Break 來代替 CTRL-C 中止查詢操作。Vim 只有在接受輸入時才能檢測到
CTRL-C。

==============================================================================
8. 臨時檔案						*dos-temp-files*

對於 16 位和 32 位的 DOS 版本:
Vim 把臨時檔案 (用於過濾) 存放於下列目錄中 (按順序查詢下列目錄，一旦發現該目錄
存在並且可以建立檔案，就用它存放臨時檔案):
	$TMP
	$TEMP
	C:\TMP
	C:\TEMP
	當前目錄

對於 Win32 版本 (控制檯和 GUI):
Vim 用標準的 Windows API 函式來獲取臨時檔名 (用於過濾)。按順序查詢下列目錄，
一旦發現該目錄存在並且可以建立檔案，就用它存放臨時檔案:
	$TMP
	$TEMP
	當前目錄

==============================================================================
9. 預設的 Shell 選項					*dos-shell*

在 Windows 95 上，預設的 'sh' ( 'shell' ) 選項是 "command.com"，而在 Windows
NT 上是 "cmd.exe"。如果設定了環境變數 SHELL，Vim 就使用 SHELL 指定的程式，如果
沒有設定 SHELL，而設定了環境變數 COMSPEC，Vim 就使用 COMSPEC。Vim 用
"<shell> /c <command_name>" 執行外部命令。輸入 CTRL-Z 呼叫一個子 Shell。要返回
Vim 輸入 "exit"。	|'shell'| |CTRL-Z|

如果你執行一個第三方的 shell，你可能需要自己設定一下 |'shellcmdflag'| ('shcf')
和 |'shellquote'| ('shq') 或者 |'shellxquote'| ('sxq') 選項。不幸的是，這些選
項依賴於你所使用的 Vim 的版本。例如，要用 MKS Korn shell 或 bash，這些屬性的值
應該設定成:

		DOS 16 位	    DOS 32 位		Win32  ~
'shellcmdflag'	   -c			-c		 -c
'shellquote'	   "
'shellxquote'						 "

16 位的 Dos 版本這樣啟動 shell:
	<shell> -c "命令" >file
Win32 版本:
	<shell> -c "命令 >file"
32 位 DOS 版本，DJGPP 在內部執行。

Vim 啟動的時候檢查 'shell' 選項的值是否能匹配 "sh" 子串 (在任何位置)。如果是，
Vim 就按照上面的描述設定 'shellcmdflag' 和 'shellquote' 或 'shellxquote' 選
項。

 vim:tw=78:ts=8:ft=help:norl:
