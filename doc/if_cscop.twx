*if_cscop.txt*  For Vim version 8.0.  最近更新: 2017年7月


		  VIM 參考手冊    by Andy Kahn
		譯者: lang2，tocer http://vimcdoc.sf.net

							*cscope* *Cscope*
本文件闡述如何使用 Vim 的 cscope 介面。

Cscope 是一個類似 ctags 的工具。 你可以把它想作是超過頻的 ctags，因為它功能比
ctags 強大很多。 在 Vim 裡，通過 cscope 查詢結果來跳轉就象跳轉到其他的標籤完全
一樣；它被儲存在標籤棧裡。這樣你就可以象使用 |tags| 一樣在函式等等之間便捷的跳
轉。

1. Cscope 簡介			|cscope-intro|
2. Cscope 相關命令		|cscope-commands|
3. Cscope 選項			|cscope-options|
4. 如何在 Vim 中使用 cscope	|cscope-howtouse|
5. 缺陷				|cscope-limitations|
6. 建議的使用方法		|cscope-suggestions|
7. 如何獲取 cscope 等資訊	|cscope-info|

目前為止 cscope 介面僅在 Unix 及 Win32 平臺上有效。
{Vi 無此功能}

==============================================================================
1. Cscope 簡介						*cscope-intro*

下面文字摘自 cscope 的手冊頁:

				    -----

  Cscope 是一個互動式的螢幕下使用的工具，用來幫助你:

       無須在厚厚的程式清單中翻來翻去就可以認識一個 C 程式的工作原理。

       無須熟悉整個程式就可以知道清楚程式 bug 所要修改的程式碼位置。

       檢查提議的改動 (如新增一個列舉值) 可能會產生的效果。

       驗證所有的原始檔都已經作了需要的修改；例如給某一個現存的函式新增一個參
       數。

       在所有相關的原始檔中對一個全域性變數改名。

       在所有相關的位置將一個常數改為一個預處理符號。

  它被設計用來回答以下的問題:
       什麼地方用到了這個符號？
       這是在什麼地方定義的？
       這個變數在哪裡被賦值？
       這個全域性符號的定義在哪裡？
       這個函式在原始檔中的哪個地方？
       哪些函式呼叫了這個函式？
       這個函式呼叫了哪些函式？
       資訊 "out of space" 從哪來？
       這個原始檔在整個目錄結構中處於什麼位置？
       哪些檔案包含這個標頭檔案？

  Cscope 在第一次被使用在指定的原始檔時會建立一個符號的資料庫。接下來呼叫時，
  cscope 僅僅重建那些被改動或者和新檔案相關的資料庫。那些沒有被改動的檔案相關
  的資料庫會被直接複製使用。這使得重建資料庫要比第一次執行快許多。

				    -----

當 cscope 正常呼叫時，你會得到一個全螢幕的選擇視窗。你可以針對以上問題輸入一個
查詢。然而，一旦找到一個匹配而你進入了一個文字編輯器來檢視和編輯包含匹配的源文
件時，你無法像在 vi 中使用 Ctrl-] 或 :tag 命令那樣方便地跳轉。

Vim 的 cscope 介面的工作原理是: 先呼叫 cscope 的命令列介面，然後分析其輸出結果
從而找到匹配處。最終結果是: cscope 查詢結果就象一般的標籤一樣。你可以使用一般
的標籤命令 (Ctrl-］ 或 :tag) 然後再用 Ctrl-T 回跳。 (注意 不過，其實你不能直接
使用 Ctrl-] 或 :tag 跳轉到標籤。在那之前你必須重新定義對映或設定一些選項值。下
面的幾節會告訴你 cscope 介面如何工作，以及建議的使用方式。)


==============================================================================
2. Cscope 相關命令					*cscope-commands*

		*:cscope* *:cs* *:scs* *:scscope* *E259* *E262* *E561* *E560*
所有命令都是通過主命令 ":cscope" 的子項完成的。主命令最短的縮寫是 ":cs"。
":scscope" 完成同樣的功能的同時還可以分割視窗 (縮寫: "scs")。

可用的子命令有:

			*E563* *E564* *E566* *E568* *E622* *E623* *E625*
			*E626* *E609*
    add   : 新增一個新的 cscope 資料庫／連線。

	用法	:cs add {file|dir} [pre-path] [flags]

	    [pre-path] 用來通知 cscope 使用 -P [pre-path] 選項。

	    [flags] 可以用來給 cscope 傳遞額外的選項。

	例子 >
	    :cscope add /usr/local/cdb/cscope.out
	    :cscope add /projects/vim/cscope.out /usr/local/vim
	    :cscope add cscope.out /usr/local/vim -C
<
				      *cscope-find* *cs-find* *E567*
    find  : 查詢 cscope。除了第 5 個之外的所有 cscope 查詢功能都可以使用。
    	    第 5 個是 "Change this grep pattern"。

	用法	:cs find {querytype} {name}

	    {querytype} 對應 cscope 控制檯介面編號和 nvi 的預設命令:

		0 或 s: 查詢本 C 符號
		1 或 g: 查詢本定義
		2 或 d: 查詢本函式呼叫的函式
		3 或 c: 查詢呼叫本函式的函式
		4 或 t: 查詢本字串
		6 或 e: 查詢本 egrep 模式
		7 或 f: 查詢本檔案
		8 或 i: 查詢包含本檔案的檔案
		9 or a: 查詢此符號被賦值的位置

	除了 4 和 6 之外的型別忽略 {name} 之前的空格。4 和 6 在 {querytype} 和
	{name} 之間只能有一個空格分隔。多餘的空格是 {name} 的一部分。

	例如 >
	    :cscope find c vim_free
	    :cscope find 3  vim_free
<
	    這兩個例子執行同樣的查詢: 名為 "vim_free" 的函式。 >

	    :cscope find t initOnce
	    :cscope find t  initOnce
<
	    前者查詢文字 "initOnce"，後者查詢 " initOnce"。 >

	    :cscope find 0 DEFAULT_TERM
<
	    在 Vim 5.1 的原始碼內執行以上的命令得到以下的結果:

	    Cscope tag: DEFAULT_TERM
	       #   line  filename / context / line
	       1   1009  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"amiga"
	       2   1013  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"win32"
	       3   1017  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"pcterm"
	       4   1021  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"ansi"
	       5   1025  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"vt52"
	       6   1029  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"os2ansi"
	       7   1033  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"ansi"
	       8   1037  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 # undef DEFAULT_TERM
	       9   1038  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"beos-ansi"
	      10   1042  vim-5.1-gtk/src/term.c <<GLOBAL>>
			 #define DEFAULT_TERM (char_u *)"mac-ansi"
	      11   1335  vim-5.1-gtk/src/term.c <<set_termname>>
			 term = DEFAULT_TERM;
	      12   1459  vim-5.1-gtk/src/term.c <<set_termname>>
			 if (STRCMP(term, DEFAULT_TERM))
	      13   1826  vim-5.1-gtk/src/term.c <<termcapinit>>
			 term = DEFAULT_TERM;
	      14   1833  vim-5.1-gtk/src/term.c <<termcapinit>>
			 term = DEFAULT_TERM;
	      15   3635  vim-5.1-gtk/src/term.c <<update_tcap>>
			 p = find_builtin_term(DEFAULT_TERM);
	    Enter nr of choice (<CR> to abort):

	    這樣的輸出顯示了幾類資訊:
	    1. 標籤號碼 (例子中有 15 個)。
	    2. 標籤所在的行號。
	    3. 標籤所在檔案的檔名。
	    4. 標籤的上下文 (如: 全域性或函式名)。
	    5. 標籤所在行的文字。

    help  : 顯示一個簡單的幫助。

	    用法    :cs help

							*E261*
    kill  : 終止一個 cscope 連線 (或終止所有 cscope 連線)。

	    用法   :cs kill {num|partial_name}

	    要終止一個連線，需要給出連線號或者部分的連線名稱。部分名稱可以
	    是資料庫檔案路徑的任何一部分。所以要當心使用這個功能！

	    如果給定的連線號是 -1，那麼 所 有 的 cscope 連線都會被終止。

    reset : 重新初始化所有連線。

	    用法    :cs reset

    show  : 顯示當前的連線。

	    用法    :cs show

							*:lcscope* *:lcs*
此命令和 ":cscope" 命令相同，除了在置位選項 'cscopequickfix' 的時候，使用當前
視窗的位置列表而不是 quickfix 列表來顯示 cscope 的結果。

							*:cstag* *E257* *E562*
如果你同時使用 cscope 和 ctags，|:cstag| 允許你在跳轉前對兩者都進行查詢。例
如，你可以選擇先查詢 cscope 資料庫，如果無法找到匹配，再查詢標籤檔案。這種做法
的次序可以通過 |csto| 的值來調整。參見 |cscope-options|。

|:cstag| 在搜尋 cscope 資料庫時執行和 ":cs find g" 加上識別符號一樣的操作。

|:cstag| 在搜尋標籤檔案時執行和 |:tjump| 加上識別符號一樣的操作。


==============================================================================
3. Cscope 選項						*cscope-options*

所有 cscope 有關的選項都可以用 |:set| 命令來設定。比較理想的做法是將這些設定添
加到你的啟動檔案中 (如: .vimrc)。某些 cscope 選項僅僅在 |.vimrc| 檔案內才有
效。在 vim 啟動之後再設定它們的值沒有任何效果！

							*cscopeprg* *csprg*
'cscopeprg' 指定用來執行 cscope 的命令。預設值是 "cscope"。例如: >
	:set csprg=/usr/local/bin/cscope
<
					    *cscopequickfix* *csqf* *E469*
{僅當編譯時加入 |+quickfix| 特性才有效}
'cscopequickfix' 設定是否使用 quickfix 視窗來顯示 cscope 結果。這是一組用逗號
分隔的值。每個值可以代表一個 |cscope-find| 命令 (s、g、d、c、t、e、f、i 或 a)
加一個標誌位 (+、- 或 0)。
'+' 表示結果必須被新增到 quickfix 視窗中。'-' 表示清除上次的結果，'0' 或命令本
身不存在表示不使用 quickfix。搜尋從字串首開始直到命令第一次出現時結束。預設
值是 "" (不使用 quickfix 視窗)。下面是個可能有用的值: >
	:set cscopequickfix=s-,c-,d-,i-,t-,e-,a-
<
							*cscopetag* *cst*
若置位了 'cscopetag' 選項，":tag" 命令，CTRL-] 以及 "vim -t" 都會使用 |:cstag|
而不是預設的 :tag。也就是說，設定 'cst' 選項意味著你總同時搜尋 cscope 資料庫和
標籤檔案。預設值為關。例如: >
	:set cst
	:set nocst
<
							*cscoperelative* *csre*
若置位了 'cscoperelative'，而沒有給 cscope 提供字首 (即 cscope 的 -P 選項參
數)，cscope.out 所在位置的目錄名 (通常是專案的根目錄) 用作字首來構造絕對路徑。
預設關閉此功能。注意: 此選項僅當 cscope (cscopeprg) 啟動時沒有字首路徑 (-P) 時
才適用。示例: >
	:set csre
	:set nocsre
<
							*cscopetagorder* *csto*
'csto' 的值決定 |:cstag| 命令查詢的次序。如果 'csto' 被設為 0，cscope 資料庫先
被搜尋，搜尋失敗的情況下在搜尋標籤檔案。如果 'csto' 被設為 1，標籤檔案會在
cscope 資料庫之前被搜尋。預設值為 0。
例: >
	:set csto=0
	:set csto=1
<
						*cscopeverbose* *csverb*
如果 'cscopeverbose' 沒有被設定 (預設情況)，當新增一個數據庫時，成功與否不會被
顯示。理想的情況是，你先在 |.vimrc| 檔案中復位該選項，再新增 cscope 資料庫，然
後再置位。這樣，如果你在使用 vim 當中動態新增資料庫，你就會被 vim 告知結果。例
如: >
	:set csverb
	:set nocsverb
<
						      *cscopepathcomp* *cspc*
'cspc' 的值決定顯示檔案路徑的多少部分。在預設值 0 的情況下整個路徑都會被顯示。
1 只顯示檔名，而不顯示路徑名。其它值會顯示該值表示數目的部分。例如: >
	:set cspc=3
會顯示檔案路徑的最後 3 個部分，包括檔名本身。

==============================================================================
4. 如何在 Vim 中使用 cscope				*cscope-howtouse*

首先你要做的是為你的原始檔建立一個 cscope 資料庫。最簡單的做法是使用
"cscope -b" 命令。更詳細的說明請查閱 cscope 的手冊頁。

假定你已經建立了一個 cscope 資料庫，你需要將其新增 "add" 到 Vim 中來。這會建立
一個 cscope "連線" 給 Vim 來使用。你可以把這些加入到你的 .vimrc 檔案裡。也可以
在 vim 啟動之後手動完成。例如，要新增一個 cscope 資料庫 "cscope.out"，你可以這
樣做: >

	:cs add cscope.out
<

你可以用 ":cs show" 命令來檢查一下結果。該命令會產生類似下面的結果: >

 # pid	  database name			      prepend path
 0 28806  cscope.out			      <none>
<
備註:
因為 Microsoft RTL 的缺陷，Win32 版本只能顯示 0 而不是真正的程序 ID。

一旦建立了 cscope 連線，你就可以做各種查詢並得到結果。查詢所用的命令是
":cs find"。例如: >

	:cs find g ALIGN_SIZE
<
這樣要做很多的打字工作，所以有些麻煩。幸運的是，我們可以通過定義快捷鍵來避免過
多的輸入。參考 |cscope-suggestions| 可以得到一些使用的建議。

如果匹配結果只有一個，你會被自動帶到該處。如果匹配結果多於一個，Vim 會顯示一個
選擇螢幕讓你來選擇一處匹配。在你跳轉到新的位置後，簡單地用 Ctrl-T 就可以跳回原
處。


==============================================================================
5. 缺陷							*cscope-limitations*

Vim 對 cscope 的支援僅當所在系統支援以下四個系統呼叫時才可用: fork()，
pipe()，execl()，waitpid()。這意味著它基本上僅限於 Unix 系統。

另外 cscope 支援在 Win32 也可以使用。更多的資訊以及一個 Win32 版本的 cscope 可
以在這裡找到:

	http://iamphet.nm.ru/cscope/index.html

http://cscope.sourceforge.net 的 DJGPP 編譯版本已知不能和 Vim 一起工作。

硬性的限制: 在用 |:cstag| 搜尋標籤檔案時要執行 |:tjump|，這一點是無法配置的 (
如: 你不能選擇使用 tselect)。

==============================================================================
6. 建議的使用方法					*cscope-suggestions*

將下面的設定加入到你的 .vimrc 裡 (根據你的情況調整檔案路徑): >

	if has("cscope")
		set csprg=/usr/local/bin/cscope
		set csto=0
		set cst
		set nocsverb
		" add any database in current directory
		if filereadable("cscope.out")
		    cs add cscope.out
		" else add database pointed to by environment
		elseif $CSCOPE_DB != ""
		    cs add $CSCOPE_DB
		endif
		set csverb
	endif

我們設定了 'cscopetag'，這樣所有的 :tag 命令就會實際上呼叫 :cstag。這包括
:tag、Ctrl-] 及 "vim -t"。結果是一般的 tag 命令不僅搜尋由 ctags 產生的標籤文
件，同時也搜尋 cscope 資料庫。

有些使用者也許向保留原來的標籤命令，而用另外一個快捷鍵來執行 :cstag 命令。例如，
你可以用下面的命令將 Ctrl-_ (下劃線) 對映到 :cstag: >

	map <C-_> :cstag <C-R>=expand("<cword>")<CR><CR>

常用的 cscope 查詢 (用 ":cs find") 包括尋找所有呼叫指定函式的函式以及尋找所有
出現某個指定的 C 符號的地方。你可以參照以下的對映: >

	map g<C-]> :cs find 3 <C-R>=expand("<cword>")<CR><CR>
	map g<C-\> :cs find 0 <C-R>=expand("<cword>")<CR><CR>

這些對 Ctrl-] (右方括號) 和 Ctrl-\ (反斜槓) 的對映使你可以將游標移動到你想作查
詢的函式或 C 符號，然後快速地查詢 cscope 資料庫。

或者，你也可以使用下面的方式。這些對映借鑑了 Cscope 主頁
(http://cscope.sourceforge.net/) 上的 Vim/Cscope 教程: >

	nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>

	" Using 'CTRL-spacebar' then a search type makes the vim window
	" split horizontally, with search result displayed in
	" the new window.

	nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space>a :scs find a <C-R>=expand("<cword>")<CR><CR>

	" Hitting CTRL-space *twice* before the search type does a vertical
	" split instead of a horizontal one

	nmap <C-Space><C-Space>s
		\:vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>g
		\:vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>c
		\:vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>t
		\:vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>e
		\:vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>i
		\:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-Space><C-Space>d
		\:vert scs find d <C-R>=expand("<cword>")<CR><CR>
	nmap <C-Space><C-Space>a
		\:vert scs find a <C-R>=expand("<cword>")<CR><CR>

==============================================================================
7. 如何獲取 Cscope 等資訊				*cscope-info*

如果你還沒有 cscope (你的編譯器或 OS 釋出不包括 cscope)，你可以從下面的地址免
費下載:
	http://cscope.sourceforge.net/
這是 SCO 以 BSD 許可釋出的。

如果你想要更新的版本，你可以購買它。根據 (舊的) nvi 文件:

	你可以用 $400 從 AT&T Software Solutions 購買無限制的許可的原始碼。致電
	+1-800-462-8146。

你還可以從 World-Wide Exptools Open Sourcean 的網頁下載 cscope 13.x 及
mlcscope 14.x (多語言 cscope，支援 C、C++、Java、lex、yacc、breakpoint
listing、Ingres 及 SDL)。網址如下:
	http://www.bell-labs.com/project/wwexptools/packages.html

在 Solaris 2.x 上，如果你有 C 編譯器的許可，你也就有 cscope。兩者通常位於
/opt/SUNWspro/bin。

SGI 開發者也可以得到 cscope。在以下的地址搜尋 cscope:
	http://freeware.sgi.com/index-by-alpha.html
	https://toolbox.sgi.com/toolbox/utilities/cscope/
第二個地址僅對那些擁有 SGI toolbox 密碼的使用者有效。

網上還有一箇舊版本的 cscope 的克隆 (叫 "cs") 。出於各種原因，Vim 不支援該程
序。

Vim cscope 介面/支援的原作者是 Andy Kahn <ackahn@netapp.com>。原始的結構 (包括
很少一部分程式碼) 來自 nvi 的 cscope 介面。如果你在使用 Vim cscope 介面時有任何
問題，建議，patches 等等，請與他聯絡。
							*cscope-win32*
這裡可以找到一個 Win32 版本的 cscope:
	http://code.google.com/p/cscope-win32/

Win32 支援是 Sergey Khorev <sergey.khorev@gmail.com> 加入的。如果你有 Win32 相
關的問題，請聯絡他。

 vim:tw=78:ts=8:ft=help:norl:
