*remote.txt*    For Vim version 8.0.  最近更新: 2017年8月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis，tocer
				http://vimcdoc.sf.net


Vim 客戶-伺服器 通訊					*client-server*

1. 通用功能			|clientserver|
2. X11 專用條目			|x11-clientserver|
3. MS-Windows 專用條目		|w32-clientserver|

{Vi 沒有任何這裡的功能}

==============================================================================
1. 通用功能						*clientserver*

如果編譯時加入 |+clientserver| 特性，Vim 可以作為命令伺服器，接受客戶的訊息並
執行。同時，Vim 也可以作為客戶端，傳送訊息給 Vim 伺服器。

可以使用以下的命令列引數:

     引數			意義	~

   --remote [+{cmd}] {file} ...					*--remote*
				在遠端開啟檔案列表。如果沒有 Vim 伺服器，就在
				本地執行。
				有一個可選的初始命令: #{cmd}，它必須是後面可以
				跟 "|" 的 Ex 命令。
				命令列的其餘部分將作為檔案列表。所以，非檔案
				的引數一定要在此之前出現。
				你不能用這個方法編輯標準輸入 |--|。
				遠端的 Vim 將被推向前臺。如果不想如此，用 >
				 vim --remote-send "<C-\><C-N>:n filename<CR>"
<
   --remote-silent [+{cmd}] {file} ...			*--remote-silent*
				同上，但如果伺服器沒開啟而需要本地編輯，不產生
				警告。
   --remote-wait [+{cmd}] {file} ...				*--remote-wait*
				同 --remote，但直到所有的檔案在遠端被完成 (卸
				載) 為止才返回。
   --remote-wait-silent [+{cmd}] {file} ...		*--remote-wait-silent*
				同 --remote-wait，但如果伺服器沒開啟，不產生警
				告。
							*--remote-tab*
   --remote-tab			同 --remote 但用新標籤頁開啟每個檔案。
							*--remote-tab-silent*
   --remote-tab-silent		同 --remote-silent 但用新標籤頁開啟每個檔案。
							*--remote-tab-wait*
   --remote-tab-wait		同 --remote-wait 但用新標籤頁開啟每個檔案。

    						*--remote-tab-wait-silent*
   --remote-tab-wait-silent	同 --remote-wait-silent 但用新標籤頁開啟每個文
   				件。
								*--servername*
   --servername {name}		成為用 {name} 作為名字的伺服器。如果同時也用了
				某個 --remote 命令，連線到伺服器 {name}，而不
				使用預設的名字。 (見下)。
								*--remote-send*
   --remote-send {keys}		傳送鍵序列 {keys} 到伺服器，然後退出。{keys}
   				不通過對映。能識別特殊的鍵名，如 "<CR>" 會生成
				CR 字元。
								*--remote-expr*
   --remote-expr {expr}		在伺服器上執行 {expr}。然後在標準輸出上打出結
				果。
								*--serverlist*
   --serverlist			輸出可用的伺服器名字的列表。


示例 ~

在一個已經執行的 GVIM 伺服器上編輯 "file.txt"。 >
    gvim --remote file.txt

在一個已經執行的名為 FOOBAR 的伺服器上編輯 "file.txt"。 >
    gvim --servername FOOBAR --remote file.txt

在名為 "FILES" 的伺服器上編輯 "file.txt"，如果不存在這個伺服器，自己成為伺服器
"FILES"。 >
    gvim --servername FILES --remote-silent file.txt

下面的例子不能工作。--remote 之後所有的引數都被視作檔名: >
    gvim --remote --servername FOOBAR file.txt

在遠端伺服器上編輯檔案 "+foo" (注意 "./" 的使用避免了打頭的加號的特別含義)。 >
    vim --remote ./+foo

告訴遠端伺服器 "BLA" 寫入所有檔案，並且退出。 >
    vim --servername BLA --remote-send '<C-\><C-N>:wqa<CR>'


服 務 器 名

預設地，Vim 試圖用啟動時的名字註冊伺服器名 (gvim、egvim ...)，你可以用
--servername 引數覆蓋之。如果不能用指定的名字，嘗試附加一個字尾，直到找到一個
空閒的名字為止。比如，在同一個 X 伺服器上，第二次啟動 gvim 的伺服器名會是
"gvim1"。可以通過 |v:servername| 得到最終的伺服器名。這裡忽略大小寫的區別，所
以 "gvim" 和 "GVIM" 重複。

當 Vim 啟動時帶有 --remote、--remote-wait 或者 --remote-send 引數時，會根據上
述的方法由啟動名和指定的 --servername 引數決定要訪問的伺服器名。如果準確的匹
配找不到，尋找第一個可以帶數字字尾的伺服器。不過，如果 --servername 給出的名字
已經帶有數字字尾，必須準確匹配。

如果使用 --remote 和 --remote-wait 但沒有可用的伺服器，Vim 會根據剩餘的引數啟
動，自己編輯這些檔案。這樣，傳送命令給 gvim 的時候，就不需要關心它是否已經啟
動。

--serverlist 引數讓 Vim 在標準輸出 (stdout) 上打出所有已經註冊的命令伺服器，然
後退出。

Win32 注意事項: 不一定總能把 Vim 伺服器切換到在前臺，因為 MS-Windows 不允許這
麼做。客戶通過 --remote 和 --remote-wait 引數呼叫而伺服器名以 "g" 開始的時候，
伺服器將被推向前臺。


遠 程 編 輯

用上面的結果，--remote 引數隨後基於其後的引數構造一個 |:drop| 命令併發送之。
--remote-wait 也會這麼做，但同時等待所有檔案編輯任務的完成。這是通過 BufUnload
事件完成的。檔案解除安裝時，Vim 假設你完成了它的編輯任務。
注意: --remote 和 --remote-list 引數會吃掉命令列餘下的部分。也就是說，餘下的參
數都被認為是檔名，不要把引數放在那裡！

函 數
								*E240* *E573*
若干 Vim 的函式可以用來書寫命令伺服器的指令碼。參見 |eval.txt| 的描述，也可以在
下面的函式名字上按 CTRL-] 以得到它們完整的描述。

    摘要				     解釋 ~
    remote_startserver( name)		     執行伺服器
    remote_expr( server, string, idvar)      傳送表示式
    remote_send( server, string, idvar)      傳送鍵序列
    serverlist()			     得到可用伺服器的列表
    remote_peek( serverid, retvar)	     檢查返回的字串
    remote_read( serverid)		     讀取返回的字串
    server2client( serverid, string)	     傳送返回字串
    remote_foreground( server)		     把伺服器推向前臺

也可參考 |CTRL-\_CTRL-N|，它可用來引導鍵序列。
server2client() 的 {serverid} 可以通過 expand("<client>") 得到。

==============================================================================
2. X11 專用條目						*x11-clientserver*
				    *E247* *E248* *E251* *E258* *E277*

客戶和伺服器的通訊是通過 X 伺服器進行的。必須指明 Vim 伺服器所處的 DISPLAY 位
置。通常的 X 伺服器的保護措施這裡也適用，你必須有許可權在 X 伺服器上開啟一個窗
口，這樣不同系統間的通訊才有可能。

預設地，GUI 的 Vim 會在 X 伺服器上註冊一個名字，使得後續的執行能通過這個名字尋
址並向它傳送字串。Vim 也可以作為一個客戶端，給同一個 X11 顯示上的其它 Vim 實
例傳送字串。

X11 GUI 的 Vim (gvim) 啟動時，會試圖在根視窗的 'VimRegistry' 屬性上註冊傳送服
務器的名字。

非 GUI 但可以訪問到 X11 顯示的 Vim (打開了 |xterm-clipboard|) 也可以作為命令服
務器，只要伺服器名通過 --servername 引數明確給出就行了。

空的 --servername 引數關閉命令伺服器。

要從別的應用程式向 Vim 伺服器傳送命令，可以閱讀原始碼 src/if_xcmdsrv.c。那裡包
含了 Vim 使用的協議的一些情況。

==============================================================================
3. Win32 專用條目					*w32-clientserver*

每個 Win32 的 Vim 都可以作為伺服器，包括控制檯版本。你不需要編譯時帶 OLE 的版
本。我們使用 Windows 訊息，它適用於任何版本的 MS-Windows。不過，它只允許在同一
個機器上進行通訊。

因為我們使用 MS-Windows 的訊息，別的應用程式也可以和 Vim 伺服器通訊。一個替代
方案是用 OLE 功能 |ole-interface|。

如果用 gvim，--remote-wait 正確的使用方法只能是: >

	start /w gvim --remote-wait file.txt
<
 vim:tw=78:sw=4:ts=8:ft=help:norl:
