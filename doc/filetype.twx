*filetype.txt*  For Vim version 8.0.  最近更新: 2017年7月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis, tocer
				http://vimcdoc.sf.net


檔案型別						*filetype* *file-type*

1. 檔案型別					|filetypes|
2. 檔案型別外掛					|filetype-plugins|
3. 預設檔案型別外掛的文件			|ftplugin-docs|

另見 |autocmd.txt|。

{Vi 沒有這些命令}

==============================================================================
1. 檔案型別					*filetypes* *file-types*

Vim 可以檢測要編輯的檔案型別。這是通過檢查檔名完成的，有的時候也檢查文本里是
否包含特定的文字。

							*:filetype* *:filet*
要開啟檔案型別的檢測，在你的 vimrc 里加入以下命令: >
	:filetype on
每次一個新的或者已經存在的檔案被編輯時，Vim 會試圖識別檔案的型別，並設定
'filetype' 選項。同時，也觸發 FileType 事件。該事件可以設定語法高亮，特定選
項，等等。

注意: 檔案型別和 'compatibile' 不能很好的一起工作。因為 Vi 相容意味著所有的選
項都是全域性的。如果你還那麼做，建議復位 'compatible' 選項。

詳情: ":filetype on" 命令會載入以下檔案中的一個:
		Amiga	    $VIMRUNTIME/filetype.vim
		Mac	    $VIMRUNTIME:filetype.vim
		MS-DOS	    $VIMRUNTIME\filetype.vim
		RiscOS	    Vim:Filetype
		Unix	    $VIMRUNTIME/filetype.vim
		VMS	    $VIMRUNTIME/filetype.vim
	該檔案是一個 Vim 指令碼，其中定義了 BufNewFile 和 BufRead 事件的自動命
	令。如果根據檔名不能檢測到檔案型別，則使用 $VIMRUNTIME/scripts.vim
	來根據檔案內容檢測之。
	正在或即將啟動 GUI 時，同時也會執行 menu.vim 指令碼。如果不想要，參見
	|'go-M'|。

要加入你自己的檔案型別，見下面的 |new-filetype|。要查詢一種檔案型別的幫助，加
上 "ft-" 字首和可選的 "-syntax"、"-indent" 或者 "-plugin" 字尾。例如: >
	:help ft-vim-indent
	:help ft-vim-syntax
	:help ft-man-plugin

如果檔案型別沒有被自動識別，或者找到的是錯誤的型別，你可以手動設定 'filetype'
選項，或者在檔案里加入模式行。例如，對於 IDL 檔案，可以使用 >
	:set filetype=idl

或者在檔案中加入模式行 |modeline|:
	/* vim: set filetype=idl : */ ~

						*:filetype-plugin-on*
你可以為特定的檔案型別允許外掛檔案的載入: >
	:filetype plugin on
如果檔案型別檢測以前尚未開啟，載入該檔案後就被打開了。該命令實際上載入了
'runtimepath' 裡的 "ftplugin.vim" 檔案。其結果是，在檔案編輯時，相應的外掛檔案
也會載入 (如果檔案型別能檢測到)。|filetype-plugin|

						*:filetype-plugin-off*
你可以如此關閉之: >
	:filetype plugin off
檔案型別檢測此時沒有關閉。但如果你關閉了，相應的外掛就不會被自動載入。該命令實
際上載入了 'runtimepath' 裡的 "ftplugof.vim" 檔案。

						*:filetype-indent-on*
你可以為特定的檔案型別載入縮排檔案: >
	:filetype indent on
如果檔案型別檢測以前尚未開啟，載入該檔案後就被打開了。該命令實際上載入了
'runtimepath' 裡的 "indent.vim" 檔案。其結果是，在檔案編輯時，相應的縮排檔案
也會載入 (如果檔案型別能檢測到)。|indent-expression|

						*:filetype-indent-off*
你可以如此關閉之: >
	:filetype indent off
檔案型別檢測此時沒有關閉。但如果你關閉了，相應的縮排檔案就不會被自動載入。該命
令實際上載入了 'runtimepath' 裡的 "indoff.vim" 檔案。
這會關閉你後面所開啟的檔案中的自動縮排。在已經開啟的檔案中，自動縮排還依然有
效。要在已開啟的檔案中關閉縮排，復位 'autoindent'、'cindent'、'smartindent'
和/或 'indentexpr'。

						*:filetype-off*
要關閉檔案型別檢測，使用如下命令: >
	:filetype off
"plugin" 和 "indent" 的標誌位還會保持，但是因為沒有檔案型別被檢測到，直到下次
":filetype on" 為止，它們不會真的工作。


總覽:						*:filetype-overview*

命令				檢測	plugin	indent ~
:filetype on			開啟	未改變	未改變
:filetype off			關閉	未改變	未改變
:filetype plugin on		開啟	開啟	未改變
:filetype plugin off		未改變	關閉	未改變
:filetype indent on		開啟	未改變	開啟
:filetype indent off		未改變	未改變	關閉
:filetype plugin indent on	開啟	開啟	開啟
:filetype plugin indent off	未改變	關閉	關閉

要檢視當前的狀態，只需輸入: >
	:filetype
輸出結果看起來大概如此: >
	filetype detection:ON  plugin:ON  indent:OFF

檔案型別也用於語法高亮。如果使用 ":syntax on" 命令，檔案型別檢測也被安裝。所
以，沒有必要在 ":syntax on" 之後再執行 ":filetype on"。

要關閉某種檔案型別，在你的檔案型別檔案里加入一行。見 |remove-filetype|。

							*filetype-detect*
要再次檢測檔案型別: >
	:filetype detect
使用這個命令可以使你先編輯一個空白檔案，任何輸入足夠的文字，使得檔案型別能夠被
識別。例如，你以此開始輸入一個新的外殼指令碼: "#!/bin/csh"。
   如果檔案型別檢測被關閉，它會先被開啟。就像用了 "on" 引數那樣。

							*filetype-overrule*
如果兩個不同的檔案型別使用了相同的副檔名，Vim 試圖猜測到底該檔案屬於哪個型別。
這並不總行。一些全域性變數可以用來為某些特定的副檔名決定具體的檔案型別:

	檔名		變數 ~
	*.asa		g:filetype_asa	|ft-aspvbs-syntax| |ft-aspperl-syntax|
	*.asp		g:filetype_asp	|ft-aspvbs-syntax| |ft-aspperl-syntax|
	*.asm		g:asmsyntax	|ft-asm-syntax|
	*.prg		g:filetype_prg
	*.pl		g:filetype_pl
	*.inc		g:filetype_inc
	*.w		g:filetype_w	|ft-cweb-syntax|
	*.i		g:filetype_i	|ft-progress-syntax|
	*.p		g:filetype_p	|ft-pascal-syntax|
	*.sh		g:bash_is_sh	|ft-sh-syntax|
	*.tex		g:tex_flavor	|ft-tex-plugin|

							*filetype-ignore*
要避免檢測某些檔案，用 g:ft_ignore_pat 變數。預設值是: >
	:let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
這意味著壓縮檔案的內容不會被檢測。

							*new-filetype*
如果你想使用的檔案沒檢測到檔案型別，有四種方法。不管如何，最好不要修改
$VIMRUNTIME/filetype.vim 檔案。再安裝新的 Vim 版本的時候它會被覆蓋。

A. 如果你想否決所有的預設檔案型別檢查。
   這裡，每種檔案型別需要寫一個檔案。缺點就是，你需要很多檔案。優點就是，你只
   需要把檔案放到合適的目錄就可以了。
							*ftdetect*
   1. 建立你自己的執行時目錄。通常，你會用 'runtimepath' 選項的第一項。然後，
      在其中建立 "ftdetect" 目錄。Unix 上的例子: >
	:!mkdir ~/.vim
	:!mkdir ~/.vim/ftdetect
<
   2. 建立包含檢測檔案型別的自動命令的檔案。例如: >
	au BufRead,BufNewFile *.mine		set filetype=mine
<     注意 這裡沒有 "augroup" 命令。在執行你的檔案的時候這點已經做好了。你可以
      使用 "*" 模式，然後分析檔案內容來檢測其型別。
      把該檔案叫做 "mine.vim"，並把它放在使用者執行時目錄的 "ftdetect" 目錄裡。
      例如，在 Unix 上: >
	:w ~/.vim/ftdetect/mine.vim

<  3. 要使用新的檔案型別檢測，你需要重新啟動 Vim。

   "ftdetect" 目錄的檔案在所有的預設檢查之後進行，這樣它們就能否決之前進行的文
   件型別檢測。但是你還可以用 |:setfiletype| 保持前一個檢測到的檔案型別。

B. 如果你想在預設檔案型別檢查之後檢測自己的檔案。

   和上述的 A 類似。但不是無條件的設定 'filetype'，而是使用 ":setfiletype"。該
   命令只有在沒有檔案型別被監測到的前提下才會設定 'filetype'。例如: >
	au BufRead,BufNewFile *.txt		setfiletype text
<
   在你的命令裡，你可以使用已經檢測到的檔案型別。例如，在 "pascal" 型別已經被
   檢測到的前提下，要使用檔案型別 "mypascal": >
	au BufRead,BufNewFile *		if &ft == 'pascal' | set ft=mypascal
								       | endif

C. 如果你的檔案型別可以通過檔名檢測。
   1. 建立你自己的執行時目錄。通常，你會用 'runtimepath' 選項的第一項。Unix 上
      的例子: >
	:!mkdir ~/.vim
<
   2. 建立包含自動命令的檔案用於檢測檔案型別。示例: >
	" my filetype file
	if exists("did_load_filetypes")
	  finish
	endif
	augroup filetypedetect
	  au! BufRead,BufNewFile *.mine		setfiletype mine
	  au! BufRead,BufNewFile *.xyz		setfiletype drawing
	augroup END
<     在使用者執行時目錄下，把該檔案存為 "filetype.vim"。例如，在 Unix 上: >
	:w ~/.vim/filetype.vim

<  3. 要使用新的檔案型別檢測，你需要重新啟動 Vim。

   這裡，你的 filetype.vim 會在預設的 FileType 自動命令安裝前被執行。所以，你
   的自動命令會先被匹配，而 ":setfiletype" 命令的時候保證了其後沒有其他的自動
   命令會改變 'filetype'。
							*new-filetype-scripts*
D. 如果你的檔案型別只能通過分析檔案內容來檢測。

   1. 建立你的使用者執行時目錄。通常，你會用 'runtimepath' 選項的第一項。Unix 上
      的例子: >
	:!mkdir ~/.vim
<
   2. 創立一個 vim 指令碼，來實現需要的功能。示例: >
	if did_filetype()	" filetype 已經設立..
	  finish		" ..不需要這些檢測
	endif
	if getline(1) =~ '^#!.*\<mine\>'
	  setfiletype mine
	elseif getline(1) =~? '\<drawing\>'
	  setfiletype drawing
	endif
<     更多的例子可以參見 $VIMRUNTIME/scripts.vim。
      把該檔案命名為 "scripts.vim"，並儲存在你的使用者執行時目錄。例如，在 Unix
      上: >
	:w ~/.vim/scripts.vim
<
   3. 檢測會立即生效，無須重新啟動 Vim。

   你的 scripts.vim 在檔案型別的預設之前被載入，這意味著你的規則會覆蓋
   $VIMRUNTIME/scripts.vim 的預設規則。

						*remove-filetype*
如果某個檔案型別檢測有問題，安裝一個 filetype.vim 或者 scripts.vim 去捕獲這個
問題 (見上)。你可以把 'filetype' 設成一個不存在的名字，使得以後不會被設定: >
	:set filetype=ignored

如果你為許多使用者設定系統，而不想為每個使用者分別增加/刪除相同的為件型別，考慮把
filetype.vim 和 scripts.vim 寫到一個大家都能用的執行時目錄裡。檢視
'runtimepath' 裡有沒有能用的目錄。如果沒有，在 |system-vimrc| 裡設定
'runtimepath'。切記要儲存預設的目錄。


						*autocmd-osfiletypes*
備註: 現在此段程式碼已不再用，因為我們已移除了 RISC OS 實現。將來就用 'filetype'
選項便可。

如果作業系統支援在檔案裡儲存檔案型別，你可以指定某一檔案型別專用的自動命令。

實際的型別檢查決定於你執行 Vim 所處的平臺；詳情參見你的系統文件。

要在自動命令裡使用 osfiletype 檢查，你應該把待匹配型別的模式串用尖括號括起來，
就像這樣: >

	:au BufRead *.html,<&faf;HTML>  runtime! syntax/html.vim

這會匹配:

- 任何名字以 ".html" 結尾的檔案
- 任何型別為 "&faf" 或者 "HTML" 的檔案，這些型別的具體含義取決於你使用的 Vim
  的版本。
  未知的型別被認為是_不_匹配。

你可以同時自動指定型別和模式 (這時兩者必須都匹配): >

	:au BufRead <&fff>diff*

這個例子會匹配型別為 "&fff" 而且檔名以 "diff" 開始的檔案。


							*plugin-details*
"plugin" 目錄可以在 'runtimepath' 選項裡的任何一個目錄裡。所有這些目錄都會被搜
索，查詢到的外掛會被全部調入。例如，如果命令: >

	set runtimepath

產生這樣的輸出:

	runtimepath=/etc/vim,~/.vim,/usr/local/share/vim/vim60 ~

那麼 Vim 會調入以下目錄及其下的所有外掛:

	/etc/vim/plugin/ ~
	~/.vim/plugin/ ~
	/usr/local/share/vim/vim60/plugin/ ~

注意 最後一項是 $VIMRUNTIME 被擴充套件的值。

有沒有可能你的外掛好像沒有被調入呢？通過 |-V| 引數，你可以看看 Vim 啟動的時候
發生了什麼: >

	vim -V2

你會看到很多資訊。其中有關於調入外掛的一行註釋。它這樣開始:

	Searching for "plugin/**/*.vim" in ~

這樣，你就能看到 Vim 在哪裡查詢你的外掛指令碼了。

==============================================================================
2. 檔案型別外掛						*filetype-plugins*

如果允許載入檔案型別外掛 |:filetype-plugin-on|，相應的選項會被設定，對映會被定
義。它們都區域性於緩衝區，不會影響其他的檔案。

定義檔案型別的對映可能會影響你自己定義的對映。有一些方法可以避免這一點:
1. 設定 "maplocalleader" 變數為你想對映開始的鍵序列。例如: >
	:let maplocalleader = ","
<  所有的對映現在都以逗號開始，而不是預設的反斜槓。另見 |<LocalLeader>|。

2. 定義你自己的對映。例如: >
	:map ,p <Plug>MailQuote
<  你需要檢查下面給出的外掛檔案的描述，以瞭解它們的功能和對映到的字串。
   你需要在外掛載入之前定義自己的對映。 (在編輯該型別的檔案之前)。該外掛就可以
   跳過預設對映的安裝了。
						*no_mail_maps*
3. 遮蔽特定檔案型別的對映可以通過設定一個變數進行。該變數包含檔案型別的名字。
   對於 "mail" 檔案型別它可能是: >
	:let no_mail_maps = 1
<						*no_plugin_maps*
4. 通過設定變數遮蔽所有檔案型別的對映: >
	:let no_plugin_maps = 1
<

							*ftplugin-overrule*
如果某個全域性檔案型別外掛不完全符合你的期待，有三個辦法可以改變:

1. 增加一些設定。
   你必須在 'runtimepath' 靠前的一個目錄裡建立一個新的檔案型別外掛。Unix 上，
   你可以使用這個檔案: >
	vim ~/.vim/ftplugin/fortran.vim
<  你可以設定你希望有的選項和對映。注意，全域性外掛會在其後進行。它可能會否決你
   做的那些設定。如果發生了，你有以下兩種方法。

2. 建立一個外掛的備份，並改變之。
   你需要把該備份放在 'runtimepath' 靠前的位置。Unix 上，你可以這麼做: >
	cp $VIMRUNTIME/ftplugin/fortran.vim ~/.vim/ftplugin/fortran.vim
<  這樣你可以自由的編輯你的備份檔案。因為 b:did_ftplugin 會被設定，全域性的外掛
   就不會載入自身。這樣做的一個缺點是，如果發行的外掛版本更新，你需要重新複製
   並再次進行修改。

3. 在載入全域性外掛以後否決一些設定。
   你需要在 'runtimepath' 的尾部建立一個新的檔案型別外掛。Unix 上，你可以使用
   這個檔案: >
	vim ~/.vim/after/ftplugin/fortran.vim
<  在這個檔案裡，你可以對需要的設定進行改變。

==============================================================================
3.  預設檔案型別外掛的文件				*ftplugin-docs*


CHANGELOG						*ft-changelog-plugin*

允許方便的輸入 Changlog 檔案的 Changelog 段 (entry)。有些命令，對映和變數值得
探索一下:

選項:
'comments'		置為空，以免影響排版。
'textwidth'		設為 78，這是標準。
'formatoptions'		增加 't' 標誌位，使得插入文字時能進行迴繞。

命令:
NewChangelogEntry	智慧地增加新的 Changelog 段 (見下)。

區域性對映:
<Leader>o		同樣智慧地開始一個新的 Changlog 段  (見下)。

全域性對映:
			注意: 全域性設定是通過先執行 ftplugin/changelog.vim 檔案
			設定的。例如在你的 |.vimrc| 里加上: >
				runtime ftplugin/changelog.vim
<
<Leader>o		切換到為當前目錄開啟的 ChangeLog 緩衝區。如果當前目錄
			已存在該檔案，在新的緩衝區開啟之。然後執行上述區域性
			<Leader>o 的功能。

變數:
g:changelog_timeformat	已廢棄；請用 g:changelog_dateformat 代替。
g:changelog_dateformat	Changelog 段使用的日期 (和時間) 格式。該格式和
			|strftime()| 函式使用的語法相同。
			預設值是 "%Y-%m-%d"，這是許多 ChangeLog 排版所使用的標
			準格式。
g:changelog_username	使用者的名字和 email 地址。預設值從環境變數和系統檔案裡
			推得。它先搜尋當前使用者 /etc/passwd 的註釋部分。非正式
			地，該項在第一個分隔的逗號之前的部分包含了使用者的實際名
			字。然後它再檢查 $NAME 環境變數，最後執行 `whoami' 和
			`hostname' 來構造一個 email 地址。最終形式是 >
				Full Name  <user@host>
<
g:changelog_new_date_format
			建立新的日期專案時所用的格式。下表描述字串中的特殊記
			號:
				%%	插入單個 '%' 號
				%d	插入上述的日期
				%u	插入上述的使用者
                                %p	插入 b:changelog_entry_prefix 的值
				%c	完成時游標的位置
			預設值是 "%d  %u\n\n\t* %p%c\n\n"，它會產生如下的結果
			 (| 是游標鍵要到的位置，除非出現在行首。那裡它就是意味
			著一行的開始) >
				|2003-01-14  Full Name  <user@host>
				|
				|        * prefix|
<
g:changelog_new_entry_format
			建立新段所用的格式。下表描述字串裡的特殊記號:
                                %p	插入 b:changelog_entry_prefix 的值
				%c	完成時游標的位置
			預設值是 "\t*%c"，產生的結果如下 >
				|        * prefix|
<
g:changelog_date_entry_search
			搜尋日期項所用的搜尋模式。
			g:changelog_new_date_format 所使用的特殊記號這裡也可以
			使用。
			預設值是 '^\s*%d\_s*%u'，它能找到匹配如下形式的行 >
				|2003-01-14  Full Name  <user@host>
<			和一些類似的格式。

g:changelog_date_end_entry_search
			搜尋日期項結尾所用的搜尋模式。
			g:changelog_new_date_format 所使用的特殊記號這裡也可以
			使用。
			預設值是 '^\s*$'，它匹配只包含空白或全空的行。

b:changelog_name					*b:changelog_name*
			尋找的 ChangeLog 檔名。預設是 'ChangeLog'。

b:changelog_path
			當前緩衝區使用的 ChangeLog 路徑。預設為空，也就是尋找
			和當前緩衝區同一目錄的名為 |b:changelog_name| 的檔案。
			如果沒找到，搜尋當前緩衝區的父目錄，如此遞迴直到找到文
			件或者沒有更多的父目錄可供搜尋。

b:changelog_entry_prefix
			函式名，用於生成新段的字首。該函式沒有引數，而應返回包
			含字首的字串。
			可以返回空字首。
			預設生成 ChangeLog 的路徑名和當前緩衝區路徑名兩者的較
			短者。此變數將來應該可以使用其它變數上下文，例如 g:。

Changelog 段插入時，只需要輸入最少量的文字。在確定當前日期和使用者後，在該檔案裡
會搜尋以當前日期和使用者開頭的一段，如果找到了，則在其後新增一個新項。如果沒有，
則從 Changelog 檔案開始處新增新的段和專案 (item)。


FORTRAN							*ft-fortran-plugin*

選項:
'expandtab'	被開啟，按照 Fortran 標準的要求，不應出現製表字元。使用者在
		.vimrc 檔案裡設定 fortran_have_tabs 除外。
'textwidth'	按照 Fortrean 標準要求， 固定寬度原始檔格式設為 72，自由格式的
		原始碼設為 80。
'formatoptions' 設為能斷開程式碼和註釋行，並保留長行。你可以用 |gq| 排版註釋。
更多的關於 fortran_have_tabs 和檢測原始碼格式的方法的討論，可見
|ft-fortran-syntax|。


GIT COMMIT                                              *ft-gitcommit-plugin*

提供了一個命令 :DiffGitCached 來在預覽視窗中顯示當前提交的差異部分。等價於
"git diff --cached" 加上此命令後面的引數。


MAIL							*ft-mail-plugin*

選項:
'modeline'	被關閉，以防特洛伊木馬。也防止含有 "Vim:" 字樣的標題會引起錯誤
		資訊。
'textwidth'	設為 72。這是 e-mail 推薦的格式。
'formatoptions' 設為能斷開文字行，並且在新行裡重複註釋的前導符，這樣引用開頭的
		">" 就可以重複了。你也可以用 |gq| 排版引用文字。

區域性對映:
<LocalLeader>q   或者  \\MailQuote
	引用可視模式下的選擇文字，或者在普通模式下從游標位置到檔案末的文字。這
	意味著 "> " 會插到每行的開始。

MAN					*ft-man-plugin* *:Man* *man.vim*

較好地顯示手冊頁。另見使用者手冊中的 |find-manpage|。

要在調入任何手冊頁之前就能使用 ":Man" 命令，你需要在啟動的 vimrc 檔案裡先執行
以下指令碼: >

	runtime ftplugin/man.vim

選項:
'iskeyword'	加入 '.' 字元，以便能在手冊頁名字上使用 CTRL-]。

命令:
Man {name}	在窗口裡顯示 {name} 的手冊頁
Man {number} {name}
		在第 {number} 節裡顯示 {name} 的手冊頁。

全域性對映:
<Leader>K	顯示當前游標下的單詞的相應手冊頁。
<Plug>ManPreGetPage  同上，可用於對映: >
			nmap <F1> <Plug>ManPreGetPage<CR>

區域性對映:
CTRL-]		跳到當前游標下的單詞的相應手冊頁。
CTRL-T		跳回前一次的手冊頁。
q		同 ":quit"

要使用垂直對映而不是水平對映： >
	let g:ft_man_open_mode = 'vert'
要用新標籤頁: >
	let g:ft_man_open_mode = 'tab'

要開啟摺疊: >
	let g:ft_man_folding_enable = 1
如果不喜歡預設的摺疊方式，使用自動命令加入你喜歡和摺疊風格。例如: >
        autocmd FileType man setlocal foldmethod=indent foldenable

你可能還想設定 'keywordprg'，使 |K| 命令在 Vim 視窗開啟手冊頁: >
	set keywordprg=:Man


MANPAGER				      *manpager.vim*

:Man 命令把 Vim 變成手冊瀏覽器 (語法高亮手冊頁，按 CTRL-] 時點選相連的手冊
頁)。

可用於:

  - Linux
  - Mac OS
  - FreeBSD
  - Cygwin
  - Win 10 的 Bash

未經測試:

  - Amiga OS
  - BeOS
  - OS/2

對 bash、zsh、ksh 或 dash，加入對應的配置檔案 (.bashrc、.zshrc、...)

	export MANPAGER="env MAN_PN=1 vim -M +MANPAGER -"

對 (t)csh，加入配置檔案

	setenv MANPAGER "env MAN_PN=1 vim -M +MANPAGER -"

對 fish，加入配置檔案

	set -x MANPAGER "env MAN_PN=1 vim -M +MANPAGER -"

如果 man 設定了 $MAN_PN 環境變數，象 Linux 和 Mac OS 最常見的實現 man-db 那
樣，那麼上述 "env MAN_PN=1 " 部分就是多餘的。

PDF							*ft-pdf-plugin*

提供兩個對映， <C-]> 和 <C-T>，來模擬用於 PDF 瀏覽的標籤棧。以下內容視為標籤:

- "startxref" 後指向 xref 表的位元組位移
- 檔案尾部中 /Prev 鍵後指向以前 xref 表的位元組位移
- xref 表中形如 "0123456789 00000 n" 的行
- PDF 任意位置上形如 "1 0 R" 的物件引用

可以關閉這些對映 >
	:let g:no_pdf_maps = 1
<

PYTHON						*ft-python-plugin* *PEP8*

預設設定以下選項，根據 PEPB: >

	setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=8

要關閉此行為，在 vimrc 裡設定變數: >

	let g:python_recommended_style = 0


RPM SPEC						*ft-spec-plugin*

因為這個外掛的文字相當長，它被單獨列出: |pi_spec.txt|。


RUST							*ft-rust*

因為這個外掛的文字相當長，它被單獨列出: |ft_rust.txt|。


SQL							*ft-sql*

因為這個外掛的文字相當長，它被單獨列出: |ft_sql.txt|。


TEX						*ft-tex-plugin* *g:tex_flavor*

如果 *.tex 檔案的首行是如下的形式 >
	%&<format>
那麼它決定了檔案型別:  plaintex (普通的 TeX)、context (ConTeXt)、或者 tex
(LaTeX)。否則在檔案裡搜尋關鍵字以判斷是 context 還是 tex。如果找不到關鍵字，缺
省是 plaintex。可以通過定義變數 g:tex_flavor 改變預設值為最常用的格式 (不是文
件型別)。使用下列選擇之一: >
	let g:tex_flavor = "plain"
	let g:tex_flavor = "context"
	let g:tex_flavor = "latex"
目前還不能識別其它格式。


 vim:tw=78:ts=8:ft=help:norl:
