*gui.txt*       For Vim version 8.0.  最近更新: 2017年7月


		  VIM 參考手冊    by Bram Moolenaar
				譯者: Willis
				http://vimcdoc.sf.net


Vim 的圖形使用者介面					*gui* *GUI*

1. 啟動 GUI			|gui-start|
2. 滾動條			|gui-scrollbars|
3. 滑鼠控制			|gui-mouse|
4. 使用 GUI 進行選擇		|gui-selections|
5. 選單				|menus|
6. 附加				|gui-extras|
7. 外殼命令			|gui-shell|

其它的 GUI 文件:
|gui_x11.txt|	關於 X11 GUI 的特定內容。
|gui_w32.txt|	關於 Win32 GUI 的特定內容。

{Vi 沒有這裡的任何命令}

==============================================================================
1. 啟動 GUI					*gui-start* *E229* *E233*

首先，需要確定你確實有包含 GUI 程式碼的 Vim 版本。你可以用 ":version" 命令檢查這
一點。它應該輸出 "with xxx GUI"，而 "xxx" 是 X11-Motif、X11-Athena、Photon、
GTK、GTK2、GTK3 等，或者 "MS-Windows 32 bit GUI version"。

如何啟動 GUI 決定於你的系統。多數情況下，你可以這樣啟動 Vim 的 GUI 版本:
    gvim [options] [files...]

GUI 和非 GUI 版本在 Vim 的 X11 版本上都可以執行。見 |gui-x11-start|。

			*gui-init* *gvimrc* *.gvimrc* *_gvimrc* *$MYGVIMRC*
gvimrc 檔案是 GUI 專用的啟動命令應該放置的地方。它總在 |vimrc| 檔案之後執行。
如果你有這樣的檔案，$MYGVIMRC 環境變數儲存它的名字。

當 GUI 開始時，開展以下初始化操作 (按照給出的順序):
- 'term' 選項設為 "builtin_gui"，復位終端選項到其 GUI 的預設值
  |terminal-options|。
- 如果存在系統選單檔案，執行之。該檔名通常是 "$VIMRUNTIME/menu.vim"。你需要
  用 ":version" 檢查這一點。另見 |$VIMRUNTIME|。要跳過選單載入，在
  'guioptions' 里加入 'M'。		*buffers-menu* *no_buffers_menu*
  系統選單檔案包含 "Buffers" 選單。如果你不需要，在你的 .vimrc (不是
  .gvimrc！) 裡，設定 "no_buffers_menu" 變數: >
	:let no_buffers_menu = 1
< 注意: 切換語法高亮也會載入選單檔案，因此遮蔽 Buffers 選單必須在 ":syntax on"
  之前。
  路徑名被截短到 35 個字元。你可以截短到不同的長度，例如 50:
	:let bmenu_max_pathlen = 50
- 如果啟動 Vim 時 使用 "-U {gvimrc}" 命令列選項，初始化過程會讀入 {gvimrc} 文
  件。以下的步驟被跳過。如果 {gvimrc} 為 "NONE"，初始化過程不讀入任何檔案。
- 對 Unix 和 MS-Windows 而言，如果系統 gvimrc 存在，執行之。該檔案的名字通常是
  "$VIM/gvimrc"。你可以用 ":version" 檢查這一點。另見 |$VIM|。
- 嘗試以下步驟，只使用第一個可用的:
  - 如果 GVIMINIT 環境變數存在而且非空，把它作為 Ex 命令執行之。
  - 如果使用者 gvimrc 檔案存在，執行之。該檔案的名字通常是 "$HOME/.gvimrc"。用
    ":version" 檢查之。
  - 對 Win32 而言，如果沒設定 $HOME，使用 "$VIM\_gvimrc"。
  - 如果 "_gvimrc" 檔案沒找到，嘗試 ".gvimrc"。反之亦然。
  第一個找到的檔名儲存在 $MYGVIMRC 裡，除非後者已經被設定。
- 如果置位 'exrc' 選項 (預設_並非_如此)，執行檔案 ./.gvimrc。如果該檔案不屬於
  你，有一些安全的限制。如果 ".gvimrc" 找不到，嘗試 "_gvimrc"。Macintosh 和
  DOS/Win32 環境下先嚐試 "_gvimrc"。

注意: 如果 Vim 啟動時使用 "-u NONE" 而且沒有給出 "-U" 引數，或者使用 "-U
NONE"，則除了第一步以外，都不執行。

這些步驟都在普通 Vim 初始化之_後_執行，比如讀取 .vimrc 檔案。見
|initialization|。
GUI 視窗只在全部的初始化執行完畢後才會開啟。如果你希望在開啟 GUI 視窗後執行某
些命令，使用 |GUIEnter| 自動事件。例如: >
	:autocmd GUIEnter * winpos 100 50

你可以使用 gvimrc 檔案設定你自己定製的選單 (見 |:menu|)，並初始化其它你希望和
終端版本不同的設定。

建議你把自己的 GUI 初始化部分放在:
	Unix		    $HOME/.gvimrc 或 $HOME/.vim/gvimrc
	OS/2		    $HOME/.gvimrc、$HOME/vimfiles/gvimrc 或
			    $VIM/.gvimrc
	MS-DOS 和 Win32     $HOME/_gvimrc、$HOME/vimfiles/gvimrc 或
			    $VIM/_gvimrc
	Amiga		    s:.gvimrc、home:.gvimrc、home:vimfiles:gvimrc 或
			    $VIM/.gvimrc

按上述的順序依次查找個人化的初始檔案，只讀入第一個找到的檔案。

若干選項只有在 GUI 版本的 Vim 裡才有意義。它們是 'guicursor'、'guifont'、
'guipty' 和 'guioptions'。和其它選項一樣，他們的文件在 |options.txt|。

如果使用 Motif 或者 Athena 版本的 GUI (不適用於 GTK+ 或 Win32 版本)，可以使用
一些 X 資源。見 |gui-resources|。

另外一個在不同場合下設定顏色的方法是使用高亮組。"Normal" 組用來設定背景和前景
色。示例 (看上去很悅目): >

	:highlight Normal guibg=grey90

"guibg" 和 "guifg" 設定覆蓋正常的背景和前景設定。其它 Normal 高亮組的設定都沒
有用到。使用 "guifont" 選項設定字型。

要設定游標在不同模式下的顏色，也請檢視 'guicursor' 選項。

Vim 試圖在啟動時使視窗在螢幕上的大小合適，以免部分內容不可見。在 X 視窗系統
下，這需要一些猜測。使用 'guiheadroom' 選項，你可以改變視窗標題和工作列的高
度。

						*:winp* *:winpos* *E188*
:winp[os]
		顯示 GUI vim 視窗以畫素計的當前左上角位置。並非在所有系統上都
		可以。
		另見 |getwinposx()| 和 |getwinposy()|。

:winp[os] {X} {Y}							*E466*
		把 GUI vim 視窗放在給定 {X} 和 {Y} 座標。座標應指定以畫素計的
		視窗左上角的位置。並非在所有系統上都可以。
		可以在 (新版的) xterm 裡使用 |xterm-color|。
		如果 GUI 視窗還沒有開啟，座標值被記住，直到視窗開啟為止。該位
		置會被調整，使得視窗在螢幕上大小合適 (如果可能)。

						    *:win* *:winsize* *E465*
:win[size] {width} {height}
		設定視窗高度為 {width} 寬 {height} 高，以字元計。
		已廢棄，應使用 ":set lines=11 columns=22"。
		如果你得到比期待中少的行數，檢查 'guiheadroom' 選項。

如果你執行 X 視窗系統，你可以這樣得到關於 Vim 執行所在的視窗的資訊: >
	:!xwininfo -id $WINDOWID
	:!xprop -id $WINDOWID
	:execute '!xwininfo -id ' . v:windowid
	:execute '!xprop -id ' . v:windowid
<
							*gui-IME* *iBus*
在 X 裡依賴於 XIM 框架輸入國際字元的輸入法，尤其是 iBus，已知會給 gVim 帶來一
些不良效果。包括不能輸入空格，輸入字元間有長時間的延遲，或者輸入的字元不能為
應用所識別等。

一個可行的解決方法，雖然不知什麼原因，是啟動時用 |-f| 引數，不讓 gvim 進入後臺
執行。

==============================================================================
2. 滾動條						*gui-scrollbars*

系統有若干垂直滾動條和一個水平滾動條。你可以用 'guioptions' 選項設定會出現哪一
個。

介面看起來是這樣 (使用 ":set guioptions=mlrb" 的情形下):

		       +------------------------------+ `
		       | File  Edit		 Help | <- 選單欄 (m) `
		       +-+--------------------------+-+ `
		       |^|			    |^| `
		       |#| 文字區域		    |#| `
		       | |			    | | `
		       |v|__________________________|v| `
 Vim 視窗間的       -> |-+ File.c	       5,2  +-| `
 普通狀態行            |^|""""""""""""""""""""""""""|^| `
		       | |			    | | `
		       | | 另一個檔案緩衝區。       | | `
		       | |			    | | `
		       |#|			    |#| `
 左滾動條 (l)       -> |#|			    |#| <- 右滾動條  (r) `
		       |#|			    |#| `
		       | |			    | | `
		       |v|			    |v| `
		       +-+--------------------------+-+ `
		       | |< ####		   >| | <- 底部滾動條  (b) `
		       +-+--------------------------+-+ `

任何滾動條或者選單都可以關閉，只要在 'guioptions' 字串裡沒有相應的字母就行
了。底部滾動條只有在置位 'nowrap' 時才有用。


垂 直 滾 動 條						*gui-vert-scroll*

每個 Vim 視窗都有緊挨著的滾動條，可以上下滾動來實現緩衝區內文字的位置移動。滾
動條拇指 (thumb) 指示緩衝區可見的部分。如果滾動條被一直往下拖動，最後檔案的末
行會出現在視窗的頂部。

如果視窗被縮小到零高度 (因為另一個視窗的增大)，其滾動條消失。在視窗恢復時才重
新出現。

如果視窗被垂直分割，該視窗會在成為當前視窗時得到滾動條。想象當前視窗的正中間有
一條貫穿視窗的垂直線。如果兩邊都有滾動條，而當前視窗的中間線屬於左半邊，那麼
右面的滾動條列包含當前視窗右邊各視窗的滾動條。另外一側也是如此。

水 平 滾 動 條						*gui-horiz-scroll*

水平滾動條 (出現在 Vim GUI 的底部) 可以在 'wrap' 選項關閉時用來水平滾動文字。
滾動條拇指的大小設定會使得最長可見行的文字可以最大限度的左右滾動。游標在有必要
時才會移動，使得它總保持在一個可視的字元上 (除非置位了 'virtualedit')。

計算最長可見行的長度需要若干計算，而且每次有改變的時候對需要進行。如果這需要太
多時間，或者你不希望游標跳到別的行上，在 'guioptions' 裡包含 'h' 標誌位。這
樣，滾動限於當前游標所在文字行上。

							*athena-intellimouse*
如果你有 Intellimouse 滑鼠並且 X 伺服器支援滾輪，那你就可以用滾輪在 gvim 裡上
下滾動文字。XFree86 4.0 和以後的版本都沒有問題，一些老的版本里你需要加上補丁。
見 |scroll-mouse-wheel|。

對較老的 XFree86 版本你需要給 X 伺服器打上補丁。以下頁面有關於 Linux 上使用
Intellimouse 的一點資訊，還有補丁和 X 伺服器可執行檔案的連結 (後者也許不一定有
你需要的):
    http://www.inria.fr/koala/colas/mouse-wheel-scroll/

==============================================================================
3. 滑鼠控制						*gui-mouse*

滑鼠只有在 'mouse' 選項設定合適的標誌位時才會工作。如果打開了 GUI 的時候還沒有
設定 'mouse'，'mouse' 選項會自動設為 "a"，使得它除了在 |hit-enter| 提示以外的
所有的模式下都能使用。如果你不希望這樣，修改 'mouse' 選項的一個好地方是在
"gvimrc" 檔案裡。

其它相關的選項:
'mousefocus'	視窗焦點隨滑鼠指標改變 |gui-mouse-focus|
'mousemodel'	哪個滑鼠按鈕執行什麼動作
'mousehide'	輸入文字時隱藏滑鼠指標
'selectmode'	開始選擇模式還是可視模式

一個設定這些選項的快速方法是使用 ":behave" 命令。
							*:behave* *:be*
:be[have] {model}	設定滑鼠和選擇的行為。可接受的引數是:
			   mswin	MS-Windows 行為
			   xterm	Xterm 行為

			":behave" 的使用改變了以下選項:
			選項		mswin			xterm	~
			'selectmode'	"mouse,key"		""
			'mousemodel'	"popup"			"extend"
			'keymodel'	"startsel,stopsel"	""
			'selection'	"exclusive"		"inclusive"

在 $VIMRUNTIME 目錄下，有一個指令碼叫 |mswin.vim|。它會定義一些 MS-Windows 的剪
切/複製/貼上的鍵盤對映，但這是_不_相容的，因為它使用了 CTRL-V、 CTRL-X 和
CTRL-C 鍵。不過如果你不在意，使用這個命令: >
	:so $VIMRUNTIME/mswin.vim

關於使用滑鼠滾輪進行滾動的部分，見 |scroll-mouse-wheel|。


3.1 使用滑鼠移動游標					*gui-mouse-move*

在文字緩衝區某處點選滑鼠左鍵，就會移動游標到那裡！
在此模式下工作	    當 'mouse' 包含...時 ~
普通模式	    'n' 或 'a'
可視模式	    'v' 或 'a'
插入模式	    'i' 或 'a'

選擇模式和可視模式一樣處理。

你可以和操作符一起使用這個功能，比如 'd' 刪除從當前游標位置到你用滑鼠指向的位
置。即，按 'd'，然後在某處點選滑鼠。

							*gui-mouse-focus*
可以置位 'mousefocus' 選項使得鍵盤焦點隨著滑鼠指標轉移。這意味著，滑鼠在哪個窗
口，哪個視窗就被啟用。警告: 使用選單的時候，這並不完善，因為選單命令總是針對最
頂上的視窗。

如果你在 ':' 行上 (或者 '/' 或 '?')，那麼點選滑鼠左鍵或右鍵只會把游標定位在
':' 行上 (如果 'mouse' 包含 'c'、'a' 或 'A' 的話)。

任何情況下，點選滑鼠中鍵可以用來貼上當前的選擇內容。


3.2 使用滑鼠進行選擇					*gui-mouse-select*

滑鼠可以用來開始選擇。怎樣開始決定於 'mousemodel' 選項:
'mousemodel' 是 "extend": 使用滑鼠右鍵
'mousemodel' 是 "popup":  使用滑鼠左鍵，按住 Shift 鍵。

如果還沒有開始選擇，那麼選擇範圍從以前的游標位置開始，到滑鼠所點選的位置。如果
已經有選擇，那麼離滑鼠最近的那端會被擴充套件。

如果 'selectmode' 包含 "mouse"，那麼選擇區處於選擇模式。這意味著輸入正常的文字
會替代選擇內容。見 |Select-mode|。不然，選擇區處於可視模式。

雙擊可以選擇單詞，三擊可以選擇行，四擊可以選擇矩形塊。

關於如何使用選擇區，見 |gui-selections|。


3.3 另一種滑鼠的文字選擇				*gui-mouse-modeless*
							*modeless-selection*
以下情形使用另一種選擇:
- 在命令列模式下
- 在命令列視窗中，指標在另外一個視窗
- 在 |hit-enter| 提示時
- 當前模式不在 'mouse' 選項裡
- 在 GUI 模式裡，按住 CTRL 和 SHIFT 鍵
因為 Vim 就像沒有選擇區那樣繼續，而且沒有和選擇區相關聯的模式，這種選擇稱為無
模式的選擇。可以選擇任何在 Vim 窗口裡的文字。在文字開始的地方滑鼠左鍵，拖到尾
部再釋放。要擴充套件選擇，在 'mousemodel' 為 "extend" 的時候，使用滑鼠右鍵；在
'mousemodel' 為 "popup" 的時候，使用滑鼠左鍵並按住 Shift 鍵。

選擇區在選擇文字滾動或者改變時被撤銷。

在命令列上 CTRL-Y 可以用來複制選擇區到剪貼簿裡。在插入模式下，可以使用
CTRL-O : CTRL-Y <CR>。如果 'guioptions' 包含 a 或 A (X11 上的預設值)，選擇被自
動複製到 "* 暫存器裡。

這時用滑鼠中鍵就可以貼上文字。非 X11 系統上，可以使用 CTRL-R +。


3.4 在狀態行上使用滑鼠					*gui-mouse-status*

在 Vim 視窗下方的狀態行上點選滑鼠左鍵或者右鍵使得該視窗成為當前視窗。實際上，
這發生在滑鼠釋放的時候 (以區別拖動時的點選操作)。

使用滑鼠左鍵，狀態行可以上下拖動，從而調整上下視窗的大小。這樣並不改變視窗焦
點。

這同樣適用於垂直分割線: 點選把焦點給左側的視窗，左右拖動使得兩側視窗更寬和更
窄。


3.5 各種滑鼠點選					*gui-mouse-various*

    <S-LeftMouse>	正向搜尋滑鼠點選所在的單詞。
			當 'mousemodel' 為 "popup" 時，該操作開始或者擴充套件選擇
			區。
    <S-RightMouse>	反向搜尋滑鼠點選所在的單詞。
    <C-LeftMouse>	跳轉到滑鼠點選所在的標籤上。
    <C-RightMouse>	跳回上次標籤跳轉之前的位置 (等同於 "CTRL-T")


3.6 滑鼠對映						*gui-mouse-mapping*

滑鼠事件，包括各種修飾符，可以被對映。例如: >
   :map <S-LeftMouse>     <RightMouse>
   :map <S-LeftDrag>      <RightDrag>
   :map <S-LeftRelease>   <RightRelease>
   :map <2-S-LeftMouse>   <2-RightMouse>
   :map <2-S-LeftDrag>    <2-RightDrag>
   :map <2-S-LeftRelease> <2-RightRelease>
   :map <3-S-LeftMouse>   <3-RightMouse>
   :map <3-S-LeftDrag>    <3-RightDrag>
   :map <3-S-LeftRelease> <3-RightRelease>
   :map <4-S-LeftMouse>   <4-RightMouse>
   :map <4-S-LeftDrag>    <4-RightDrag>
   :map <4-S-LeftRelease> <4-RightRelease>
這些對映使得選擇的使用方式符合和 Motif 應用方式，Shift + 滑鼠左鍵允許擴充套件可視
區域，而不是滑鼠右鍵。

帶修飾符的滑鼠對映不適用於無模式的選擇。


3.7 拖放							*drag-n-drop*

你可以拖放一個或多個檔案到 Vim 窗口裡，這樣，它們就會被開啟，如果執行了
|:drop| 命令那樣。

如果這麼做的時候你按住 Shift，Vim 改變到第一個放下的檔案所在的目錄。如果你按住
Ctrl，Vim 總會為檔案分割出一個新的視窗。不然，只有當前緩衝區被改變的時候才會這
麼做。

你可以在 Vim 裡放下目錄。這會為該目錄啟動探索器外掛 (假設該外掛被開啟，不然你
會得到錯誤資訊)。按住 Shift 這改變到該目錄。

如果 Vim 碰巧在編輯命令列，放下檔案的名字和目錄會插入在游標位置上。這使得你在
任何 Ex 命令上都可以使用這些名字。特殊字元 (空格、製表、雙引號、'|'、非
MS-Windows 系統上的反斜槓) 會被轉義。

==============================================================================
4. 使用 GUI 進行選擇					*gui-selections*

							*quotestar*
你可以用滑鼠進行選擇 (見 |gui-mouse-select|)，或者使用 Vim 的可視模式 (見
|v|)。如果 'guioptions' 裡包含 'a'，那麼無論什麼時候開始選擇 (可視或選擇模
式)，或者選擇內容發生改變的時候，Vim 成為視窗系統的主選擇區的擁有者
(MS-Windows 上使用 |gui-clipboard|；X11 上使用 |x11-selection| - 不管具體哪個
更合適，你應該據此理解所謂的主選擇區)。

							*clipboard*
有一個特殊的暫存器可以存放選擇內容，這就是 "* 暫存器。除非選擇文字的相關資訊發
生改變 (比如你在某處按了滑鼠左鍵)，或者另一個應用想要貼上選擇文字。這時，文字
被放到 "* 暫存器裡。例如，剪下一行並使之當前的選擇區並放到剪貼簿上: >

	"*dd

類似的，你想貼上別的應用的選擇內容，比如通過點選滑鼠中鍵，的時候，該選擇內容被
先放到 "* 暫存器上，然後再像其它暫存器那樣被 'put' (放置)。例如，放置選擇內容
(剪貼簿的內容) 可以這樣: >

	"*p

如果在 X11 中使用該暫存器，另見 |x11-selection|。那裡也解釋了相關的 "+ 寄存
器。

注意 在從一個 Vim 貼上文字到另一個單獨的 Vim 的時候，選擇型別 (字元、行、或塊)
也會被複制。對於其它應用，型別總是面向字元的。不過，如果文字通過
|x11-cut-buffer| 傳輸，選擇型別_總_會丟失。

當 'clipboard' 選項包含了 "unnamed" 字串的時候，無名暫存器和 "* 相同。這樣，
你可以抽出和貼上選擇內容，而無須在這些命令前面附加 "*。

==============================================================================
5. 選單							*menus*

使用者手冊 |usr_42.txt| 有本節內容的簡單介紹。


5.1 使用選單						*using-menus*

基本上，選單和對映類似。你可以定義自己的選單，多少都可以。
Vim  的長期使用者不太用選單。但是它的優勢在你可以增加自己的選單和選單項。它們在
你記不住鍵序列的功能的時候很有用。

關於如何建立不同語言的選單，見 |:menutrans|。

							*menu.vim*
預設選單從 "$VIMRUNTIME/menu.vim" 檔案裡讀取。關於該路徑從何而來，見
|$VIMRUNTIME|。 你可以設定你自己的選單。從預設選單開始是一個好主意。你可以增加
更多專案，或者如果完全不喜歡預設選單，從刪除所有選單開始 |:unmenu-all|。你可以
把下行加到 .vimrc (不是 .gvimrc) 檔案以禁止預設的選單的調入: >
	:let did_install_default_menus = 1
如果你也不想載入 Syntax 選單: >
	:let did_install_syntax_menu = 1
Syntax 選單第一項可以用來顯示包含所有可用的檔案型別的選單 (載入需要不少時間)。
如果你確實想要啟動時就同時得到所有檔案型別，加入: >
		:let do_syntax_sel_menu = 1

<
							*console-menus*
儘管本文件討論 GUI，你其實也可以在控制檯模式使用選單。你需要自行載入
|menu.vim|，因為在那裡，這一步不是自動進行的。你可以使用 |:emenu| 命令和帶
'wildmenu' 的命令列補全，從而能像真實的菜單系統那樣對選單項進行訪問。要做到這
一點，在你的 .vimrc 檔案裡放入如下命令: >
	:source $VIMRUNTIME/menu.vim
	:set wildmenu
	:set cpo-=<
	:set wcm=<C-Z>
	:map <F4> :emenu <C-Z>
按 <F4> 會啟動選單。你可以用游標移動鍵來選擇選單項。按 <Enter> 執行。如果你想
取消，按 <Esc>。
本功能需要在編譯時加入 |+menu| 特性。

							*tear-off-menus*
GTK+ 2 和 Motif 支援可撕下的選單。它們是一種有粘性的選單，亦即一直在螢幕上存在
的彈出式選單。如果它們不能調整大小，可能你在 defaults 檔案裡使用了類似於
"Vim*geometry" 的設定。你應該使用 "Vim.geometry"。

至於 GTK+ 3，從 GTK+ 3.4 開始，可撕下的選單被廢棄了。因而如果 gvim 連結了 GTK+
3.4 或更新的版本，關閉其支援。

Win32 GUI 版本模擬 Motif 的可撕下選單。實際上，Motif 使用者很容易說出兩者的區
別，但我們只希望能一樣有用就夠了。你也可以同時使用 |:tearoff| 命令和
|hidden-menus|，來建立不在主選單欄出現的浮動選單。


5.2 建立新的選單					*creating-menus*

				*:me*  *:menu*  *:noreme*  *:noremenu*
				*:am*  *:amenu* *:an*      *:anoremenu*
				*:nme* *:nmenu* *:nnoreme* *:nnoremenu*
				*:ome* *:omenu* *:onoreme* *:onoremenu*
				*:vme* *:vmenu* *:vnoreme* *:vnoremenu*
				*:xme* *:xmenu* *:xnoreme* *:xnoremenu*
				*:sme* *:smenu* *:snoreme* *:snoremenu*
				*:ime* *:imenu* *:inoreme* *:inoremenu*
				*:cme* *:cmenu* *:cnoreme* *:cnoremenu*
				*E330* *E327* *E331* *E336* *E333*
				*E328* *E329* *E337* *E792*
要建立新的選單項，使用 ":menu" 命令群。它們和 ":map" 命令群非常類似，但是第一
個引數是選單項名。形式為 '.' 分隔的選單或子選單的路徑，例如: >

   :menu File.Save  :w<CR>
   :inoremenu File.Save  <C-O>:w<CR>
   :menu Edit.Big\ Changes.Delete\ All\ Spaces  :%s/[ ^I]//g<CR>

最後一項會在選單欄裡建立一個新的專案 "Edit"，在它上面按下滑鼠鍵，會彈出選單，
裡面包含 "Big Changes" 一項，這又是包含 "Delete All Spaces" 項的一個子選單。如
果選擇了該項，執行操作。

選單名裡可用的特殊字元:

	&	下一個字元是快捷鍵。確信該快捷鍵在 (子) 選單裡只使用一次。如果
		你想插入按本義出現的 "&"，使用 "&&"。
	<Tab>	分隔選單名和右對齊的文字。這被用來顯示等價的命令輸入。為了方便
		起見，這裡可以使用文字 "<Tab>"。如果你使用真正的製表鍵，別忘了
		在前面加上反斜槓！
示例: >

   :amenu &File.&Open<Tab>:e  :browse e<CR>

[按文字直接輸入]
通過快捷鍵 "F" (按著 <Alt> 鍵)，然後 "O"，就可以使用這個選單。第二部分顯示為
"Open     :e"。這裡 ":e" 右對齊，而 "O" 有下劃線，指示這是那個快捷鍵。

":amenu" 命令可以用來一次定義所有模式下的選單項。要使得該命令正確工作，在有些
模式下需要自動插入一個字元:
	模式		前面插入	後面附加	~
	普通		不需要		不需要
	可視		<C-C>		<C-\><C-G>
	插入		<C-\><C-O>
	命令列		<C-C>		<C-\><C-G>
	等待操作符	<C-C>		<C-\><C-G>

附加 CTRL-\ CTRL-G 是為了能在置位 'insertmode' 的時候回到插入模式。
|CTRL-\_CTRL-G|

示例: >

   :amenu File.Next	:next^M

等價於: >

   :nmenu File.Next	:next^M
   :vmenu File.Next	^C:next^M^\^G
   :imenu File.Next	^\^O:next^M
   :cmenu File.Next	^C:next^M^\^G
   :omenu File.Next	^C:next^M^\^G

小心: 插入模式下，因為使用 CTRL-O，只對單個普通模式的命令有效。如果你有兩個或
多個命令，必須使用 ":imenu" 命令。要在任何模式下插入文字，可以使用表示式暫存器
: >

   :amenu Insert.foobar   "='foobar'<CR>P

注意這裡使用 'cpoptions' 裡的 '<' 和 'k' 標誌位 (如果包含了它們，<> 形式和原始
的鍵碼都不會被識別)。

注意 命令列模式下的 <Esc> 執行該命令，和對映的情況相同。這是 Vi 相容的行為。使
用 CTRL-C 退出命令列模式。

						*:menu-<silent>* *:menu-silent*
要定義在命令列上不會回顯的選單，增加 "<silent>" 作為第一個引數。例如: >
	:menu <silent> Settings.Ignore\ case  :set ic<CR>
":set ic" 在使用該選單時不會回顯。但是執行命令時給出的訊息仍然會。要把那些也去
掉，在執行命令時增加 ":silent": >
	:menu <silent> Search.Header :exe ":silent normal /Header\r"<CR>
"<silent>" 也可以出現 (但只能) 在 "<special>" 或 "<script>" 之後。

					*:menu-<special>* *:menu-special*
定義選單時，特殊鍵可用 <> 記法，即使 'cpoptions' 包含了 "<" 標誌位也沒問題。可
用於不希望看到設定 'cpoptions' 時出現副作用的場合。例如: >
	:menu <special> Search.Header /Header<CR>
"<special>" 必須是第一個引數或出現 (但只能) 在 "<silent>" 或 "<script>" 之後。

						*:menu-<script>* *:menu-script*
選單的 "to" 部分會檢查對映。如果你不想這樣。使用 ":noremenu" 命令 (或者特定模
式下的類似命令)。
如果你需要區域性於指令碼的對映，增加 "<script>" 作為 ":menu" 的第一個或緊跟在
"<silent>" 或 "<special>" 之後的引數。

							*menu-priority*
你可以給選單指定優先順序。高優先順序的選單出現在右邊。優先順序在 ":menu" 命令之前以
數字形式給出。例如: >
	:80menu Buffer.next :bn<CR>

預設選單有如下的優先順序:
	File		10
	Edit		20
	Tools		40
	Syntax		50
	Buffers		60
	Window		70
	Help		9999

如果沒有或者給出優先順序為零，則使用 500。
彈出選單不使用優先順序。

如果系統支援 (Motif 和 GTK+)，Help 選單會出現在選單欄的最右側。GTK+ 2 和 3 版
本已經不再繼續這麼做，因為該環境現在不再鼓勵右對齊幫助選單的介面設計風格。

你可以使用超過 9999 的優先順序，使得選單能出現在 Help 選單之後。但這是不合標準的
做法，並不鼓勵。最高的可能優先順序大約是 32000。最低為 1。

							*sub-menu-priority*
相同的機制可以用來定位子選單。這裡，優先順序用出現在選單名前且用句號分隔的優先順序
列表給出: >
	:menu 80.500 Buffer.next :bn<CR>
子選單優先順序只有在不想該專案在正常的位置出現的時候才需要。例如，把某個子選單放
在其它專案之前: >
	:menu 80.100 Buffer.first :brew<CR>
也可以把子選單放在其它專案之後，並期望使用預設優先順序的未來專案會加在它之前: >
	:menu 80.900 Buffer.last :blast<CR>
如果不給出某個數字，使用預設值 500: >
	:menu .900 myMenu.test :echo "text"<CR>
選單優先順序只有在建立新選單時才會用到。一旦已經存在 (比如，在別的模式下)，優先
級不會改變。因此，優先順序只有在選單第一次用到的時候才需要給出。彈出選單是一個例
外。每個模式都有單獨的選單 (普通、操作符等待、可視、插入、命令列)。每個選單裡
的順序可以不同。這和選單欄的選單不同，那裡所有模式下都使用相同的順序。
注意: 現在，子選單優先順序不是在所有版本的 GUI 上都能工作。

							*menu-separator* *E332*
選單項可以用一個特殊專案分隔，它在專案間插入一些空白。根據不同系統情況，有的顯
示為一條線，有的顯示為虛線。這些專案必須以 '-' 開始和結尾。兩者之間的部分用來
給出一個獨一無二的名字。和正常的專案一樣，也可以使用優先順序。例如: >
	:menu Example.item1	:做些事
	:menu Example.-Sep-	:
	:menu Example.item2	:做些別的事
注意分隔符也需要一個右手邊的表示式。是什麼沒有關係，因為該專案永遠不會選到。簡
單點，用單個冒號就可以了。

							*gui-toolbar*
目前，只有 Win32、Athena、Motif、GTK+ (X11) 和 Photon GUI 才有工具欄。適當的時
候，在其它 GUI 上也會開放這一功能。預設的工具欄在 menu.vim 裡定義。
工具欄顯示與否有 'guioptions' 裡的 'T' 字母控制。你可以同時有選單和工具欄，或
者只用其中一項，甚至全不要。其外觀通過 'toolbar' 選項控制。你可以在影象、文字
或者兩者兼有之間選擇。

							*toolbar-icon*
工具欄定義為一個特殊的選單，名為 ToolBar。它只有一層。Vim 如此解釋該選單裡面的
專案:
1)  如果給出 "icon=" 引數，則使用該名字指定的檔案。這個檔案可以給出完整路徑，
    或者只是基礎名。如果是後者，在 'runtimepath' 的 "bitmaps" 目錄裡搜尋該文
    件，就像第三點那樣。例如: >
	:amenu icon=/usr/local/pixmaps/foo_icon.xpm ToolBar.Foo :echo "Foo"<CR>
	:amenu icon=FooIcon ToolBar.Foo :echo "Foo"<CR>
<   注意在第一個例子裡，需要包含副檔名，而第二個例子就不需要。
    如果該檔案不能開啟，則嘗試下面的步驟。
    檔名裡的空格必須用反斜槓轉義。
    選單優先順序必須在 icon 引數_之後_給出: >
	:amenu icon=foo 1.42 ToolBar.Foo :echo "42!"<CR>
2)  名為 'BuiltIn##' 的專案，其中 ## 是一個數字，用來指定 Vim 第 ## 個內建的位
    圖。目前，有 31 個編號的點陣圖，從 0 到 30。它們包含了多數常見的編輯操作
    |builtin-tools|。 >
	:amenu ToolBar.BuiltIn22 :call SearchNext("back")<CR>
3)  首先在 'runtimpath' 裡的 "bitmaps" 裡搜尋某個其它名字的專案。如果找到，該
    點陣圖檔案被用作工具按鈕的影象。注意 準確的檔名和具體的作業系統有關: 例
    如，Win32 上命令 >
	:amenu ToolBar.Hello :echo "hello"<CR>
<   會找到檔案 'hello.bmp'。在 GTK+/X11 上則是 'Hello.xpm'。在 GTK+ 2 上則按序
    查詢檔案 'Hello.png'、'Hello.xpm' 和 'Hello.bmp'，最先找到的被使用。
    MS-Windows 和 GTK+ 2 上點陣圖被縮放到合適的按鈕大小。在 MS-Windows 上，18 乘
    18 畫素最好。
    在 MS-Windows 上，點陣圖使用標準的調色盤，使用 16 色。淺灰色的畫素會被替換成
    視窗框架的顏色，而深灰色畫素被換成視窗陰影的顏色。根據你的系統，也許可以使
    用比這個更多的顏色。
4)  如果該點陣圖找不到，Vim 在內建名字的列表裡查詢該名字。因為每個內建按鈕影象都
    有名字。
    因此，如果沒有 open.bmp 的話，命令 >
	:amenu ToolBar.Open :e
<   會顯示內建的 "open a file" 按鈕圖示。
    在 menu.vim 裡可以看到所有內建的名字。
5)  如果以上都不行，就顯示一個可用的空白按鈕。

							*builtin-tools*
號  名字		正常定義的操作  ~
00  New			開啟新視窗
01  Open		瀏覽要在當前視窗開啟的檔案
02  Save		把緩衝區寫回檔案
03  Undo		撤銷上次改變
04  Redo		重做上次撤銷的改變
05  Cut			刪除選擇的文字到剪貼簿
06  Copy		複製選擇的文字到剪貼簿
07  Paste		從剪貼簿貼上文字
08  Print		列印當前緩衝區
09  Help		開啟緩衝區，顯示 Vim 的內建幫助
10  Find		開始搜尋命令
11  SaveAll		把所有修改過的緩衝區寫回檔案
12  SaveSesn		把當前的情況寫到會話檔案
13  NewSesn		建立一個新的會話檔案
14  LoadSesn		載入會話檔案
15  RunScript		瀏覽檔案，並作為 Vim 指令碼執行
16  Replace		執行 substitute 命令，給出提示
17  WinClose		關閉當前視窗
18  WinMax		使得當前視窗使用盡量多行
19  WinMin		使得當前視窗使用盡量少行
20  WinSplit		分割當前視窗
21  Shell		啟動外殼
22  FindPrev		反向再次搜尋
23  FindNext		正向再次搜尋
24  FindHelp		提示關鍵字，搜尋相關幫助
25  Make		執行 make，跳到第一個錯誤
26  TagJump		跳轉至游標所在的標籤
27  RunCtags		執行 Ctags，為當前目錄的檔案構造標籤
28  WinVSplit		垂直分割當前視窗
29  WinMaxWidth		使得當前視窗使用盡量多列
30  WinMinWidth		使得當前視窗使用盡量少列

					*hidden-menus* *win32-hidden-menus*
在 Win32 和 GTK+ GUI 上，以 ']' 開始的選單名使得該選單不會在主選單欄裡出現。你
可以用 |:popup| 或者 |:tearoff| 命令來顯示之。

							*popup-menu*
在 Win32、GTK+、Motif、Athena 和 Photon GUI 上，你可以定義特殊的 "PopUp" 菜
單。如果 'mousemodel' 設為 popup 或者 popup_setpos，這將是按下滑鼠右鍵時顯示的
選單。


5.3 顯示選單如何被對映					*showing-menus*

要看看現有的選單是如何被對映的，在 menu 命令之後只使用一個引數 (就像你使用
":map" 命令那樣)。如果指定的選單是一個子選單，那麼所有該子樹下面的層次結構都會
顯示。如果 :menu 後面不給出任何引數，顯示所在模式下的_所有_選單項 (例如，命令
行模式下顯示 :cmenu)。

該列表裡，在右手邊表示式之前顯示的特殊字元的含義是:
*	選單是通過 "nore" 形式定義的，以禁止重對映。
&	選單定義時包含了 "<script>"， 使得重對映只限於區域性於指令碼的對映。
-	選單被遮蔽。

注意 在 menu 命令裡輸入選單名時，按 <Tab> 可以用來補全選單專案名。


5.4 執行選單						*execute-menus*

						*:em*  *:emenu* *E334* *E335*
:[range]em[enu] {menu}		從命令列上執行 {menu} 選單。預設執行普通模式的
				命令。如果給出行範圍 range，執行可視模式的菜
				單。
				如果從 <c-o> 那裡呼叫，執行插入模式命令。例如:
>
	:emenu File.Exit

如果控制檯模式的 vim 編譯時加入 WANT_MENU，你可以用 :emenu 來訪問你已經習慣的
GUI 模式下有用的選單專案。關於一個能用於此目的的選項，見 'wildmenu'。例子又可
以見 |console-menus|。

如果使用行範圍 range，並且選擇的行和 '<、'> 指定的範圍相同，則使用最近一次可視
選擇的範圍執行選單命令。


5.5 刪除選單						*delete-menus*

						*:unme*  *:unmenu*
						*:aun*   *:aunmenu*
						*:nunme* *:nunmenu*
						*:ounme* *:ounmenu*
						*:vunme* *:vunmenu*
						*:xunme* *:xunmenu*
						*:sunme* *:sunmenu*
						*:iunme* *:iunmenu*
						*:cunme* *:cunmenu*
要刪除一個選單項或者整個子選單，使用 umenu 命令，類似於 unmap 命令。例如: >
    :unmenu! Edit.Paste

會刪除插入和命令列模式下的 Edit 選單的 Paste 項。

注意 在 umenu 命令裡輸入選單名時，按 <Tab> 可以用來補全選單專案名。

要刪除所有的選單，可用:				*:unmenu-all*  >
	:unmenu *	" 刪除普通和可視模式下的所有選單
	:unmenu! *	" 刪除插入和命令列模式下的所有選單
	:aunmenu *	" 刪除所有模式下的所有選單

如果你想去掉選單欄: >
	:set guioptions-=m


5.6 遮蔽選單					*disable-menus*

						*:menu-disable* *:menu-enable*
如果你不想刪除某個選單，但想暫時遮蔽之，可以在 ":menu" 命令裡使用 "enable" 或
"disable" 關鍵字。例如: >
	:menu disable &File.&Open\.\.\.
	:amenu enable *
	:amenu disable &Tools.*

和其它 menu 命令一樣，該命令作用於指定的模式上。注意 需要包含進來 "&" 這樣的字
符，以便找到經過翻譯的名字。如果引數是 "*"，所有的選單都受到影響。否則，給定的
選單名和下面所有的子選單 (如果存在的話) 都會受影響。


5.7 選單示例					*menu-examples*

這裡是一個如何用 menu 增加選單項的例子。你可以為游標下的關鍵字增加選單項。使用
暫存器 "z"。 >

  :nmenu Words.Add\ Var		wb"zye:menu! Words.<C-R>z <C-R>z<CR>
  :nmenu Words.Remove\ Var	wb"zye:unmenu! Words.<C-R>z<CR>
  :vmenu Words.Add\ Var		"zy:menu! Words.<C-R>z <C-R>z <CR>
  :vmenu Words.Remove\ Var	"zy:unmenu! Words.<C-R>z<CR>
  :imenu Words.Add\ Var		<Esc>wb"zye:menu! Words.<C-R>z <C-R>z<CR>a
  :imenu Words.Remove\ Var	<Esc>wb"zye:unmenu! Words.<C-R>z<CR>a

(這裡的右手邊表示式使用 <> 記法，你可以複製/貼上這裡的文字來測試這些對映，或者
把這些行加到你的 gvimrc 檔案裡；"<C-R>" 是 CTRL-R，"<CR>" 是 <CR> 鍵。|<>|)


5.8 工具提示 (Tooltips) 和選單提示

見使用者手冊的 |42.4| 一節。

							*:tmenu* *:tm*
:tm[enu] {menupath} {rhs}	為選單或者工具定義提示。{僅存在於 X11 和 Win32
				GUI}

:tm[enu] [menupath]		列出選單提示。{僅存在於 X11 和 Win32 GUI}

							*:tunmenu* *:tu*
:tu[nmenu] {menupath}		刪除選單或者工具的提示。{僅存在於 X11 和 Win32
				GUI}

如果為某選單項定義了提示，當滑鼠移過該專案時，命令列區域會出現該提示，就像標準
Windows 選單提示出現在狀態列那樣。(除非 Vim 在命令列模式的時候，這時當然什麼都
不會顯示。)
如果為某工具欄專案定義了提示，當滑鼠移過該按鈕時，提示以通常的方式出現。要改變
它們的顏色，使用 |hl-Tooltip| 高亮組。

"提示" 可以為每個選單專案定義。例如，在這樣定義選單項時: >
	:amenu MyMenu.Hello :echo "Hello"<CR>
提示可以這樣定義: >
	:tmenu MyMenu.Hello Displays a greeting.
然後這樣刪除: >
	:tunmenu MyMenu.Hello

現在，工具提示只有在 X11 和 Win32 GUI 上才支援。不過，在不遠的將來，應該在其它
gui 平臺上也會出現。

":tmenu" 選單和其它選單命令使用相同的引數。":tunmenu" 刪除已存在的選單提示，使
用方式和其它的 umenu 命令一樣。

如果選單專案不再合法，(即，在所有模式下，它的動作都被刪除) Vim 為你刪除選單的
提示 (和選單項)。這意味著 :aunmenu 徹底刪除了選單專案 - 你不需要再執行
:tunmenu 了。


5.9 彈出式選單

在 Win32 和 GTK+ GUI 上，你可以在游標位置下生成一個選單。這和 PopUp 選單類似，
除了你可以彈出任何選單樹以外。

該命令只是為了後向相容才存在，不鼓勵使用。因為它的行為很奇特。

							*:popup* *:popu*
:popu[p] {name}			彈出選單 {name}。選單名必須有至少一項子項，但
				不一定需要出現在選單欄上 (見 |hidden-menus|)。
				{僅在 Win32 和 GTK GUI 上有效}

:popu[p]! {name}		和上面類似，但使用滑鼠指標所在的位置，而不是光
				標位置。

示例: >
	:popup File
會使得 "File" 選單 (如果有的話) 出現在文字游標 (如果有 ! 則是滑鼠指標) 的位置
上。 >

	:amenu ]Toolbar.Make	:make<CR>
	:popup ]Toolbar
會建立一個彈出式選單，該選單並不存在於主選單欄中。

注意 ']' 開始的選單不會顯示。

==============================================================================
6. 附加							*gui-extras*

這一節說明其它和 GUI 相關的特性。

- 在 GUI 上，按 escape 之後不需要等一秒，因為沒有鍵碼會以 <Esc> 開始。

- 在 GUI 上，輸入 ^V 緊跟一個特殊鍵會插入 "<Key>"，因為所用到的內部字串沒有
  意義。也可以按下修飾符，得到 "<Modifiers-Key>"。

- 在 GUI 上，修飾符 SHIFT、CTRL 和 ALT (或 META) 可以在對映裡和特殊鍵或滑鼠一
  起使用，例如 :map <M-LeftDrag> <LeftDrag>

- 在 GUI 上，若干普通鍵在對映等命令裡可以帶修飾符，它們是 <Space>、<Tab>、
  <NL>、<CR> 和 <Esc>。

- 要在 Vim 腳本里檢查是不是使用 GUI，你可以這麼使用: >

	if has("gui_running")
	   echo "是的，我們有 GUI"
	else
	   echo "無聊的老終端"
	endif
<						*setting-guifont*
- 如果你在多個系統上使用同一個 vimrc 檔案，你可以這樣設定不同型別的 GUI 專用的
  選項: >

	if has("gui_running")
	    if has("gui_gtk2")
		:set guifont=Luxi\ Mono\ 12
	    elseif has("x11")
		" Also for GTK 1
		:set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
	    elseif has("gui_win32")
		:set guifont=Luxi_Mono:h12:cANSI
	    endif
	endif

MS Mincho 是一個推薦的日文字型。相關資訊見: http://www.lexikan.com/mincho.htm

==============================================================================
7. 外殼命令						*gui-shell*

X11 GUI 上，外部命令在 gvim 窗口裡執行。見 |gui-pty|。

警 告: 在 X11 GUI 上執行外部命令不總是可以的。"普通" 的命令，像 "ls"、"grep"、
"make" 大多數沒問題。需要一個智慧終端的命令，比如 "less" 和 "ispell" 就不行。
有的可能掛起，需要從另外一個終端殺死程序才能終止。所以，要小心一點。

Win32 GUI 上，外部命令在一個單獨的視窗上執行。見 |gui-shell-win32|。

 vim:tw=78:sw=4:ts=8:ft=help:norl:
